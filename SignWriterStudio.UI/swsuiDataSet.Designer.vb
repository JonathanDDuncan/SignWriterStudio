'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18033
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("swsuiDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class swsuiDataSet
    Inherits Global.System.Data.DataSet
    
    Private tableUICultures As UICulturesDataTable
    
    Private tableUIGroups As UIGroupsDataTable
    
    Private tableUIItems As UIItemsDataTable
    
    Private tableUIPictures As UIPicturesDataTable
    
    Private tableUISignLanguages As UISignLanguagesDataTable
    
    Private tableUITranslations As UITranslationsDataTable
    
    Private tableVersion As VersionDataTable
    
    Private relationFK_UIItems_0 As Global.System.Data.DataRelation
    
    Private relationFK_UIPictures_0 As Global.System.Data.DataRelation
    
    Private relationFK_UIPictures_1 As Global.System.Data.DataRelation
    
    Private relationFK_UITranslations_0 As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("UICultures")) Is Nothing) Then
                MyBase.Tables.Add(New UICulturesDataTable(ds.Tables("UICultures")))
            End If
            If (Not (ds.Tables("UIGroups")) Is Nothing) Then
                MyBase.Tables.Add(New UIGroupsDataTable(ds.Tables("UIGroups")))
            End If
            If (Not (ds.Tables("UIItems")) Is Nothing) Then
                MyBase.Tables.Add(New UIItemsDataTable(ds.Tables("UIItems")))
            End If
            If (Not (ds.Tables("UIPictures")) Is Nothing) Then
                MyBase.Tables.Add(New UIPicturesDataTable(ds.Tables("UIPictures")))
            End If
            If (Not (ds.Tables("UISignLanguages")) Is Nothing) Then
                MyBase.Tables.Add(New UISignLanguagesDataTable(ds.Tables("UISignLanguages")))
            End If
            If (Not (ds.Tables("UITranslations")) Is Nothing) Then
                MyBase.Tables.Add(New UITranslationsDataTable(ds.Tables("UITranslations")))
            End If
            If (Not (ds.Tables("Version")) Is Nothing) Then
                MyBase.Tables.Add(New VersionDataTable(ds.Tables("Version")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property UICultures() As UICulturesDataTable
        Get
            Return Me.tableUICultures
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property UIGroups() As UIGroupsDataTable
        Get
            Return Me.tableUIGroups
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property UIItems() As UIItemsDataTable
        Get
            Return Me.tableUIItems
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property UIPictures() As UIPicturesDataTable
        Get
            Return Me.tableUIPictures
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property UISignLanguages() As UISignLanguagesDataTable
        Get
            Return Me.tableUISignLanguages
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property UITranslations() As UITranslationsDataTable
        Get
            Return Me.tableUITranslations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Version() As VersionDataTable
        Get
            Return Me.tableVersion
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As swsuiDataSet = CType(MyBase.Clone,swsuiDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("UICultures")) Is Nothing) Then
                MyBase.Tables.Add(New UICulturesDataTable(ds.Tables("UICultures")))
            End If
            If (Not (ds.Tables("UIGroups")) Is Nothing) Then
                MyBase.Tables.Add(New UIGroupsDataTable(ds.Tables("UIGroups")))
            End If
            If (Not (ds.Tables("UIItems")) Is Nothing) Then
                MyBase.Tables.Add(New UIItemsDataTable(ds.Tables("UIItems")))
            End If
            If (Not (ds.Tables("UIPictures")) Is Nothing) Then
                MyBase.Tables.Add(New UIPicturesDataTable(ds.Tables("UIPictures")))
            End If
            If (Not (ds.Tables("UISignLanguages")) Is Nothing) Then
                MyBase.Tables.Add(New UISignLanguagesDataTable(ds.Tables("UISignLanguages")))
            End If
            If (Not (ds.Tables("UITranslations")) Is Nothing) Then
                MyBase.Tables.Add(New UITranslationsDataTable(ds.Tables("UITranslations")))
            End If
            If (Not (ds.Tables("Version")) Is Nothing) Then
                MyBase.Tables.Add(New VersionDataTable(ds.Tables("Version")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableUICultures = CType(MyBase.Tables("UICultures"),UICulturesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableUICultures) Is Nothing) Then
                Me.tableUICultures.InitVars
            End If
        End If
        Me.tableUIGroups = CType(MyBase.Tables("UIGroups"),UIGroupsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableUIGroups) Is Nothing) Then
                Me.tableUIGroups.InitVars
            End If
        End If
        Me.tableUIItems = CType(MyBase.Tables("UIItems"),UIItemsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableUIItems) Is Nothing) Then
                Me.tableUIItems.InitVars
            End If
        End If
        Me.tableUIPictures = CType(MyBase.Tables("UIPictures"),UIPicturesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableUIPictures) Is Nothing) Then
                Me.tableUIPictures.InitVars
            End If
        End If
        Me.tableUISignLanguages = CType(MyBase.Tables("UISignLanguages"),UISignLanguagesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableUISignLanguages) Is Nothing) Then
                Me.tableUISignLanguages.InitVars
            End If
        End If
        Me.tableUITranslations = CType(MyBase.Tables("UITranslations"),UITranslationsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableUITranslations) Is Nothing) Then
                Me.tableUITranslations.InitVars
            End If
        End If
        Me.tableVersion = CType(MyBase.Tables("Version"),VersionDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVersion) Is Nothing) Then
                Me.tableVersion.InitVars
            End If
        End If
        Me.relationFK_UIItems_0 = Me.Relations("FK_UIItems_0")
        Me.relationFK_UIPictures_0 = Me.Relations("FK_UIPictures_0")
        Me.relationFK_UIPictures_1 = Me.Relations("FK_UIPictures_1")
        Me.relationFK_UITranslations_0 = Me.Relations("FK_UITranslations_0")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "swsuiDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/swsuiDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableUICultures = New UICulturesDataTable()
        MyBase.Tables.Add(Me.tableUICultures)
        Me.tableUIGroups = New UIGroupsDataTable()
        MyBase.Tables.Add(Me.tableUIGroups)
        Me.tableUIItems = New UIItemsDataTable()
        MyBase.Tables.Add(Me.tableUIItems)
        Me.tableUIPictures = New UIPicturesDataTable()
        MyBase.Tables.Add(Me.tableUIPictures)
        Me.tableUISignLanguages = New UISignLanguagesDataTable()
        MyBase.Tables.Add(Me.tableUISignLanguages)
        Me.tableUITranslations = New UITranslationsDataTable()
        MyBase.Tables.Add(Me.tableUITranslations)
        Me.tableVersion = New VersionDataTable()
        MyBase.Tables.Add(Me.tableVersion)
        Me.relationFK_UIItems_0 = New Global.System.Data.DataRelation("FK_UIItems_0", New Global.System.Data.DataColumn() {Me.tableUIGroups.IdUIGroupColumn}, New Global.System.Data.DataColumn() {Me.tableUIItems.IDUIGroupColumn}, false)
        Me.Relations.Add(Me.relationFK_UIItems_0)
        Me.relationFK_UIPictures_0 = New Global.System.Data.DataRelation("FK_UIPictures_0", New Global.System.Data.DataColumn() {Me.tableUIItems.IdUIItemColumn}, New Global.System.Data.DataColumn() {Me.tableUIPictures.IDUIItemColumn}, false)
        Me.Relations.Add(Me.relationFK_UIPictures_0)
        Me.relationFK_UIPictures_1 = New Global.System.Data.DataRelation("FK_UIPictures_1", New Global.System.Data.DataColumn() {Me.tableUISignLanguages.IDSignLanguageColumn}, New Global.System.Data.DataColumn() {Me.tableUIPictures.IDSignLanguageColumn}, false)
        Me.Relations.Add(Me.relationFK_UIPictures_1)
        Me.relationFK_UITranslations_0 = New Global.System.Data.DataRelation("FK_UITranslations_0", New Global.System.Data.DataColumn() {Me.tableUIItems.IdUIItemColumn}, New Global.System.Data.DataColumn() {Me.tableUITranslations.IDUIItemColumn}, false)
        Me.Relations.Add(Me.relationFK_UITranslations_0)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeUICultures() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeUIGroups() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeUIItems() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeUIPictures() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeUISignLanguages() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeUITranslations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeVersion() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As swsuiDataSet = New swsuiDataSet()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub UICulturesRowChangeEventHandler(ByVal sender As Object, ByVal e As UICulturesRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub UIGroupsRowChangeEventHandler(ByVal sender As Object, ByVal e As UIGroupsRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub UIItemsRowChangeEventHandler(ByVal sender As Object, ByVal e As UIItemsRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub UIPicturesRowChangeEventHandler(ByVal sender As Object, ByVal e As UIPicturesRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub UISignLanguagesRowChangeEventHandler(ByVal sender As Object, ByVal e As UISignLanguagesRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub UITranslationsRowChangeEventHandler(ByVal sender As Object, ByVal e As UITranslationsRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub VersionRowChangeEventHandler(ByVal sender As Object, ByVal e As VersionRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class UICulturesDataTable
        Inherits Global.System.Data.TypedTableBase(Of UICulturesRow)
        
        Private columnIDCulture As Global.System.Data.DataColumn
        
        Private columnCultureName As Global.System.Data.DataColumn
        
        Private columnCultureIdentifier As Global.System.Data.DataColumn
        
        Private columnCultureIdentifierDec As Global.System.Data.DataColumn
        
        Private columnLanguageCountryRegion As Global.System.Data.DataColumn
        
        Private columnEnabled As Global.System.Data.DataColumn
        
        Private columnNeutralCulture As Global.System.Data.DataColumn
        
        Private columnGUID As Global.System.Data.DataColumn
        
        Private columnLastChange As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "UICultures"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDCultureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDCulture
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CultureNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCultureName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CultureIdentifierColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCultureIdentifier
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CultureIdentifierDecColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCultureIdentifierDec
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LanguageCountryRegionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLanguageCountryRegion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EnabledColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEnabled
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NeutralCultureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNeutralCulture
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GUIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGUID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LastChangeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastChange
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As UICulturesRow
            Get
                Return CType(Me.Rows(index),UICulturesRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event UICulturesRowChanging As UICulturesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event UICulturesRowChanged As UICulturesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event UICulturesRowDeleting As UICulturesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event UICulturesRowDeleted As UICulturesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddUICulturesRow(ByVal row As UICulturesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddUICulturesRow(ByVal IDCulture As Long, ByVal CultureName As String, ByVal CultureIdentifier As String, ByVal CultureIdentifierDec As Short, ByVal LanguageCountryRegion As String, ByVal Enabled As Boolean, ByVal NeutralCulture As Boolean, ByVal GUID As String, ByVal LastChange As Date) As UICulturesRow
            Dim rowUICulturesRow As UICulturesRow = CType(Me.NewRow,UICulturesRow)
            Dim columnValuesArray() As Object = New Object() {IDCulture, CultureName, CultureIdentifier, CultureIdentifierDec, LanguageCountryRegion, Enabled, NeutralCulture, GUID, LastChange}
            rowUICulturesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowUICulturesRow)
            Return rowUICulturesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByIDCulture(ByVal IDCulture As Long) As UICulturesRow
            Return CType(Me.Rows.Find(New Object() {IDCulture}),UICulturesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As UICulturesDataTable = CType(MyBase.Clone,UICulturesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New UICulturesDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnIDCulture = MyBase.Columns("IDCulture")
            Me.columnCultureName = MyBase.Columns("CultureName")
            Me.columnCultureIdentifier = MyBase.Columns("CultureIdentifier")
            Me.columnCultureIdentifierDec = MyBase.Columns("CultureIdentifierDec")
            Me.columnLanguageCountryRegion = MyBase.Columns("LanguageCountryRegion")
            Me.columnEnabled = MyBase.Columns("Enabled")
            Me.columnNeutralCulture = MyBase.Columns("NeutralCulture")
            Me.columnGUID = MyBase.Columns("GUID")
            Me.columnLastChange = MyBase.Columns("LastChange")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnIDCulture = New Global.System.Data.DataColumn("IDCulture", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDCulture)
            Me.columnCultureName = New Global.System.Data.DataColumn("CultureName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCultureName)
            Me.columnCultureIdentifier = New Global.System.Data.DataColumn("CultureIdentifier", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCultureIdentifier)
            Me.columnCultureIdentifierDec = New Global.System.Data.DataColumn("CultureIdentifierDec", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCultureIdentifierDec)
            Me.columnLanguageCountryRegion = New Global.System.Data.DataColumn("LanguageCountryRegion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLanguageCountryRegion)
            Me.columnEnabled = New Global.System.Data.DataColumn("Enabled", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEnabled)
            Me.columnNeutralCulture = New Global.System.Data.DataColumn("NeutralCulture", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNeutralCulture)
            Me.columnGUID = New Global.System.Data.DataColumn("GUID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGUID)
            Me.columnLastChange = New Global.System.Data.DataColumn("LastChange", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastChange)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIDCulture}, true))
            Me.columnIDCulture.AllowDBNull = false
            Me.columnIDCulture.Unique = true
            Me.columnCultureName.MaxLength = 255
            Me.columnCultureIdentifier.MaxLength = 255
            Me.columnLanguageCountryRegion.MaxLength = 255
            Me.columnEnabled.AllowDBNull = false
            Me.columnNeutralCulture.AllowDBNull = false
            Me.columnGUID.MaxLength = 38
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewUICulturesRow() As UICulturesRow
            Return CType(Me.NewRow,UICulturesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New UICulturesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(UICulturesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.UICulturesRowChangedEvent) Is Nothing) Then
                RaiseEvent UICulturesRowChanged(Me, New UICulturesRowChangeEvent(CType(e.Row,UICulturesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.UICulturesRowChangingEvent) Is Nothing) Then
                RaiseEvent UICulturesRowChanging(Me, New UICulturesRowChangeEvent(CType(e.Row,UICulturesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.UICulturesRowDeletedEvent) Is Nothing) Then
                RaiseEvent UICulturesRowDeleted(Me, New UICulturesRowChangeEvent(CType(e.Row,UICulturesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.UICulturesRowDeletingEvent) Is Nothing) Then
                RaiseEvent UICulturesRowDeleting(Me, New UICulturesRowChangeEvent(CType(e.Row,UICulturesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveUICulturesRow(ByVal row As UICulturesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As swsuiDataSet = New swsuiDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "UICulturesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class UIGroupsDataTable
        Inherits Global.System.Data.TypedTableBase(Of UIGroupsRow)
        
        Private columnIdUIGroup As Global.System.Data.DataColumn
        
        Private columnUIGroup As Global.System.Data.DataColumn
        
        Private columnGUID As Global.System.Data.DataColumn
        
        Private columnLastChange As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "UIGroups"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IdUIGroupColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdUIGroup
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property UIGroupColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUIGroup
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GUIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGUID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LastChangeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastChange
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As UIGroupsRow
            Get
                Return CType(Me.Rows(index),UIGroupsRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event UIGroupsRowChanging As UIGroupsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event UIGroupsRowChanged As UIGroupsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event UIGroupsRowDeleting As UIGroupsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event UIGroupsRowDeleted As UIGroupsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddUIGroupsRow(ByVal row As UIGroupsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddUIGroupsRow(ByVal IdUIGroup As Long, ByVal UIGroup As String, ByVal GUID As String, ByVal LastChange As Date) As UIGroupsRow
            Dim rowUIGroupsRow As UIGroupsRow = CType(Me.NewRow,UIGroupsRow)
            Dim columnValuesArray() As Object = New Object() {IdUIGroup, UIGroup, GUID, LastChange}
            rowUIGroupsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowUIGroupsRow)
            Return rowUIGroupsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByIdUIGroup(ByVal IdUIGroup As Long) As UIGroupsRow
            Return CType(Me.Rows.Find(New Object() {IdUIGroup}),UIGroupsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As UIGroupsDataTable = CType(MyBase.Clone,UIGroupsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New UIGroupsDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnIdUIGroup = MyBase.Columns("IdUIGroup")
            Me.columnUIGroup = MyBase.Columns("UIGroup")
            Me.columnGUID = MyBase.Columns("GUID")
            Me.columnLastChange = MyBase.Columns("LastChange")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnIdUIGroup = New Global.System.Data.DataColumn("IdUIGroup", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdUIGroup)
            Me.columnUIGroup = New Global.System.Data.DataColumn("UIGroup", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUIGroup)
            Me.columnGUID = New Global.System.Data.DataColumn("GUID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGUID)
            Me.columnLastChange = New Global.System.Data.DataColumn("LastChange", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastChange)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIdUIGroup}, true))
            Me.columnIdUIGroup.AllowDBNull = false
            Me.columnIdUIGroup.Unique = true
            Me.columnUIGroup.MaxLength = 50
            Me.columnGUID.MaxLength = 38
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewUIGroupsRow() As UIGroupsRow
            Return CType(Me.NewRow,UIGroupsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New UIGroupsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(UIGroupsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.UIGroupsRowChangedEvent) Is Nothing) Then
                RaiseEvent UIGroupsRowChanged(Me, New UIGroupsRowChangeEvent(CType(e.Row,UIGroupsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.UIGroupsRowChangingEvent) Is Nothing) Then
                RaiseEvent UIGroupsRowChanging(Me, New UIGroupsRowChangeEvent(CType(e.Row,UIGroupsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.UIGroupsRowDeletedEvent) Is Nothing) Then
                RaiseEvent UIGroupsRowDeleted(Me, New UIGroupsRowChangeEvent(CType(e.Row,UIGroupsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.UIGroupsRowDeletingEvent) Is Nothing) Then
                RaiseEvent UIGroupsRowDeleting(Me, New UIGroupsRowChangeEvent(CType(e.Row,UIGroupsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveUIGroupsRow(ByVal row As UIGroupsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As swsuiDataSet = New swsuiDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "UIGroupsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class UIItemsDataTable
        Inherits Global.System.Data.TypedTableBase(Of UIItemsRow)
        
        Private columnIdUIItem As Global.System.Data.DataColumn
        
        Private columnIDUIGroup As Global.System.Data.DataColumn
        
        Private columnUIItem As Global.System.Data.DataColumn
        
        Private columnGUID As Global.System.Data.DataColumn
        
        Private columnLastChange As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "UIItems"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IdUIItemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdUIItem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDUIGroupColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDUIGroup
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property UIItemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUIItem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GUIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGUID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LastChangeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastChange
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As UIItemsRow
            Get
                Return CType(Me.Rows(index),UIItemsRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event UIItemsRowChanging As UIItemsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event UIItemsRowChanged As UIItemsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event UIItemsRowDeleting As UIItemsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event UIItemsRowDeleted As UIItemsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddUIItemsRow(ByVal row As UIItemsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddUIItemsRow(ByVal IdUIItem As Long, ByVal parentUIGroupsRowByFK_UIItems_0 As UIGroupsRow, ByVal UIItem As String, ByVal GUID As String, ByVal LastChange As Date) As UIItemsRow
            Dim rowUIItemsRow As UIItemsRow = CType(Me.NewRow,UIItemsRow)
            Dim columnValuesArray() As Object = New Object() {IdUIItem, Nothing, UIItem, GUID, LastChange}
            If (Not (parentUIGroupsRowByFK_UIItems_0) Is Nothing) Then
                columnValuesArray(1) = parentUIGroupsRowByFK_UIItems_0(0)
            End If
            rowUIItemsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowUIItemsRow)
            Return rowUIItemsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByIdUIItem(ByVal IdUIItem As Long) As UIItemsRow
            Return CType(Me.Rows.Find(New Object() {IdUIItem}),UIItemsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As UIItemsDataTable = CType(MyBase.Clone,UIItemsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New UIItemsDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnIdUIItem = MyBase.Columns("IdUIItem")
            Me.columnIDUIGroup = MyBase.Columns("IDUIGroup")
            Me.columnUIItem = MyBase.Columns("UIItem")
            Me.columnGUID = MyBase.Columns("GUID")
            Me.columnLastChange = MyBase.Columns("LastChange")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnIdUIItem = New Global.System.Data.DataColumn("IdUIItem", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdUIItem)
            Me.columnIDUIGroup = New Global.System.Data.DataColumn("IDUIGroup", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDUIGroup)
            Me.columnUIItem = New Global.System.Data.DataColumn("UIItem", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUIItem)
            Me.columnGUID = New Global.System.Data.DataColumn("GUID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGUID)
            Me.columnLastChange = New Global.System.Data.DataColumn("LastChange", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastChange)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIdUIItem}, true))
            Me.columnIdUIItem.AllowDBNull = false
            Me.columnIdUIItem.Unique = true
            Me.columnUIItem.MaxLength = 100
            Me.columnGUID.MaxLength = 38
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewUIItemsRow() As UIItemsRow
            Return CType(Me.NewRow,UIItemsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New UIItemsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(UIItemsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.UIItemsRowChangedEvent) Is Nothing) Then
                RaiseEvent UIItemsRowChanged(Me, New UIItemsRowChangeEvent(CType(e.Row,UIItemsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.UIItemsRowChangingEvent) Is Nothing) Then
                RaiseEvent UIItemsRowChanging(Me, New UIItemsRowChangeEvent(CType(e.Row,UIItemsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.UIItemsRowDeletedEvent) Is Nothing) Then
                RaiseEvent UIItemsRowDeleted(Me, New UIItemsRowChangeEvent(CType(e.Row,UIItemsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.UIItemsRowDeletingEvent) Is Nothing) Then
                RaiseEvent UIItemsRowDeleting(Me, New UIItemsRowChangeEvent(CType(e.Row,UIItemsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveUIItemsRow(ByVal row As UIItemsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As swsuiDataSet = New swsuiDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "UIItemsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class UIPicturesDataTable
        Inherits Global.System.Data.TypedTableBase(Of UIPicturesRow)
        
        Private columnIdUIPictures As Global.System.Data.DataColumn
        
        Private columnIDUIItem As Global.System.Data.DataColumn
        
        Private columnUIItem As Global.System.Data.DataColumn
        
        Private columnIDSignLanguage As Global.System.Data.DataColumn
        
        Private columnUIPicture As Global.System.Data.DataColumn
        
        Private columnGUID As Global.System.Data.DataColumn
        
        Private columnLastChange As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "UIPictures"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IdUIPicturesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdUIPictures
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDUIItemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDUIItem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property UIItemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUIItem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDSignLanguageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDSignLanguage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property UIPictureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUIPicture
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GUIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGUID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LastChangeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastChange
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As UIPicturesRow
            Get
                Return CType(Me.Rows(index),UIPicturesRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event UIPicturesRowChanging As UIPicturesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event UIPicturesRowChanged As UIPicturesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event UIPicturesRowDeleting As UIPicturesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event UIPicturesRowDeleted As UIPicturesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddUIPicturesRow(ByVal row As UIPicturesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddUIPicturesRow(ByVal IdUIPictures As Long, ByVal parentUIItemsRowByFK_UIPictures_0 As UIItemsRow, ByVal UIItem As String, ByVal parentUISignLanguagesRowByFK_UIPictures_1 As UISignLanguagesRow, ByVal UIPicture() As Byte, ByVal GUID As String, ByVal LastChange As Date) As UIPicturesRow
            Dim rowUIPicturesRow As UIPicturesRow = CType(Me.NewRow,UIPicturesRow)
            Dim columnValuesArray() As Object = New Object() {IdUIPictures, Nothing, UIItem, Nothing, UIPicture, GUID, LastChange}
            If (Not (parentUIItemsRowByFK_UIPictures_0) Is Nothing) Then
                columnValuesArray(1) = parentUIItemsRowByFK_UIPictures_0(0)
            End If
            If (Not (parentUISignLanguagesRowByFK_UIPictures_1) Is Nothing) Then
                columnValuesArray(3) = parentUISignLanguagesRowByFK_UIPictures_1(0)
            End If
            rowUIPicturesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowUIPicturesRow)
            Return rowUIPicturesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByIdUIPictures(ByVal IdUIPictures As Long) As UIPicturesRow
            Return CType(Me.Rows.Find(New Object() {IdUIPictures}),UIPicturesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As UIPicturesDataTable = CType(MyBase.Clone,UIPicturesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New UIPicturesDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnIdUIPictures = MyBase.Columns("IdUIPictures")
            Me.columnIDUIItem = MyBase.Columns("IDUIItem")
            Me.columnUIItem = MyBase.Columns("UIItem")
            Me.columnIDSignLanguage = MyBase.Columns("IDSignLanguage")
            Me.columnUIPicture = MyBase.Columns("UIPicture")
            Me.columnGUID = MyBase.Columns("GUID")
            Me.columnLastChange = MyBase.Columns("LastChange")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnIdUIPictures = New Global.System.Data.DataColumn("IdUIPictures", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdUIPictures)
            Me.columnIDUIItem = New Global.System.Data.DataColumn("IDUIItem", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDUIItem)
            Me.columnUIItem = New Global.System.Data.DataColumn("UIItem", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUIItem)
            Me.columnIDSignLanguage = New Global.System.Data.DataColumn("IDSignLanguage", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDSignLanguage)
            Me.columnUIPicture = New Global.System.Data.DataColumn("UIPicture", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUIPicture)
            Me.columnGUID = New Global.System.Data.DataColumn("GUID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGUID)
            Me.columnLastChange = New Global.System.Data.DataColumn("LastChange", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastChange)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIdUIPictures}, true))
            Me.columnIdUIPictures.AllowDBNull = false
            Me.columnIdUIPictures.Unique = true
            Me.columnUIItem.MaxLength = 100
            Me.columnGUID.MaxLength = 38
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewUIPicturesRow() As UIPicturesRow
            Return CType(Me.NewRow,UIPicturesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New UIPicturesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(UIPicturesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.UIPicturesRowChangedEvent) Is Nothing) Then
                RaiseEvent UIPicturesRowChanged(Me, New UIPicturesRowChangeEvent(CType(e.Row,UIPicturesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.UIPicturesRowChangingEvent) Is Nothing) Then
                RaiseEvent UIPicturesRowChanging(Me, New UIPicturesRowChangeEvent(CType(e.Row,UIPicturesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.UIPicturesRowDeletedEvent) Is Nothing) Then
                RaiseEvent UIPicturesRowDeleted(Me, New UIPicturesRowChangeEvent(CType(e.Row,UIPicturesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.UIPicturesRowDeletingEvent) Is Nothing) Then
                RaiseEvent UIPicturesRowDeleting(Me, New UIPicturesRowChangeEvent(CType(e.Row,UIPicturesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveUIPicturesRow(ByVal row As UIPicturesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As swsuiDataSet = New swsuiDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "UIPicturesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class UISignLanguagesDataTable
        Inherits Global.System.Data.TypedTableBase(Of UISignLanguagesRow)
        
        Private columnIDSignLanguage As Global.System.Data.DataColumn
        
        Private columnSignLanguage As Global.System.Data.DataColumn
        
        Private columnCommonName As Global.System.Data.DataColumn
        
        Private columnCountry As Global.System.Data.DataColumn
        
        Private columnISO6393 As Global.System.Data.DataColumn
        
        Private columnAcronym As Global.System.Data.DataColumn
        
        Private columnEnabled As Global.System.Data.DataColumn
        
        Private columnGUID As Global.System.Data.DataColumn
        
        Private columnLastChange As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "UISignLanguages"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDSignLanguageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDSignLanguage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SignLanguageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSignLanguage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CommonNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCommonName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CountryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCountry
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ISO6393Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnISO6393
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AcronymColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAcronym
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EnabledColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEnabled
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GUIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGUID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LastChangeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastChange
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As UISignLanguagesRow
            Get
                Return CType(Me.Rows(index),UISignLanguagesRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event UISignLanguagesRowChanging As UISignLanguagesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event UISignLanguagesRowChanged As UISignLanguagesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event UISignLanguagesRowDeleting As UISignLanguagesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event UISignLanguagesRowDeleted As UISignLanguagesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddUISignLanguagesRow(ByVal row As UISignLanguagesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddUISignLanguagesRow(ByVal IDSignLanguage As Long, ByVal SignLanguage As String, ByVal CommonName As String, ByVal Country As String, ByVal ISO6393 As String, ByVal Acronym As String, ByVal Enabled As Boolean, ByVal GUID As String, ByVal LastChange As Date) As UISignLanguagesRow
            Dim rowUISignLanguagesRow As UISignLanguagesRow = CType(Me.NewRow,UISignLanguagesRow)
            Dim columnValuesArray() As Object = New Object() {IDSignLanguage, SignLanguage, CommonName, Country, ISO6393, Acronym, Enabled, GUID, LastChange}
            rowUISignLanguagesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowUISignLanguagesRow)
            Return rowUISignLanguagesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByIDSignLanguage(ByVal IDSignLanguage As Long) As UISignLanguagesRow
            Return CType(Me.Rows.Find(New Object() {IDSignLanguage}),UISignLanguagesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As UISignLanguagesDataTable = CType(MyBase.Clone,UISignLanguagesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New UISignLanguagesDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnIDSignLanguage = MyBase.Columns("IDSignLanguage")
            Me.columnSignLanguage = MyBase.Columns("SignLanguage")
            Me.columnCommonName = MyBase.Columns("CommonName")
            Me.columnCountry = MyBase.Columns("Country")
            Me.columnISO6393 = MyBase.Columns("ISO6393")
            Me.columnAcronym = MyBase.Columns("Acronym")
            Me.columnEnabled = MyBase.Columns("Enabled")
            Me.columnGUID = MyBase.Columns("GUID")
            Me.columnLastChange = MyBase.Columns("LastChange")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnIDSignLanguage = New Global.System.Data.DataColumn("IDSignLanguage", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDSignLanguage)
            Me.columnSignLanguage = New Global.System.Data.DataColumn("SignLanguage", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSignLanguage)
            Me.columnCommonName = New Global.System.Data.DataColumn("CommonName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCommonName)
            Me.columnCountry = New Global.System.Data.DataColumn("Country", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCountry)
            Me.columnISO6393 = New Global.System.Data.DataColumn("ISO6393", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnISO6393)
            Me.columnAcronym = New Global.System.Data.DataColumn("Acronym", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAcronym)
            Me.columnEnabled = New Global.System.Data.DataColumn("Enabled", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEnabled)
            Me.columnGUID = New Global.System.Data.DataColumn("GUID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGUID)
            Me.columnLastChange = New Global.System.Data.DataColumn("LastChange", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastChange)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIDSignLanguage}, true))
            Me.columnIDSignLanguage.AllowDBNull = false
            Me.columnIDSignLanguage.Unique = true
            Me.columnSignLanguage.MaxLength = 255
            Me.columnCommonName.MaxLength = 255
            Me.columnCountry.MaxLength = 255
            Me.columnISO6393.MaxLength = 255
            Me.columnAcronym.MaxLength = 255
            Me.columnEnabled.AllowDBNull = false
            Me.columnGUID.MaxLength = 38
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewUISignLanguagesRow() As UISignLanguagesRow
            Return CType(Me.NewRow,UISignLanguagesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New UISignLanguagesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(UISignLanguagesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.UISignLanguagesRowChangedEvent) Is Nothing) Then
                RaiseEvent UISignLanguagesRowChanged(Me, New UISignLanguagesRowChangeEvent(CType(e.Row,UISignLanguagesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.UISignLanguagesRowChangingEvent) Is Nothing) Then
                RaiseEvent UISignLanguagesRowChanging(Me, New UISignLanguagesRowChangeEvent(CType(e.Row,UISignLanguagesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.UISignLanguagesRowDeletedEvent) Is Nothing) Then
                RaiseEvent UISignLanguagesRowDeleted(Me, New UISignLanguagesRowChangeEvent(CType(e.Row,UISignLanguagesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.UISignLanguagesRowDeletingEvent) Is Nothing) Then
                RaiseEvent UISignLanguagesRowDeleting(Me, New UISignLanguagesRowChangeEvent(CType(e.Row,UISignLanguagesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveUISignLanguagesRow(ByVal row As UISignLanguagesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As swsuiDataSet = New swsuiDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "UISignLanguagesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class UITranslationsDataTable
        Inherits Global.System.Data.TypedTableBase(Of UITranslationsRow)
        
        Private columnIdUITranslation As Global.System.Data.DataColumn
        
        Private columnIDUIItem As Global.System.Data.DataColumn
        
        Private columnIDCulture As Global.System.Data.DataColumn
        
        Private columnUIContext As Global.System.Data.DataColumn
        
        Private columnUITranslation As Global.System.Data.DataColumn
        
        Private columnGUID As Global.System.Data.DataColumn
        
        Private columnLastChange As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "UITranslations"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IdUITranslationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdUITranslation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDUIItemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDUIItem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDCultureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDCulture
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property UIContextColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUIContext
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property UITranslationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUITranslation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GUIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGUID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LastChangeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastChange
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As UITranslationsRow
            Get
                Return CType(Me.Rows(index),UITranslationsRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event UITranslationsRowChanging As UITranslationsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event UITranslationsRowChanged As UITranslationsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event UITranslationsRowDeleting As UITranslationsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event UITranslationsRowDeleted As UITranslationsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddUITranslationsRow(ByVal row As UITranslationsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddUITranslationsRow(ByVal IdUITranslation As Long, ByVal parentUIItemsRowByFK_UITranslations_0 As UIItemsRow, ByVal IDCulture As Long, ByVal UIContext As String, ByVal UITranslation As String, ByVal GUID As String, ByVal LastChange As Date) As UITranslationsRow
            Dim rowUITranslationsRow As UITranslationsRow = CType(Me.NewRow,UITranslationsRow)
            Dim columnValuesArray() As Object = New Object() {IdUITranslation, Nothing, IDCulture, UIContext, UITranslation, GUID, LastChange}
            If (Not (parentUIItemsRowByFK_UITranslations_0) Is Nothing) Then
                columnValuesArray(1) = parentUIItemsRowByFK_UITranslations_0(0)
            End If
            rowUITranslationsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowUITranslationsRow)
            Return rowUITranslationsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByIdUITranslation(ByVal IdUITranslation As Long) As UITranslationsRow
            Return CType(Me.Rows.Find(New Object() {IdUITranslation}),UITranslationsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As UITranslationsDataTable = CType(MyBase.Clone,UITranslationsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New UITranslationsDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnIdUITranslation = MyBase.Columns("IdUITranslation")
            Me.columnIDUIItem = MyBase.Columns("IDUIItem")
            Me.columnIDCulture = MyBase.Columns("IDCulture")
            Me.columnUIContext = MyBase.Columns("UIContext")
            Me.columnUITranslation = MyBase.Columns("UITranslation")
            Me.columnGUID = MyBase.Columns("GUID")
            Me.columnLastChange = MyBase.Columns("LastChange")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnIdUITranslation = New Global.System.Data.DataColumn("IdUITranslation", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdUITranslation)
            Me.columnIDUIItem = New Global.System.Data.DataColumn("IDUIItem", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDUIItem)
            Me.columnIDCulture = New Global.System.Data.DataColumn("IDCulture", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDCulture)
            Me.columnUIContext = New Global.System.Data.DataColumn("UIContext", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUIContext)
            Me.columnUITranslation = New Global.System.Data.DataColumn("UITranslation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUITranslation)
            Me.columnGUID = New Global.System.Data.DataColumn("GUID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGUID)
            Me.columnLastChange = New Global.System.Data.DataColumn("LastChange", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastChange)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIdUITranslation}, true))
            Me.columnIdUITranslation.AllowDBNull = false
            Me.columnIdUITranslation.Unique = true
            Me.columnUIContext.MaxLength = 2147483647
            Me.columnUITranslation.MaxLength = 2147483647
            Me.columnGUID.MaxLength = 38
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewUITranslationsRow() As UITranslationsRow
            Return CType(Me.NewRow,UITranslationsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New UITranslationsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(UITranslationsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.UITranslationsRowChangedEvent) Is Nothing) Then
                RaiseEvent UITranslationsRowChanged(Me, New UITranslationsRowChangeEvent(CType(e.Row,UITranslationsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.UITranslationsRowChangingEvent) Is Nothing) Then
                RaiseEvent UITranslationsRowChanging(Me, New UITranslationsRowChangeEvent(CType(e.Row,UITranslationsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.UITranslationsRowDeletedEvent) Is Nothing) Then
                RaiseEvent UITranslationsRowDeleted(Me, New UITranslationsRowChangeEvent(CType(e.Row,UITranslationsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.UITranslationsRowDeletingEvent) Is Nothing) Then
                RaiseEvent UITranslationsRowDeleting(Me, New UITranslationsRowChangeEvent(CType(e.Row,UITranslationsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveUITranslationsRow(ByVal row As UITranslationsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As swsuiDataSet = New swsuiDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "UITranslationsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VersionDataTable
        Inherits Global.System.Data.TypedTableBase(Of VersionRow)
        
        Private columnIDVersion As Global.System.Data.DataColumn
        
        Private columnMajor As Global.System.Data.DataColumn
        
        Private columnMinor As Global.System.Data.DataColumn
        
        Private columnDatabaseName As Global.System.Data.DataColumn
        
        Private columnDatabaseType As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Version"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDVersionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDVersion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MajorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMajor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MinorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMinor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DatabaseNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDatabaseName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DatabaseTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDatabaseType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VersionRow
            Get
                Return CType(Me.Rows(index),VersionRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event VersionRowChanging As VersionRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event VersionRowChanged As VersionRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event VersionRowDeleting As VersionRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event VersionRowDeleted As VersionRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddVersionRow(ByVal row As VersionRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddVersionRow(ByVal IDVersion As Long, ByVal Major As Long, ByVal Minor As Long, ByVal DatabaseName As String, ByVal DatabaseType As String) As VersionRow
            Dim rowVersionRow As VersionRow = CType(Me.NewRow,VersionRow)
            Dim columnValuesArray() As Object = New Object() {IDVersion, Major, Minor, DatabaseName, DatabaseType}
            rowVersionRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVersionRow)
            Return rowVersionRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByIDVersion(ByVal IDVersion As Long) As VersionRow
            Return CType(Me.Rows.Find(New Object() {IDVersion}),VersionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VersionDataTable = CType(MyBase.Clone,VersionDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VersionDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnIDVersion = MyBase.Columns("IDVersion")
            Me.columnMajor = MyBase.Columns("Major")
            Me.columnMinor = MyBase.Columns("Minor")
            Me.columnDatabaseName = MyBase.Columns("DatabaseName")
            Me.columnDatabaseType = MyBase.Columns("DatabaseType")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnIDVersion = New Global.System.Data.DataColumn("IDVersion", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDVersion)
            Me.columnMajor = New Global.System.Data.DataColumn("Major", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMajor)
            Me.columnMinor = New Global.System.Data.DataColumn("Minor", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMinor)
            Me.columnDatabaseName = New Global.System.Data.DataColumn("DatabaseName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDatabaseName)
            Me.columnDatabaseType = New Global.System.Data.DataColumn("DatabaseType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDatabaseType)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIDVersion}, true))
            Me.columnIDVersion.AllowDBNull = false
            Me.columnIDVersion.Unique = true
            Me.columnDatabaseName.MaxLength = 50
            Me.columnDatabaseType.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewVersionRow() As VersionRow
            Return CType(Me.NewRow,VersionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VersionRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VersionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VersionRowChangedEvent) Is Nothing) Then
                RaiseEvent VersionRowChanged(Me, New VersionRowChangeEvent(CType(e.Row,VersionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VersionRowChangingEvent) Is Nothing) Then
                RaiseEvent VersionRowChanging(Me, New VersionRowChangeEvent(CType(e.Row,VersionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VersionRowDeletedEvent) Is Nothing) Then
                RaiseEvent VersionRowDeleted(Me, New VersionRowChangeEvent(CType(e.Row,VersionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VersionRowDeletingEvent) Is Nothing) Then
                RaiseEvent VersionRowDeleting(Me, New VersionRowChangeEvent(CType(e.Row,VersionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveVersionRow(ByVal row As VersionRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As swsuiDataSet = New swsuiDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VersionDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class UICulturesRow
        Inherits Global.System.Data.DataRow
        
        Private tableUICultures As UICulturesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableUICultures = CType(Me.Table,UICulturesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IDCulture() As Long
            Get
                Return CType(Me(Me.tableUICultures.IDCultureColumn),Long)
            End Get
            Set
                Me(Me.tableUICultures.IDCultureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CultureName() As String
            Get
                Try 
                    Return CType(Me(Me.tableUICultures.CultureNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CultureName' in table 'UICultures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUICultures.CultureNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CultureIdentifier() As String
            Get
                Try 
                    Return CType(Me(Me.tableUICultures.CultureIdentifierColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CultureIdentifier' in table 'UICultures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUICultures.CultureIdentifierColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CultureIdentifierDec() As Short
            Get
                Try 
                    Return CType(Me(Me.tableUICultures.CultureIdentifierDecColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CultureIdentifierDec' in table 'UICultures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUICultures.CultureIdentifierDecColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LanguageCountryRegion() As String
            Get
                Try 
                    Return CType(Me(Me.tableUICultures.LanguageCountryRegionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LanguageCountryRegion' in table 'UICultures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUICultures.LanguageCountryRegionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Enabled() As Boolean
            Get
                Return CType(Me(Me.tableUICultures.EnabledColumn),Boolean)
            End Get
            Set
                Me(Me.tableUICultures.EnabledColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NeutralCulture() As Boolean
            Get
                Return CType(Me(Me.tableUICultures.NeutralCultureColumn),Boolean)
            End Get
            Set
                Me(Me.tableUICultures.NeutralCultureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GUID() As String
            Get
                Try 
                    Return CType(Me(Me.tableUICultures.GUIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GUID' in table 'UICultures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUICultures.GUIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LastChange() As Date
            Get
                Try 
                    Return CType(Me(Me.tableUICultures.LastChangeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastChange' in table 'UICultures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUICultures.LastChangeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCultureNameNull() As Boolean
            Return Me.IsNull(Me.tableUICultures.CultureNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCultureNameNull()
            Me(Me.tableUICultures.CultureNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCultureIdentifierNull() As Boolean
            Return Me.IsNull(Me.tableUICultures.CultureIdentifierColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCultureIdentifierNull()
            Me(Me.tableUICultures.CultureIdentifierColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCultureIdentifierDecNull() As Boolean
            Return Me.IsNull(Me.tableUICultures.CultureIdentifierDecColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCultureIdentifierDecNull()
            Me(Me.tableUICultures.CultureIdentifierDecColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsLanguageCountryRegionNull() As Boolean
            Return Me.IsNull(Me.tableUICultures.LanguageCountryRegionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetLanguageCountryRegionNull()
            Me(Me.tableUICultures.LanguageCountryRegionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsGUIDNull() As Boolean
            Return Me.IsNull(Me.tableUICultures.GUIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetGUIDNull()
            Me(Me.tableUICultures.GUIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsLastChangeNull() As Boolean
            Return Me.IsNull(Me.tableUICultures.LastChangeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetLastChangeNull()
            Me(Me.tableUICultures.LastChangeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class UIGroupsRow
        Inherits Global.System.Data.DataRow
        
        Private tableUIGroups As UIGroupsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableUIGroups = CType(Me.Table,UIGroupsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IdUIGroup() As Long
            Get
                Return CType(Me(Me.tableUIGroups.IdUIGroupColumn),Long)
            End Get
            Set
                Me(Me.tableUIGroups.IdUIGroupColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UIGroup() As String
            Get
                Try 
                    Return CType(Me(Me.tableUIGroups.UIGroupColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UIGroup' in table 'UIGroups' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUIGroups.UIGroupColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GUID() As String
            Get
                Try 
                    Return CType(Me(Me.tableUIGroups.GUIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GUID' in table 'UIGroups' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUIGroups.GUIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LastChange() As Date
            Get
                Try 
                    Return CType(Me(Me.tableUIGroups.LastChangeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastChange' in table 'UIGroups' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUIGroups.LastChangeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsUIGroupNull() As Boolean
            Return Me.IsNull(Me.tableUIGroups.UIGroupColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetUIGroupNull()
            Me(Me.tableUIGroups.UIGroupColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsGUIDNull() As Boolean
            Return Me.IsNull(Me.tableUIGroups.GUIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetGUIDNull()
            Me(Me.tableUIGroups.GUIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsLastChangeNull() As Boolean
            Return Me.IsNull(Me.tableUIGroups.LastChangeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetLastChangeNull()
            Me(Me.tableUIGroups.LastChangeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetUIItemsRows() As UIItemsRow()
            If (Me.Table.ChildRelations("FK_UIItems_0") Is Nothing) Then
                Return New UIItemsRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_UIItems_0")),UIItemsRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class UIItemsRow
        Inherits Global.System.Data.DataRow
        
        Private tableUIItems As UIItemsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableUIItems = CType(Me.Table,UIItemsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IdUIItem() As Long
            Get
                Return CType(Me(Me.tableUIItems.IdUIItemColumn),Long)
            End Get
            Set
                Me(Me.tableUIItems.IdUIItemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IDUIGroup() As Long
            Get
                Try 
                    Return CType(Me(Me.tableUIItems.IDUIGroupColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IDUIGroup' in table 'UIItems' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUIItems.IDUIGroupColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UIItem() As String
            Get
                Try 
                    Return CType(Me(Me.tableUIItems.UIItemColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UIItem' in table 'UIItems' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUIItems.UIItemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GUID() As String
            Get
                Try 
                    Return CType(Me(Me.tableUIItems.GUIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GUID' in table 'UIItems' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUIItems.GUIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LastChange() As Date
            Get
                Try 
                    Return CType(Me(Me.tableUIItems.LastChangeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastChange' in table 'UIItems' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUIItems.LastChangeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UIGroupsRow() As UIGroupsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_UIItems_0")),UIGroupsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_UIItems_0"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIDUIGroupNull() As Boolean
            Return Me.IsNull(Me.tableUIItems.IDUIGroupColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIDUIGroupNull()
            Me(Me.tableUIItems.IDUIGroupColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsUIItemNull() As Boolean
            Return Me.IsNull(Me.tableUIItems.UIItemColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetUIItemNull()
            Me(Me.tableUIItems.UIItemColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsGUIDNull() As Boolean
            Return Me.IsNull(Me.tableUIItems.GUIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetGUIDNull()
            Me(Me.tableUIItems.GUIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsLastChangeNull() As Boolean
            Return Me.IsNull(Me.tableUIItems.LastChangeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetLastChangeNull()
            Me(Me.tableUIItems.LastChangeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetUIPicturesRows() As UIPicturesRow()
            If (Me.Table.ChildRelations("FK_UIPictures_0") Is Nothing) Then
                Return New UIPicturesRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_UIPictures_0")),UIPicturesRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetUITranslationsRows() As UITranslationsRow()
            If (Me.Table.ChildRelations("FK_UITranslations_0") Is Nothing) Then
                Return New UITranslationsRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_UITranslations_0")),UITranslationsRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class UIPicturesRow
        Inherits Global.System.Data.DataRow
        
        Private tableUIPictures As UIPicturesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableUIPictures = CType(Me.Table,UIPicturesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IdUIPictures() As Long
            Get
                Return CType(Me(Me.tableUIPictures.IdUIPicturesColumn),Long)
            End Get
            Set
                Me(Me.tableUIPictures.IdUIPicturesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IDUIItem() As Long
            Get
                Try 
                    Return CType(Me(Me.tableUIPictures.IDUIItemColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IDUIItem' in table 'UIPictures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUIPictures.IDUIItemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UIItem() As String
            Get
                Try 
                    Return CType(Me(Me.tableUIPictures.UIItemColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UIItem' in table 'UIPictures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUIPictures.UIItemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IDSignLanguage() As Long
            Get
                Try 
                    Return CType(Me(Me.tableUIPictures.IDSignLanguageColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IDSignLanguage' in table 'UIPictures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUIPictures.IDSignLanguageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UIPicture() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableUIPictures.UIPictureColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UIPicture' in table 'UIPictures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUIPictures.UIPictureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GUID() As String
            Get
                Try 
                    Return CType(Me(Me.tableUIPictures.GUIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GUID' in table 'UIPictures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUIPictures.GUIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LastChange() As Date
            Get
                Try 
                    Return CType(Me(Me.tableUIPictures.LastChangeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastChange' in table 'UIPictures' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUIPictures.LastChangeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UIItemsRow() As UIItemsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_UIPictures_0")),UIItemsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_UIPictures_0"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UISignLanguagesRow() As UISignLanguagesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_UIPictures_1")),UISignLanguagesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_UIPictures_1"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIDUIItemNull() As Boolean
            Return Me.IsNull(Me.tableUIPictures.IDUIItemColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIDUIItemNull()
            Me(Me.tableUIPictures.IDUIItemColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsUIItemNull() As Boolean
            Return Me.IsNull(Me.tableUIPictures.UIItemColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetUIItemNull()
            Me(Me.tableUIPictures.UIItemColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIDSignLanguageNull() As Boolean
            Return Me.IsNull(Me.tableUIPictures.IDSignLanguageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIDSignLanguageNull()
            Me(Me.tableUIPictures.IDSignLanguageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsUIPictureNull() As Boolean
            Return Me.IsNull(Me.tableUIPictures.UIPictureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetUIPictureNull()
            Me(Me.tableUIPictures.UIPictureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsGUIDNull() As Boolean
            Return Me.IsNull(Me.tableUIPictures.GUIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetGUIDNull()
            Me(Me.tableUIPictures.GUIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsLastChangeNull() As Boolean
            Return Me.IsNull(Me.tableUIPictures.LastChangeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetLastChangeNull()
            Me(Me.tableUIPictures.LastChangeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class UISignLanguagesRow
        Inherits Global.System.Data.DataRow
        
        Private tableUISignLanguages As UISignLanguagesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableUISignLanguages = CType(Me.Table,UISignLanguagesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IDSignLanguage() As Long
            Get
                Return CType(Me(Me.tableUISignLanguages.IDSignLanguageColumn),Long)
            End Get
            Set
                Me(Me.tableUISignLanguages.IDSignLanguageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SignLanguage() As String
            Get
                Try 
                    Return CType(Me(Me.tableUISignLanguages.SignLanguageColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SignLanguage' in table 'UISignLanguages' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUISignLanguages.SignLanguageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CommonName() As String
            Get
                Try 
                    Return CType(Me(Me.tableUISignLanguages.CommonNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CommonName' in table 'UISignLanguages' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUISignLanguages.CommonNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Country() As String
            Get
                Try 
                    Return CType(Me(Me.tableUISignLanguages.CountryColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Country' in table 'UISignLanguages' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUISignLanguages.CountryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ISO6393() As String
            Get
                Try 
                    Return CType(Me(Me.tableUISignLanguages.ISO6393Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ISO6393' in table 'UISignLanguages' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUISignLanguages.ISO6393Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Acronym() As String
            Get
                Try 
                    Return CType(Me(Me.tableUISignLanguages.AcronymColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Acronym' in table 'UISignLanguages' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUISignLanguages.AcronymColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Enabled() As Boolean
            Get
                Return CType(Me(Me.tableUISignLanguages.EnabledColumn),Boolean)
            End Get
            Set
                Me(Me.tableUISignLanguages.EnabledColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GUID() As String
            Get
                Try 
                    Return CType(Me(Me.tableUISignLanguages.GUIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GUID' in table 'UISignLanguages' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUISignLanguages.GUIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LastChange() As Date
            Get
                Try 
                    Return CType(Me(Me.tableUISignLanguages.LastChangeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastChange' in table 'UISignLanguages' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUISignLanguages.LastChangeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSignLanguageNull() As Boolean
            Return Me.IsNull(Me.tableUISignLanguages.SignLanguageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSignLanguageNull()
            Me(Me.tableUISignLanguages.SignLanguageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCommonNameNull() As Boolean
            Return Me.IsNull(Me.tableUISignLanguages.CommonNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCommonNameNull()
            Me(Me.tableUISignLanguages.CommonNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCountryNull() As Boolean
            Return Me.IsNull(Me.tableUISignLanguages.CountryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCountryNull()
            Me(Me.tableUISignLanguages.CountryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsISO6393Null() As Boolean
            Return Me.IsNull(Me.tableUISignLanguages.ISO6393Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetISO6393Null()
            Me(Me.tableUISignLanguages.ISO6393Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAcronymNull() As Boolean
            Return Me.IsNull(Me.tableUISignLanguages.AcronymColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAcronymNull()
            Me(Me.tableUISignLanguages.AcronymColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsGUIDNull() As Boolean
            Return Me.IsNull(Me.tableUISignLanguages.GUIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetGUIDNull()
            Me(Me.tableUISignLanguages.GUIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsLastChangeNull() As Boolean
            Return Me.IsNull(Me.tableUISignLanguages.LastChangeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetLastChangeNull()
            Me(Me.tableUISignLanguages.LastChangeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetUIPicturesRows() As UIPicturesRow()
            If (Me.Table.ChildRelations("FK_UIPictures_1") Is Nothing) Then
                Return New UIPicturesRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_UIPictures_1")),UIPicturesRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class UITranslationsRow
        Inherits Global.System.Data.DataRow
        
        Private tableUITranslations As UITranslationsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableUITranslations = CType(Me.Table,UITranslationsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IdUITranslation() As Long
            Get
                Return CType(Me(Me.tableUITranslations.IdUITranslationColumn),Long)
            End Get
            Set
                Me(Me.tableUITranslations.IdUITranslationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IDUIItem() As Long
            Get
                Try 
                    Return CType(Me(Me.tableUITranslations.IDUIItemColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IDUIItem' in table 'UITranslations' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUITranslations.IDUIItemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IDCulture() As Long
            Get
                Try 
                    Return CType(Me(Me.tableUITranslations.IDCultureColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IDCulture' in table 'UITranslations' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUITranslations.IDCultureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UIContext() As String
            Get
                Try 
                    Return CType(Me(Me.tableUITranslations.UIContextColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UIContext' in table 'UITranslations' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUITranslations.UIContextColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UITranslation() As String
            Get
                Try 
                    Return CType(Me(Me.tableUITranslations.UITranslationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UITranslation' in table 'UITranslations' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUITranslations.UITranslationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GUID() As String
            Get
                Try 
                    Return CType(Me(Me.tableUITranslations.GUIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GUID' in table 'UITranslations' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUITranslations.GUIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LastChange() As Date
            Get
                Try 
                    Return CType(Me(Me.tableUITranslations.LastChangeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastChange' in table 'UITranslations' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUITranslations.LastChangeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UIItemsRow() As UIItemsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_UITranslations_0")),UIItemsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_UITranslations_0"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIDUIItemNull() As Boolean
            Return Me.IsNull(Me.tableUITranslations.IDUIItemColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIDUIItemNull()
            Me(Me.tableUITranslations.IDUIItemColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIDCultureNull() As Boolean
            Return Me.IsNull(Me.tableUITranslations.IDCultureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIDCultureNull()
            Me(Me.tableUITranslations.IDCultureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsUIContextNull() As Boolean
            Return Me.IsNull(Me.tableUITranslations.UIContextColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetUIContextNull()
            Me(Me.tableUITranslations.UIContextColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsUITranslationNull() As Boolean
            Return Me.IsNull(Me.tableUITranslations.UITranslationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetUITranslationNull()
            Me(Me.tableUITranslations.UITranslationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsGUIDNull() As Boolean
            Return Me.IsNull(Me.tableUITranslations.GUIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetGUIDNull()
            Me(Me.tableUITranslations.GUIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsLastChangeNull() As Boolean
            Return Me.IsNull(Me.tableUITranslations.LastChangeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetLastChangeNull()
            Me(Me.tableUITranslations.LastChangeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class VersionRow
        Inherits Global.System.Data.DataRow
        
        Private tableVersion As VersionDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVersion = CType(Me.Table,VersionDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IDVersion() As Long
            Get
                Return CType(Me(Me.tableVersion.IDVersionColumn),Long)
            End Get
            Set
                Me(Me.tableVersion.IDVersionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Major() As Long
            Get
                Try 
                    Return CType(Me(Me.tableVersion.MajorColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Major' in table 'Version' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVersion.MajorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Minor() As Long
            Get
                Try 
                    Return CType(Me(Me.tableVersion.MinorColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Minor' in table 'Version' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVersion.MinorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DatabaseName() As String
            Get
                Try 
                    Return CType(Me(Me.tableVersion.DatabaseNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DatabaseName' in table 'Version' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVersion.DatabaseNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DatabaseType() As String
            Get
                Try 
                    Return CType(Me(Me.tableVersion.DatabaseTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DatabaseType' in table 'Version' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVersion.DatabaseTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMajorNull() As Boolean
            Return Me.IsNull(Me.tableVersion.MajorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMajorNull()
            Me(Me.tableVersion.MajorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMinorNull() As Boolean
            Return Me.IsNull(Me.tableVersion.MinorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMinorNull()
            Me(Me.tableVersion.MinorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDatabaseNameNull() As Boolean
            Return Me.IsNull(Me.tableVersion.DatabaseNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDatabaseNameNull()
            Me(Me.tableVersion.DatabaseNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDatabaseTypeNull() As Boolean
            Return Me.IsNull(Me.tableVersion.DatabaseTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDatabaseTypeNull()
            Me(Me.tableVersion.DatabaseTypeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class UICulturesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As UICulturesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As UICulturesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As UICulturesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class UIGroupsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As UIGroupsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As UIGroupsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As UIGroupsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class UIItemsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As UIItemsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As UIItemsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As UIItemsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class UIPicturesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As UIPicturesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As UIPicturesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As UIPicturesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class UISignLanguagesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As UISignLanguagesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As UISignLanguagesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As UISignLanguagesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class UITranslationsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As UITranslationsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As UITranslationsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As UITranslationsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class VersionRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VersionRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As VersionRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As VersionRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace swsuiDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class UICulturesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "UICultures"
            tableMapping.ColumnMappings.Add("IDCulture", "IDCulture")
            tableMapping.ColumnMappings.Add("CultureName", "CultureName")
            tableMapping.ColumnMappings.Add("CultureIdentifier", "CultureIdentifier")
            tableMapping.ColumnMappings.Add("CultureIdentifierDec", "CultureIdentifierDec")
            tableMapping.ColumnMappings.Add("LanguageCountryRegion", "LanguageCountryRegion")
            tableMapping.ColumnMappings.Add("Enabled", "Enabled")
            tableMapping.ColumnMappings.Add("NeutralCulture", "NeutralCulture")
            tableMapping.ColumnMappings.Add("GUID", "GUID")
            tableMapping.ColumnMappings.Add("LastChange", "LastChange")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [UICultures] WHERE (([IDCulture] = @Original_IDCulture) AND ((@IsNull"& _ 
                "_CultureName = 1 AND [CultureName] IS NULL) OR ([CultureName] = @Original_Cultur"& _ 
                "eName)) AND ((@IsNull_CultureIdentifier = 1 AND [CultureIdentifier] IS NULL) OR "& _ 
                "([CultureIdentifier] = @Original_CultureIdentifier)) AND ((@IsNull_CultureIdenti"& _ 
                "fierDec = 1 AND [CultureIdentifierDec] IS NULL) OR ([CultureIdentifierDec] = @Or"& _ 
                "iginal_CultureIdentifierDec)) AND ((@IsNull_LanguageCountryRegion = 1 AND [Langu"& _ 
                "ageCountryRegion] IS NULL) OR ([LanguageCountryRegion] = @Original_LanguageCount"& _ 
                "ryRegion)) AND ([Enabled] = @Original_Enabled) AND ([NeutralCulture] = @Original"& _ 
                "_NeutralCulture) AND ((@IsNull_GUID = 1 AND [GUID] IS NULL) OR ([GUID] = @Origin"& _ 
                "al_GUID)) AND ((@IsNull_LastChange = 1 AND [LastChange] IS NULL) OR ([LastChange"& _ 
                "] = @Original_LastChange)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDCulture"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "IDCulture"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_CultureName"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "CultureName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_CultureName"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "CultureName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_CultureIdentifier"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "CultureIdentifier"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_CultureIdentifier"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "CultureIdentifier"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_CultureIdentifierDec"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "CultureIdentifierDec"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_CultureIdentifierDec"
            param.DbType = Global.System.Data.DbType.Int16
            param.DbType = Global.System.Data.DbType.Int16
            param.SourceColumn = "CultureIdentifierDec"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_LanguageCountryRegion"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "LanguageCountryRegion"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_LanguageCountryRegion"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "LanguageCountryRegion"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_Enabled"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "Enabled"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_NeutralCulture"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "NeutralCulture"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_GUID"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "GUID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_GUID"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "GUID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_LastChange"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "LastChange"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_LastChange"
            param.DbType = Global.System.Data.DbType.DateTime
            param.DbType = Global.System.Data.DbType.DateTime
            param.SourceColumn = "LastChange"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [UICultures] ([IDCulture], [CultureName], [CultureIdentifier], [Cultu"& _ 
                "reIdentifierDec], [LanguageCountryRegion], [Enabled], [NeutralCulture], [GUID], "& _ 
                "[LastChange]) VALUES (@IDCulture, @CultureName, @CultureIdentifier, @CultureIden"& _ 
                "tifierDec, @LanguageCountryRegion, @Enabled, @NeutralCulture, @GUID, @LastChange"& _ 
                ")"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDCulture"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "IDCulture"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@CultureName"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "CultureName"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@CultureIdentifier"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "CultureIdentifier"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@CultureIdentifierDec"
            param.DbType = Global.System.Data.DbType.Int16
            param.DbType = Global.System.Data.DbType.Int16
            param.SourceColumn = "CultureIdentifierDec"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@LanguageCountryRegion"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "LanguageCountryRegion"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Enabled"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "Enabled"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@NeutralCulture"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "NeutralCulture"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@GUID"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "GUID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@LastChange"
            param.DbType = Global.System.Data.DbType.DateTime
            param.DbType = Global.System.Data.DbType.DateTime
            param.SourceColumn = "LastChange"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [UICultures] SET [IDCulture] = @IDCulture, [CultureName] = @CultureName, ["& _ 
                "CultureIdentifier] = @CultureIdentifier, [CultureIdentifierDec] = @CultureIdenti"& _ 
                "fierDec, [LanguageCountryRegion] = @LanguageCountryRegion, [Enabled] = @Enabled,"& _ 
                " [NeutralCulture] = @NeutralCulture, [GUID] = @GUID, [LastChange] = @LastChange "& _ 
                "WHERE (([IDCulture] = @Original_IDCulture) AND ((@IsNull_CultureName = 1 AND [Cu"& _ 
                "ltureName] IS NULL) OR ([CultureName] = @Original_CultureName)) AND ((@IsNull_Cu"& _ 
                "ltureIdentifier = 1 AND [CultureIdentifier] IS NULL) OR ([CultureIdentifier] = @"& _ 
                "Original_CultureIdentifier)) AND ((@IsNull_CultureIdentifierDec = 1 AND [Culture"& _ 
                "IdentifierDec] IS NULL) OR ([CultureIdentifierDec] = @Original_CultureIdentifier"& _ 
                "Dec)) AND ((@IsNull_LanguageCountryRegion = 1 AND [LanguageCountryRegion] IS NUL"& _ 
                "L) OR ([LanguageCountryRegion] = @Original_LanguageCountryRegion)) AND ([Enabled"& _ 
                "] = @Original_Enabled) AND ([NeutralCulture] = @Original_NeutralCulture) AND ((@"& _ 
                "IsNull_GUID = 1 AND [GUID] IS NULL) OR ([GUID] = @Original_GUID)) AND ((@IsNull_"& _ 
                "LastChange = 1 AND [LastChange] IS NULL) OR ([LastChange] = @Original_LastChange"& _ 
                ")))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDCulture"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "IDCulture"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@CultureName"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "CultureName"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@CultureIdentifier"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "CultureIdentifier"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@CultureIdentifierDec"
            param.DbType = Global.System.Data.DbType.Int16
            param.DbType = Global.System.Data.DbType.Int16
            param.SourceColumn = "CultureIdentifierDec"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@LanguageCountryRegion"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "LanguageCountryRegion"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Enabled"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "Enabled"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@NeutralCulture"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "NeutralCulture"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@GUID"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "GUID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@LastChange"
            param.DbType = Global.System.Data.DbType.DateTime
            param.DbType = Global.System.Data.DbType.DateTime
            param.SourceColumn = "LastChange"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDCulture"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "IDCulture"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_CultureName"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "CultureName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_CultureName"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "CultureName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_CultureIdentifier"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "CultureIdentifier"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_CultureIdentifier"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "CultureIdentifier"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_CultureIdentifierDec"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "CultureIdentifierDec"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_CultureIdentifierDec"
            param.DbType = Global.System.Data.DbType.Int16
            param.DbType = Global.System.Data.DbType.Int16
            param.SourceColumn = "CultureIdentifierDec"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_LanguageCountryRegion"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "LanguageCountryRegion"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_LanguageCountryRegion"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "LanguageCountryRegion"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_Enabled"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "Enabled"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_NeutralCulture"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "NeutralCulture"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_GUID"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "GUID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_GUID"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "GUID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_LastChange"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "LastChange"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_LastChange"
            param.DbType = Global.System.Data.DbType.DateTime
            param.DbType = Global.System.Data.DbType.DateTime
            param.SourceColumn = "LastChange"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.SignWriterStudio.UI.My.MySettings.Default.swsuiConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(6) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [IDCulture], [CultureName], [CultureIdentifier], [CultureIdentifierDec], ["& _ 
                "LanguageCountryRegion], [Enabled], [NeutralCulture], [GUID], [LastChange] FROM ["& _ 
                "UICultures]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT          CultureName"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM               UICultures"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE           (Cult"& _ 
                "ureName = @Name)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Name"
            param.DbType = Global.System.Data.DbType.[String]
            param.Size = 255
            param.SourceColumn = "CultureName"
            Me._commandCollection(1).Parameters.Add(param)
            Me._commandCollection(2) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT [IDCulture], [CultureName], [CultureIdentifier], [CultureIdentifierDec], ["& _ 
                "LanguageCountryRegion], [Enabled], [NeutralCulture], [GUID], [LastChange] FROM ["& _ 
                "UICultures]"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT        IDCulture, CultureName, CultureIdentifier, CultureIdentifierDec, La"& _ 
                "nguageCountryRegion, Enabled, NeutralCulture, GUID, LastChange"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            "& _ 
                "UICultures"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (IDCulture = @Lang1) OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         (IDCu"& _ 
                "lture = @Lang2)"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Lang1"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.Size = 8
            param.SourceColumn = "IDCulture"
            Me._commandCollection(3).Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Lang2"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.Size = 8
            param.SourceColumn = "IDCulture"
            Me._commandCollection(3).Parameters.Add(param)
            Me._commandCollection(4) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT          LanguageCountryRegion"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM               UICultures"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE      "& _ 
                "     (IDCulture = @ID)"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.Size = 8
            param.SourceColumn = "IDCulture"
            Me._commandCollection(4).Parameters.Add(param)
            Me._commandCollection(5) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(5).Connection = Me.Connection
            Me._commandCollection(5).CommandText = "SELECT          IDCulture"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM               UICultures"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE           (Cultur"& _ 
                "eName = @Name)"
            Me._commandCollection(5).CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Name"
            param.DbType = Global.System.Data.DbType.[String]
            param.Size = 255
            param.SourceColumn = "CultureName"
            Me._commandCollection(5).Parameters.Add(param)
            Me._commandCollection(6) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(6).Connection = Me.Connection
            Me._commandCollection(6).CommandText = "SELECT          CultureName"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM               UICultures"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE           (IDCu"& _ 
                "lture = @ID)"
            Me._commandCollection(6).CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.Size = 8
            param.SourceColumn = "IDCulture"
            Me._commandCollection(6).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As swsuiDataSet.UICulturesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As swsuiDataSet.UICulturesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As swsuiDataSet.UICulturesDataTable = New swsuiDataSet.UICulturesDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillCulture(ByVal dataTable As swsuiDataSet.UICulturesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataCulture() As swsuiDataSet.UICulturesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Dim dataTable As swsuiDataSet.UICulturesDataTable = New swsuiDataSet.UICulturesDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillCulturesByIDs(ByVal dataTable As swsuiDataSet.UICulturesDataTable, ByVal Lang1 As Long, ByVal Lang2 As Long) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Lang1,Long)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(Lang2,Long)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataCulturesByIDs(ByVal Lang1 As Long, ByVal Lang2 As Long) As swsuiDataSet.UICulturesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Lang1,Long)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(Lang2,Long)
            Dim dataTable As swsuiDataSet.UICulturesDataTable = New swsuiDataSet.UICulturesDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As swsuiDataSet.UICulturesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As swsuiDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "UICultures")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_IDCulture As Long, ByVal Original_CultureName As String, ByVal Original_CultureIdentifier As String, ByVal Original_CultureIdentifierDec As Global.System.Nullable(Of Short), ByVal Original_LanguageCountryRegion As String, ByVal Original_Enabled As Boolean, ByVal Original_NeutralCulture As Boolean, ByVal Original_GUID As String, ByVal Original_LastChange As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IDCulture,Long)
            If (Original_CultureName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_CultureName,String)
            End If
            If (Original_CultureIdentifier Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_CultureIdentifier,String)
            End If
            If (Original_CultureIdentifierDec.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_CultureIdentifierDec.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_LanguageCountryRegion Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_LanguageCountryRegion,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_Enabled,Boolean)
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_NeutralCulture,Boolean)
            If (Original_GUID Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_GUID,String)
            End If
            If (Original_LastChange.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_LastChange.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal IDCulture As Long, ByVal CultureName As String, ByVal CultureIdentifier As String, ByVal CultureIdentifierDec As Global.System.Nullable(Of Short), ByVal LanguageCountryRegion As String, ByVal Enabled As Boolean, ByVal NeutralCulture As Boolean, ByVal GUID As String, ByVal LastChange As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(IDCulture,Long)
            If (CultureName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CultureName,String)
            End If
            If (CultureIdentifier Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(CultureIdentifier,String)
            End If
            If (CultureIdentifierDec.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(CultureIdentifierDec.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (LanguageCountryRegion Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(LanguageCountryRegion,String)
            End If
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(Enabled,Boolean)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(NeutralCulture,Boolean)
            If (GUID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(GUID,String)
            End If
            If (LastChange.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(LastChange.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal IDCulture As Long,  _
                    ByVal CultureName As String,  _
                    ByVal CultureIdentifier As String,  _
                    ByVal CultureIdentifierDec As Global.System.Nullable(Of Short),  _
                    ByVal LanguageCountryRegion As String,  _
                    ByVal Enabled As Boolean,  _
                    ByVal NeutralCulture As Boolean,  _
                    ByVal GUID As String,  _
                    ByVal LastChange As Global.System.Nullable(Of Date),  _
                    ByVal Original_IDCulture As Long,  _
                    ByVal Original_CultureName As String,  _
                    ByVal Original_CultureIdentifier As String,  _
                    ByVal Original_CultureIdentifierDec As Global.System.Nullable(Of Short),  _
                    ByVal Original_LanguageCountryRegion As String,  _
                    ByVal Original_Enabled As Boolean,  _
                    ByVal Original_NeutralCulture As Boolean,  _
                    ByVal Original_GUID As String,  _
                    ByVal Original_LastChange As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(IDCulture,Long)
            If (CultureName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CultureName,String)
            End If
            If (CultureIdentifier Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(CultureIdentifier,String)
            End If
            If (CultureIdentifierDec.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(CultureIdentifierDec.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (LanguageCountryRegion Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(LanguageCountryRegion,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Enabled,Boolean)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(NeutralCulture,Boolean)
            If (GUID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(GUID,String)
            End If
            If (LastChange.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(LastChange.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_IDCulture,Long)
            If (Original_CultureName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_CultureName,String)
            End If
            If (Original_CultureIdentifier Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_CultureIdentifier,String)
            End If
            If (Original_CultureIdentifierDec.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_CultureIdentifierDec.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Original_LanguageCountryRegion Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_LanguageCountryRegion,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_Enabled,Boolean)
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_NeutralCulture,Boolean)
            If (Original_GUID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_GUID,String)
            End If
            If (Original_LastChange.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_LastChange.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal CultureName As String,  _
                    ByVal CultureIdentifier As String,  _
                    ByVal CultureIdentifierDec As Global.System.Nullable(Of Short),  _
                    ByVal LanguageCountryRegion As String,  _
                    ByVal Enabled As Boolean,  _
                    ByVal NeutralCulture As Boolean,  _
                    ByVal GUID As String,  _
                    ByVal LastChange As Global.System.Nullable(Of Date),  _
                    ByVal Original_IDCulture As Long,  _
                    ByVal Original_CultureName As String,  _
                    ByVal Original_CultureIdentifier As String,  _
                    ByVal Original_CultureIdentifierDec As Global.System.Nullable(Of Short),  _
                    ByVal Original_LanguageCountryRegion As String,  _
                    ByVal Original_Enabled As Boolean,  _
                    ByVal Original_NeutralCulture As Boolean,  _
                    ByVal Original_GUID As String,  _
                    ByVal Original_LastChange As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(Original_IDCulture, CultureName, CultureIdentifier, CultureIdentifierDec, LanguageCountryRegion, Enabled, NeutralCulture, GUID, LastChange, Original_IDCulture, Original_CultureName, Original_CultureIdentifier, Original_CultureIdentifierDec, Original_LanguageCountryRegion, Original_Enabled, Original_NeutralCulture, Original_GUID, Original_LastChange)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function CheckExistsCulturebyName(ByVal Name As String) As Object
            Dim command As Global.System.Data.SQLite.SQLiteCommand = Me.CommandCollection(1)
            If (Name Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(Name,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,Object)
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetFullNamebyID(ByVal ID As Long) As Object
            Dim command As Global.System.Data.SQLite.SQLiteCommand = Me.CommandCollection(4)
            command.Parameters(0).Value = CType(ID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,Object)
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetIDbyName(ByVal Name As String) As Global.System.Nullable(Of Long)
            Dim command As Global.System.Data.SQLite.SQLiteCommand = Me.CommandCollection(5)
            If (Name Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(Name,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Long)()
            Else
                Return New Global.System.Nullable(Of Long)(CType(returnValue,Long))
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetNamebyID(ByVal ID As Long) As String
            Dim command As Global.System.Data.SQLite.SQLiteCommand = Me.CommandCollection(6)
            command.Parameters(0).Value = CType(ID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,String)
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class UIGroupsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "UIGroups"
            tableMapping.ColumnMappings.Add("IdUIGroup", "IdUIGroup")
            tableMapping.ColumnMappings.Add("UIGroup", "UIGroup")
            tableMapping.ColumnMappings.Add("GUID", "GUID")
            tableMapping.ColumnMappings.Add("LastChange", "LastChange")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [UIGroups] WHERE (([IdUIGroup] = @Original_IdUIGroup) AND ((@IsNull_U"& _ 
                "IGroup = 1 AND [UIGroup] IS NULL) OR ([UIGroup] = @Original_UIGroup)) AND ((@IsN"& _ 
                "ull_GUID = 1 AND [GUID] IS NULL) OR ([GUID] = @Original_GUID)) AND ((@IsNull_Las"& _ 
                "tChange = 1 AND [LastChange] IS NULL) OR ([LastChange] = @Original_LastChange)))"& _ 
                ""
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IdUIGroup"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "IdUIGroup"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_UIGroup"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "UIGroup"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_UIGroup"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "UIGroup"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_GUID"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "GUID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_GUID"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "GUID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_LastChange"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "LastChange"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_LastChange"
            param.DbType = Global.System.Data.DbType.DateTime
            param.DbType = Global.System.Data.DbType.DateTime
            param.SourceColumn = "LastChange"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [UIGroups] ([IdUIGroup], [UIGroup], [GUID], [LastChange]) VALUES (@Id"& _ 
                "UIGroup, @UIGroup, @GUID, @LastChange)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IdUIGroup"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "IdUIGroup"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@UIGroup"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "UIGroup"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@GUID"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "GUID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@LastChange"
            param.DbType = Global.System.Data.DbType.DateTime
            param.DbType = Global.System.Data.DbType.DateTime
            param.SourceColumn = "LastChange"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [UIGroups] SET [IdUIGroup] = @IdUIGroup, [UIGroup] = @UIGroup, [GUID] = @G"& _ 
                "UID, [LastChange] = @LastChange WHERE (([IdUIGroup] = @Original_IdUIGroup) AND ("& _ 
                "(@IsNull_UIGroup = 1 AND [UIGroup] IS NULL) OR ([UIGroup] = @Original_UIGroup)) "& _ 
                "AND ((@IsNull_GUID = 1 AND [GUID] IS NULL) OR ([GUID] = @Original_GUID)) AND ((@"& _ 
                "IsNull_LastChange = 1 AND [LastChange] IS NULL) OR ([LastChange] = @Original_Las"& _ 
                "tChange)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IdUIGroup"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "IdUIGroup"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@UIGroup"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "UIGroup"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@GUID"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "GUID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@LastChange"
            param.DbType = Global.System.Data.DbType.DateTime
            param.DbType = Global.System.Data.DbType.DateTime
            param.SourceColumn = "LastChange"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IdUIGroup"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "IdUIGroup"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_UIGroup"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "UIGroup"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_UIGroup"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "UIGroup"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_GUID"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "GUID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_GUID"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "GUID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_LastChange"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "LastChange"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_LastChange"
            param.DbType = Global.System.Data.DbType.DateTime
            param.DbType = Global.System.Data.DbType.DateTime
            param.SourceColumn = "LastChange"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.SignWriterStudio.UI.My.MySettings.Default.swsuiConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [IdUIGroup], [UIGroup], [GUID], [LastChange] FROM [UIGroups]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As swsuiDataSet.UIGroupsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As swsuiDataSet.UIGroupsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As swsuiDataSet.UIGroupsDataTable = New swsuiDataSet.UIGroupsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As swsuiDataSet.UIGroupsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As swsuiDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "UIGroups")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_IdUIGroup As Long, ByVal Original_UIGroup As String, ByVal Original_GUID As String, ByVal Original_LastChange As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IdUIGroup,Long)
            If (Original_UIGroup Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_UIGroup,String)
            End If
            If (Original_GUID Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_GUID,String)
            End If
            If (Original_LastChange.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_LastChange.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal IdUIGroup As Long, ByVal UIGroup As String, ByVal GUID As String, ByVal LastChange As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(IdUIGroup,Long)
            If (UIGroup Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(UIGroup,String)
            End If
            If (GUID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(GUID,String)
            End If
            If (LastChange.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(LastChange.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal IdUIGroup As Long, ByVal UIGroup As String, ByVal GUID As String, ByVal LastChange As Global.System.Nullable(Of Date), ByVal Original_IdUIGroup As Long, ByVal Original_UIGroup As String, ByVal Original_GUID As String, ByVal Original_LastChange As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(IdUIGroup,Long)
            If (UIGroup Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(UIGroup,String)
            End If
            If (GUID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(GUID,String)
            End If
            If (LastChange.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(LastChange.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_IdUIGroup,Long)
            If (Original_UIGroup Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_UIGroup,String)
            End If
            If (Original_GUID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_GUID,String)
            End If
            If (Original_LastChange.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_LastChange.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal UIGroup As String, ByVal GUID As String, ByVal LastChange As Global.System.Nullable(Of Date), ByVal Original_IdUIGroup As Long, ByVal Original_UIGroup As String, ByVal Original_GUID As String, ByVal Original_LastChange As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(Original_IdUIGroup, UIGroup, GUID, LastChange, Original_IdUIGroup, Original_UIGroup, Original_GUID, Original_LastChange)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class UIItemsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "UIItems"
            tableMapping.ColumnMappings.Add("IdUIItem", "IdUIItem")
            tableMapping.ColumnMappings.Add("IDUIGroup", "IDUIGroup")
            tableMapping.ColumnMappings.Add("UIItem", "UIItem")
            tableMapping.ColumnMappings.Add("GUID", "GUID")
            tableMapping.ColumnMappings.Add("LastChange", "LastChange")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [UIItems] WHERE (([IdUIItem] = @Original_IdUIItem) AND ((@IsNull_IDUI"& _ 
                "Group = 1 AND [IDUIGroup] IS NULL) OR ([IDUIGroup] = @Original_IDUIGroup)) AND ("& _ 
                "(@IsNull_UIItem = 1 AND [UIItem] IS NULL) OR ([UIItem] = @Original_UIItem)) AND "& _ 
                "((@IsNull_GUID = 1 AND [GUID] IS NULL) OR ([GUID] = @Original_GUID)) AND ((@IsNu"& _ 
                "ll_LastChange = 1 AND [LastChange] IS NULL) OR ([LastChange] = @Original_LastCha"& _ 
                "nge)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IdUIItem"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "IdUIItem"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_IDUIGroup"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDUIGroup"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDUIGroup"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "IDUIGroup"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_UIItem"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "UIItem"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_UIItem"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "UIItem"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_GUID"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "GUID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_GUID"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "GUID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_LastChange"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "LastChange"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_LastChange"
            param.DbType = Global.System.Data.DbType.DateTime
            param.DbType = Global.System.Data.DbType.DateTime
            param.SourceColumn = "LastChange"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [UIItems] ([IdUIItem], [IDUIGroup], [UIItem], [GUID], [LastChange]) V"& _ 
                "ALUES (@IdUIItem, @IDUIGroup, @UIItem, @GUID, @LastChange)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IdUIItem"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "IdUIItem"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDUIGroup"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "IDUIGroup"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@UIItem"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "UIItem"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@GUID"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "GUID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@LastChange"
            param.DbType = Global.System.Data.DbType.DateTime
            param.DbType = Global.System.Data.DbType.DateTime
            param.SourceColumn = "LastChange"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [UIItems] SET [IdUIItem] = @IdUIItem, [IDUIGroup] = @IDUIGroup, [UIItem] ="& _ 
                " @UIItem, [GUID] = @GUID, [LastChange] = @LastChange WHERE (([IdUIItem] = @Origi"& _ 
                "nal_IdUIItem) AND ((@IsNull_IDUIGroup = 1 AND [IDUIGroup] IS NULL) OR ([IDUIGrou"& _ 
                "p] = @Original_IDUIGroup)) AND ((@IsNull_UIItem = 1 AND [UIItem] IS NULL) OR ([U"& _ 
                "IItem] = @Original_UIItem)) AND ((@IsNull_GUID = 1 AND [GUID] IS NULL) OR ([GUID"& _ 
                "] = @Original_GUID)) AND ((@IsNull_LastChange = 1 AND [LastChange] IS NULL) OR ("& _ 
                "[LastChange] = @Original_LastChange)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IdUIItem"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "IdUIItem"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDUIGroup"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "IDUIGroup"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@UIItem"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "UIItem"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@GUID"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "GUID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@LastChange"
            param.DbType = Global.System.Data.DbType.DateTime
            param.DbType = Global.System.Data.DbType.DateTime
            param.SourceColumn = "LastChange"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IdUIItem"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "IdUIItem"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_IDUIGroup"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDUIGroup"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDUIGroup"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "IDUIGroup"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_UIItem"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "UIItem"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_UIItem"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "UIItem"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_GUID"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "GUID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_GUID"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "GUID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_LastChange"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "LastChange"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_LastChange"
            param.DbType = Global.System.Data.DbType.DateTime
            param.DbType = Global.System.Data.DbType.DateTime
            param.SourceColumn = "LastChange"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.SignWriterStudio.UI.My.MySettings.Default.swsuiConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [IdUIItem], [IDUIGroup], [UIItem], [GUID], [LastChange] FROM [UIItems]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As swsuiDataSet.UIItemsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As swsuiDataSet.UIItemsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As swsuiDataSet.UIItemsDataTable = New swsuiDataSet.UIItemsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As swsuiDataSet.UIItemsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As swsuiDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "UIItems")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_IdUIItem As Long, ByVal Original_IDUIGroup As Global.System.Nullable(Of Long), ByVal Original_UIItem As String, ByVal Original_GUID As String, ByVal Original_LastChange As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IdUIItem,Long)
            If (Original_IDUIGroup.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_IDUIGroup.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_UIItem Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_UIItem,String)
            End If
            If (Original_GUID Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_GUID,String)
            End If
            If (Original_LastChange.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_LastChange.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal IdUIItem As Long, ByVal IDUIGroup As Global.System.Nullable(Of Long), ByVal UIItem As String, ByVal GUID As String, ByVal LastChange As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(IdUIItem,Long)
            If (IDUIGroup.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(IDUIGroup.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (UIItem Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(UIItem,String)
            End If
            If (GUID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(GUID,String)
            End If
            If (LastChange.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(LastChange.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal IdUIItem As Long, ByVal IDUIGroup As Global.System.Nullable(Of Long), ByVal UIItem As String, ByVal GUID As String, ByVal LastChange As Global.System.Nullable(Of Date), ByVal Original_IdUIItem As Long, ByVal Original_IDUIGroup As Global.System.Nullable(Of Long), ByVal Original_UIItem As String, ByVal Original_GUID As String, ByVal Original_LastChange As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(IdUIItem,Long)
            If (IDUIGroup.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(IDUIGroup.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (UIItem Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(UIItem,String)
            End If
            If (GUID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(GUID,String)
            End If
            If (LastChange.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(LastChange.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_IdUIItem,Long)
            If (Original_IDUIGroup.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_IDUIGroup.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Original_UIItem Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_UIItem,String)
            End If
            If (Original_GUID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_GUID,String)
            End If
            If (Original_LastChange.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_LastChange.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal IDUIGroup As Global.System.Nullable(Of Long), ByVal UIItem As String, ByVal GUID As String, ByVal LastChange As Global.System.Nullable(Of Date), ByVal Original_IdUIItem As Long, ByVal Original_IDUIGroup As Global.System.Nullable(Of Long), ByVal Original_UIItem As String, ByVal Original_GUID As String, ByVal Original_LastChange As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(Original_IdUIItem, IDUIGroup, UIItem, GUID, LastChange, Original_IdUIItem, Original_IDUIGroup, Original_UIItem, Original_GUID, Original_LastChange)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class UIPicturesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "UIPictures"
            tableMapping.ColumnMappings.Add("IdUIPictures", "IdUIPictures")
            tableMapping.ColumnMappings.Add("IDUIItem", "IDUIItem")
            tableMapping.ColumnMappings.Add("UIItem", "UIItem")
            tableMapping.ColumnMappings.Add("IDSignLanguage", "IDSignLanguage")
            tableMapping.ColumnMappings.Add("UIPicture", "UIPicture")
            tableMapping.ColumnMappings.Add("GUID", "GUID")
            tableMapping.ColumnMappings.Add("LastChange", "LastChange")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [UIPictures] WHERE (([IdUIPictures] = @Original_IdUIPictures) AND ((@"& _ 
                "IsNull_IDUIItem = 1 AND [IDUIItem] IS NULL) OR ([IDUIItem] = @Original_IDUIItem)"& _ 
                ") AND ((@IsNull_UIItem = 1 AND [UIItem] IS NULL) OR ([UIItem] = @Original_UIItem"& _ 
                ")) AND ((@IsNull_IDSignLanguage = 1 AND [IDSignLanguage] IS NULL) OR ([IDSignLan"& _ 
                "guage] = @Original_IDSignLanguage)) AND ((@IsNull_UIPicture = 1 AND [UIPicture] "& _ 
                "IS NULL) OR ([UIPicture] = @Original_UIPicture)) AND ((@IsNull_GUID = 1 AND [GUI"& _ 
                "D] IS NULL) OR ([GUID] = @Original_GUID)) AND ((@IsNull_LastChange = 1 AND [Last"& _ 
                "Change] IS NULL) OR ([LastChange] = @Original_LastChange)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IdUIPictures"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "IdUIPictures"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_IDUIItem"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDUIItem"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDUIItem"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "IDUIItem"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_UIItem"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "UIItem"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_UIItem"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "UIItem"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_IDSignLanguage"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDSignLanguage"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDSignLanguage"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "IDSignLanguage"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_UIPicture"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "UIPicture"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_UIPicture"
            param.DbType = Global.System.Data.DbType.Binary
            param.DbType = Global.System.Data.DbType.Binary
            param.SourceColumn = "UIPicture"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_GUID"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "GUID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_GUID"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "GUID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_LastChange"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "LastChange"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_LastChange"
            param.DbType = Global.System.Data.DbType.DateTime
            param.DbType = Global.System.Data.DbType.DateTime
            param.SourceColumn = "LastChange"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [UIPictures] ([IdUIPictures], [IDUIItem], [UIItem], [IDSignLanguage],"& _ 
                " [UIPicture], [GUID], [LastChange]) VALUES (@IdUIPictures, @IDUIItem, @UIItem, @"& _ 
                "IDSignLanguage, @UIPicture, @GUID, @LastChange)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IdUIPictures"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "IdUIPictures"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDUIItem"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "IDUIItem"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@UIItem"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "UIItem"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDSignLanguage"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "IDSignLanguage"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@UIPicture"
            param.DbType = Global.System.Data.DbType.Binary
            param.DbType = Global.System.Data.DbType.Binary
            param.SourceColumn = "UIPicture"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@GUID"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "GUID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@LastChange"
            param.DbType = Global.System.Data.DbType.DateTime
            param.DbType = Global.System.Data.DbType.DateTime
            param.SourceColumn = "LastChange"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [UIPictures] SET [IdUIPictures] = @IdUIPictures, [IDUIItem] = @IDUIItem, ["& _ 
                "UIItem] = @UIItem, [IDSignLanguage] = @IDSignLanguage, [UIPicture] = @UIPicture,"& _ 
                " [GUID] = @GUID, [LastChange] = @LastChange WHERE (([IdUIPictures] = @Original_I"& _ 
                "dUIPictures) AND ((@IsNull_IDUIItem = 1 AND [IDUIItem] IS NULL) OR ([IDUIItem] ="& _ 
                " @Original_IDUIItem)) AND ((@IsNull_UIItem = 1 AND [UIItem] IS NULL) OR ([UIItem"& _ 
                "] = @Original_UIItem)) AND ((@IsNull_IDSignLanguage = 1 AND [IDSignLanguage] IS "& _ 
                "NULL) OR ([IDSignLanguage] = @Original_IDSignLanguage)) AND ((@IsNull_UIPicture "& _ 
                "= 1 AND [UIPicture] IS NULL) OR ([UIPicture] = @Original_UIPicture)) AND ((@IsNu"& _ 
                "ll_GUID = 1 AND [GUID] IS NULL) OR ([GUID] = @Original_GUID)) AND ((@IsNull_Last"& _ 
                "Change = 1 AND [LastChange] IS NULL) OR ([LastChange] = @Original_LastChange)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IdUIPictures"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "IdUIPictures"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDUIItem"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "IDUIItem"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@UIItem"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "UIItem"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDSignLanguage"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "IDSignLanguage"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@UIPicture"
            param.DbType = Global.System.Data.DbType.Binary
            param.DbType = Global.System.Data.DbType.Binary
            param.SourceColumn = "UIPicture"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@GUID"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "GUID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@LastChange"
            param.DbType = Global.System.Data.DbType.DateTime
            param.DbType = Global.System.Data.DbType.DateTime
            param.SourceColumn = "LastChange"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IdUIPictures"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "IdUIPictures"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_IDUIItem"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDUIItem"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDUIItem"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "IDUIItem"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_UIItem"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "UIItem"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_UIItem"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "UIItem"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_IDSignLanguage"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDSignLanguage"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDSignLanguage"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "IDSignLanguage"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_UIPicture"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "UIPicture"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_UIPicture"
            param.DbType = Global.System.Data.DbType.Binary
            param.DbType = Global.System.Data.DbType.Binary
            param.SourceColumn = "UIPicture"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_GUID"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "GUID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_GUID"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "GUID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_LastChange"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "LastChange"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_LastChange"
            param.DbType = Global.System.Data.DbType.DateTime
            param.DbType = Global.System.Data.DbType.DateTime
            param.SourceColumn = "LastChange"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.SignWriterStudio.UI.My.MySettings.Default.swsuiConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [IdUIPictures], [IDUIItem], [UIItem], [IDSignLanguage], [UIPicture], [GUID"& _ 
                "], [LastChange] FROM [UIPictures]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As swsuiDataSet.UIPicturesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As swsuiDataSet.UIPicturesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As swsuiDataSet.UIPicturesDataTable = New swsuiDataSet.UIPicturesDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As swsuiDataSet.UIPicturesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As swsuiDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "UIPictures")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_IdUIPictures As Long, ByVal Original_IDUIItem As Global.System.Nullable(Of Long), ByVal Original_UIItem As String, ByVal Original_IDSignLanguage As Global.System.Nullable(Of Long), ByVal Original_UIPicture() As Byte, ByVal Original_GUID As String, ByVal Original_LastChange As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IdUIPictures,Long)
            If (Original_IDUIItem.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_IDUIItem.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_UIItem Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_UIItem,String)
            End If
            If (Original_IDSignLanguage.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_IDSignLanguage.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_UIPicture Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_UIPicture,Byte())
            End If
            If (Original_GUID Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_GUID,String)
            End If
            If (Original_LastChange.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_LastChange.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal IdUIPictures As Long, ByVal IDUIItem As Global.System.Nullable(Of Long), ByVal UIItem As String, ByVal IDSignLanguage As Global.System.Nullable(Of Long), ByVal UIPicture() As Byte, ByVal GUID As String, ByVal LastChange As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(IdUIPictures,Long)
            If (IDUIItem.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(IDUIItem.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (UIItem Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(UIItem,String)
            End If
            If (IDSignLanguage.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(IDSignLanguage.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (UIPicture Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(UIPicture,Byte())
            End If
            If (GUID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(GUID,String)
            End If
            If (LastChange.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(LastChange.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal IdUIPictures As Long, ByVal IDUIItem As Global.System.Nullable(Of Long), ByVal UIItem As String, ByVal IDSignLanguage As Global.System.Nullable(Of Long), ByVal UIPicture() As Byte, ByVal GUID As String, ByVal LastChange As Global.System.Nullable(Of Date), ByVal Original_IdUIPictures As Long, ByVal Original_IDUIItem As Global.System.Nullable(Of Long), ByVal Original_UIItem As String, ByVal Original_IDSignLanguage As Global.System.Nullable(Of Long), ByVal Original_UIPicture() As Byte, ByVal Original_GUID As String, ByVal Original_LastChange As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(IdUIPictures,Long)
            If (IDUIItem.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(IDUIItem.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (UIItem Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(UIItem,String)
            End If
            If (IDSignLanguage.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(IDSignLanguage.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (UIPicture Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(UIPicture,Byte())
            End If
            If (GUID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(GUID,String)
            End If
            If (LastChange.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(LastChange.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_IdUIPictures,Long)
            If (Original_IDUIItem.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_IDUIItem.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Original_UIItem Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_UIItem,String)
            End If
            If (Original_IDSignLanguage.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_IDSignLanguage.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Original_UIPicture Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_UIPicture,Byte())
            End If
            If (Original_GUID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_GUID,String)
            End If
            If (Original_LastChange.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_LastChange.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal IDUIItem As Global.System.Nullable(Of Long), ByVal UIItem As String, ByVal IDSignLanguage As Global.System.Nullable(Of Long), ByVal UIPicture() As Byte, ByVal GUID As String, ByVal LastChange As Global.System.Nullable(Of Date), ByVal Original_IdUIPictures As Long, ByVal Original_IDUIItem As Global.System.Nullable(Of Long), ByVal Original_UIItem As String, ByVal Original_IDSignLanguage As Global.System.Nullable(Of Long), ByVal Original_UIPicture() As Byte, ByVal Original_GUID As String, ByVal Original_LastChange As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(Original_IdUIPictures, IDUIItem, UIItem, IDSignLanguage, UIPicture, GUID, LastChange, Original_IdUIPictures, Original_IDUIItem, Original_UIItem, Original_IDSignLanguage, Original_UIPicture, Original_GUID, Original_LastChange)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class UISignLanguagesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "UISignLanguages"
            tableMapping.ColumnMappings.Add("IDSignLanguage", "IDSignLanguage")
            tableMapping.ColumnMappings.Add("SignLanguage", "SignLanguage")
            tableMapping.ColumnMappings.Add("CommonName", "CommonName")
            tableMapping.ColumnMappings.Add("Country", "Country")
            tableMapping.ColumnMappings.Add("ISO6393", "ISO6393")
            tableMapping.ColumnMappings.Add("Acronym", "Acronym")
            tableMapping.ColumnMappings.Add("Enabled", "Enabled")
            tableMapping.ColumnMappings.Add("GUID", "GUID")
            tableMapping.ColumnMappings.Add("LastChange", "LastChange")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [UISignLanguages] WHERE (([IDSignLanguage] = @Original_IDSignLanguage"& _ 
                ") AND ((@IsNull_SignLanguage = 1 AND [SignLanguage] IS NULL) OR ([SignLanguage] "& _ 
                "= @Original_SignLanguage)) AND ((@IsNull_CommonName = 1 AND [CommonName] IS NULL"& _ 
                ") OR ([CommonName] = @Original_CommonName)) AND ((@IsNull_Country = 1 AND [Count"& _ 
                "ry] IS NULL) OR ([Country] = @Original_Country)) AND ((@IsNull_ISO6393 = 1 AND ["& _ 
                "ISO6393] IS NULL) OR ([ISO6393] = @Original_ISO6393)) AND ((@IsNull_Acronym = 1 "& _ 
                "AND [Acronym] IS NULL) OR ([Acronym] = @Original_Acronym)) AND ([Enabled] = @Ori"& _ 
                "ginal_Enabled) AND ((@IsNull_GUID = 1 AND [GUID] IS NULL) OR ([GUID] = @Original"& _ 
                "_GUID)) AND ((@IsNull_LastChange = 1 AND [LastChange] IS NULL) OR ([LastChange] "& _ 
                "= @Original_LastChange)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDSignLanguage"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "IDSignLanguage"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_SignLanguage"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "SignLanguage"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_SignLanguage"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "SignLanguage"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_CommonName"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "CommonName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_CommonName"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "CommonName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_Country"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Country"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_Country"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Country"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_ISO6393"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "ISO6393"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_ISO6393"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "ISO6393"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_Acronym"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Acronym"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_Acronym"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Acronym"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_Enabled"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "Enabled"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_GUID"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "GUID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_GUID"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "GUID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_LastChange"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "LastChange"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_LastChange"
            param.DbType = Global.System.Data.DbType.DateTime
            param.DbType = Global.System.Data.DbType.DateTime
            param.SourceColumn = "LastChange"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [UISignLanguages] ([IDSignLanguage], [SignLanguage], [CommonName], [C"& _ 
                "ountry], [ISO6393], [Acronym], [Enabled], [GUID], [LastChange]) VALUES (@IDSignL"& _ 
                "anguage, @SignLanguage, @CommonName, @Country, @ISO6393, @Acronym, @Enabled, @GU"& _ 
                "ID, @LastChange)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDSignLanguage"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "IDSignLanguage"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@SignLanguage"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "SignLanguage"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@CommonName"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "CommonName"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Country"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Country"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ISO6393"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "ISO6393"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Acronym"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Acronym"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Enabled"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "Enabled"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@GUID"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "GUID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@LastChange"
            param.DbType = Global.System.Data.DbType.DateTime
            param.DbType = Global.System.Data.DbType.DateTime
            param.SourceColumn = "LastChange"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [UISignLanguages] SET [IDSignLanguage] = @IDSignLanguage, [SignLanguage] ="& _ 
                " @SignLanguage, [CommonName] = @CommonName, [Country] = @Country, [ISO6393] = @I"& _ 
                "SO6393, [Acronym] = @Acronym, [Enabled] = @Enabled, [GUID] = @GUID, [LastChange]"& _ 
                " = @LastChange WHERE (([IDSignLanguage] = @Original_IDSignLanguage) AND ((@IsNul"& _ 
                "l_SignLanguage = 1 AND [SignLanguage] IS NULL) OR ([SignLanguage] = @Original_Si"& _ 
                "gnLanguage)) AND ((@IsNull_CommonName = 1 AND [CommonName] IS NULL) OR ([CommonN"& _ 
                "ame] = @Original_CommonName)) AND ((@IsNull_Country = 1 AND [Country] IS NULL) O"& _ 
                "R ([Country] = @Original_Country)) AND ((@IsNull_ISO6393 = 1 AND [ISO6393] IS NU"& _ 
                "LL) OR ([ISO6393] = @Original_ISO6393)) AND ((@IsNull_Acronym = 1 AND [Acronym] "& _ 
                "IS NULL) OR ([Acronym] = @Original_Acronym)) AND ([Enabled] = @Original_Enabled)"& _ 
                " AND ((@IsNull_GUID = 1 AND [GUID] IS NULL) OR ([GUID] = @Original_GUID)) AND (("& _ 
                "@IsNull_LastChange = 1 AND [LastChange] IS NULL) OR ([LastChange] = @Original_La"& _ 
                "stChange)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDSignLanguage"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "IDSignLanguage"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@SignLanguage"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "SignLanguage"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@CommonName"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "CommonName"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Country"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Country"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ISO6393"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "ISO6393"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Acronym"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Acronym"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Enabled"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "Enabled"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@GUID"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "GUID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@LastChange"
            param.DbType = Global.System.Data.DbType.DateTime
            param.DbType = Global.System.Data.DbType.DateTime
            param.SourceColumn = "LastChange"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDSignLanguage"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "IDSignLanguage"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_SignLanguage"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "SignLanguage"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_SignLanguage"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "SignLanguage"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_CommonName"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "CommonName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_CommonName"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "CommonName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_Country"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Country"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_Country"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Country"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_ISO6393"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "ISO6393"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_ISO6393"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "ISO6393"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_Acronym"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Acronym"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_Acronym"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Acronym"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_Enabled"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "Enabled"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_GUID"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "GUID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_GUID"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "GUID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_LastChange"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "LastChange"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_LastChange"
            param.DbType = Global.System.Data.DbType.DateTime
            param.DbType = Global.System.Data.DbType.DateTime
            param.SourceColumn = "LastChange"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.SignWriterStudio.UI.My.MySettings.Default.swsuiConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(9) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [IDSignLanguage], [SignLanguage], [CommonName], [Country], [ISO6393], [Acr"& _ 
                "onym], [Enabled], [GUID], [LastChange] FROM [UISignLanguages]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT          IDSignLanguage"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM               UISignLanguages"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        "& _ 
                "   (IDSignLanguage = @ID)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.Size = 8
            param.SourceColumn = "IDSignLanguage"
            Me._commandCollection(1).Parameters.Add(param)
            Me._commandCollection(2) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT          ISO6393"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM               UISignLanguages"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE           (ISO"& _ 
                "6393 = @ISO)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ISO"
            param.DbType = Global.System.Data.DbType.[String]
            param.Size = 255
            param.SourceColumn = "ISO6393"
            Me._commandCollection(2).Parameters.Add(param)
            Me._commandCollection(3) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT [IDSignLanguage], [SignLanguage], [CommonName], [Country], [ISO6393], [Acr"& _ 
                "onym], [Enabled], [GUID], [LastChange] FROM [UISignLanguages]"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT        IDSignLanguage, SignLanguage, CommonName, Country, ISO6393, Acronym"& _ 
                ", Enabled, GUID, LastChange"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            UISignLanguages"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (IDSi"& _ 
                "gnLanguage = @IDSL)"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDSL"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.Size = 8
            param.SourceColumn = "IDSignLanguage"
            Me._commandCollection(4).Parameters.Add(param)
            Me._commandCollection(5) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(5).Connection = Me.Connection
            Me._commandCollection(5).CommandText = "SELECT          Acronym"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM               UISignLanguages"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE           (IDS"& _ 
                "ignLanguage = @ID)"
            Me._commandCollection(5).CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.Size = 8
            param.SourceColumn = "IDSignLanguage"
            Me._commandCollection(5).Parameters.Add(param)
            Me._commandCollection(6) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(6).Connection = Me.Connection
            Me._commandCollection(6).CommandText = "SELECT          GUID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM               UISignLanguages"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE           (IDSign"& _ 
                "Language = @ID)"
            Me._commandCollection(6).CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.Size = 8
            Me._commandCollection(6).Parameters.Add(param)
            Me._commandCollection(7) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(7).Connection = Me.Connection
            Me._commandCollection(7).CommandText = "SELECT          IDSignLanguage"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM               UISignLanguages"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        "& _ 
                "   (ISO6393 = @ISO)"
            Me._commandCollection(7).CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ISO"
            param.DbType = Global.System.Data.DbType.[String]
            param.Size = 255
            param.SourceColumn = "ISO6393"
            Me._commandCollection(7).Parameters.Add(param)
            Me._commandCollection(8) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(8).Connection = Me.Connection
            Me._commandCollection(8).CommandText = "SELECT          ISO6393"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM               UISignLanguages"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE           (IDS"& _ 
                "ignLanguage = @ID)"
            Me._commandCollection(8).CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.Size = 8
            param.SourceColumn = "IDSignLanguage"
            Me._commandCollection(8).Parameters.Add(param)
            Me._commandCollection(9) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(9).Connection = Me.Connection
            Me._commandCollection(9).CommandText = "SELECT          SignLanguage"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM               UISignLanguages"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE          "& _ 
                " (IDSignLanguage = @ID)"
            Me._commandCollection(9).CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ID"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.Size = 8
            param.SourceColumn = "IDSignLanguage"
            Me._commandCollection(9).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As swsuiDataSet.UISignLanguagesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As swsuiDataSet.UISignLanguagesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As swsuiDataSet.UISignLanguagesDataTable = New swsuiDataSet.UISignLanguagesDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBySignLanguages(ByVal dataTable As swsuiDataSet.UISignLanguagesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBySignLanguages() As swsuiDataSet.UISignLanguagesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            Dim dataTable As swsuiDataSet.UISignLanguagesDataTable = New swsuiDataSet.UISignLanguagesDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillSLByID(ByVal dataTable As swsuiDataSet.UISignLanguagesDataTable, ByVal IDSL As Long) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IDSL,Long)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataSLByID(ByVal IDSL As Long) As swsuiDataSet.UISignLanguagesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IDSL,Long)
            Dim dataTable As swsuiDataSet.UISignLanguagesDataTable = New swsuiDataSet.UISignLanguagesDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As swsuiDataSet.UISignLanguagesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As swsuiDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "UISignLanguages")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_IDSignLanguage As Long, ByVal Original_SignLanguage As String, ByVal Original_CommonName As String, ByVal Original_Country As String, ByVal Original_ISO6393 As String, ByVal Original_Acronym As String, ByVal Original_Enabled As Boolean, ByVal Original_GUID As String, ByVal Original_LastChange As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IDSignLanguage,Long)
            If (Original_SignLanguage Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SignLanguage,String)
            End If
            If (Original_CommonName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_CommonName,String)
            End If
            If (Original_Country Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Country,String)
            End If
            If (Original_ISO6393 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_ISO6393,String)
            End If
            If (Original_Acronym Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_Acronym,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_Enabled,Boolean)
            If (Original_GUID Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_GUID,String)
            End If
            If (Original_LastChange.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_LastChange.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal IDSignLanguage As Long, ByVal SignLanguage As String, ByVal CommonName As String, ByVal Country As String, ByVal ISO6393 As String, ByVal Acronym As String, ByVal Enabled As Boolean, ByVal GUID As String, ByVal LastChange As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(IDSignLanguage,Long)
            If (SignLanguage Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SignLanguage,String)
            End If
            If (CommonName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(CommonName,String)
            End If
            If (Country Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Country,String)
            End If
            If (ISO6393 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(ISO6393,String)
            End If
            If (Acronym Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Acronym,String)
            End If
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(Enabled,Boolean)
            If (GUID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(GUID,String)
            End If
            If (LastChange.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(LastChange.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal IDSignLanguage As Long,  _
                    ByVal SignLanguage As String,  _
                    ByVal CommonName As String,  _
                    ByVal Country As String,  _
                    ByVal ISO6393 As String,  _
                    ByVal Acronym As String,  _
                    ByVal Enabled As Boolean,  _
                    ByVal GUID As String,  _
                    ByVal LastChange As Global.System.Nullable(Of Date),  _
                    ByVal Original_IDSignLanguage As Long,  _
                    ByVal Original_SignLanguage As String,  _
                    ByVal Original_CommonName As String,  _
                    ByVal Original_Country As String,  _
                    ByVal Original_ISO6393 As String,  _
                    ByVal Original_Acronym As String,  _
                    ByVal Original_Enabled As Boolean,  _
                    ByVal Original_GUID As String,  _
                    ByVal Original_LastChange As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(IDSignLanguage,Long)
            If (SignLanguage Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SignLanguage,String)
            End If
            If (CommonName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(CommonName,String)
            End If
            If (Country Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Country,String)
            End If
            If (ISO6393 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ISO6393,String)
            End If
            If (Acronym Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Acronym,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Enabled,Boolean)
            If (GUID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(GUID,String)
            End If
            If (LastChange.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(LastChange.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_IDSignLanguage,Long)
            If (Original_SignLanguage Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_SignLanguage,String)
            End If
            If (Original_CommonName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_CommonName,String)
            End If
            If (Original_Country Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_Country,String)
            End If
            If (Original_ISO6393 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_ISO6393,String)
            End If
            If (Original_Acronym Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_Acronym,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_Enabled,Boolean)
            If (Original_GUID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_GUID,String)
            End If
            If (Original_LastChange.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_LastChange.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal SignLanguage As String,  _
                    ByVal CommonName As String,  _
                    ByVal Country As String,  _
                    ByVal ISO6393 As String,  _
                    ByVal Acronym As String,  _
                    ByVal Enabled As Boolean,  _
                    ByVal GUID As String,  _
                    ByVal LastChange As Global.System.Nullable(Of Date),  _
                    ByVal Original_IDSignLanguage As Long,  _
                    ByVal Original_SignLanguage As String,  _
                    ByVal Original_CommonName As String,  _
                    ByVal Original_Country As String,  _
                    ByVal Original_ISO6393 As String,  _
                    ByVal Original_Acronym As String,  _
                    ByVal Original_Enabled As Boolean,  _
                    ByVal Original_GUID As String,  _
                    ByVal Original_LastChange As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(Original_IDSignLanguage, SignLanguage, CommonName, Country, ISO6393, Acronym, Enabled, GUID, LastChange, Original_IDSignLanguage, Original_SignLanguage, Original_CommonName, Original_Country, Original_ISO6393, Original_Acronym, Original_Enabled, Original_GUID, Original_LastChange)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function CheckifSLExistsbyID(ByVal ID As Long) As Object
            Dim command As Global.System.Data.SQLite.SQLiteCommand = Me.CommandCollection(1)
            command.Parameters(0).Value = CType(ID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,Object)
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function CheckifSLExistsbyISO(ByVal ISO As String) As Object
            Dim command As Global.System.Data.SQLite.SQLiteCommand = Me.CommandCollection(2)
            If (ISO Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(ISO,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,Object)
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetAcronymbyID(ByVal ID As Long) As Object
            Dim command As Global.System.Data.SQLite.SQLiteCommand = Me.CommandCollection(5)
            command.Parameters(0).Value = CType(ID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,Object)
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetGUIDbyID(ByVal ID As Long) As Object
            Dim command As Global.System.Data.SQLite.SQLiteCommand = Me.CommandCollection(6)
            command.Parameters(0).Value = CType(ID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,Object)
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetIDbyISO(ByVal ISO As String) As Object
            Dim command As Global.System.Data.SQLite.SQLiteCommand = Me.CommandCollection(7)
            If (ISO Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(ISO,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,Object)
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetISObyID(ByVal ID As Long) As String
            Dim command As Global.System.Data.SQLite.SQLiteCommand = Me.CommandCollection(8)
            command.Parameters(0).Value = CType(ID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,String)
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetSLNamebyID(ByVal ID As Long) As String
            Dim command As Global.System.Data.SQLite.SQLiteCommand = Me.CommandCollection(9)
            command.Parameters(0).Value = CType(ID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,String)
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class UITranslationsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "UITranslations"
            tableMapping.ColumnMappings.Add("IdUITranslation", "IdUITranslation")
            tableMapping.ColumnMappings.Add("IDUIItem", "IDUIItem")
            tableMapping.ColumnMappings.Add("IDCulture", "IDCulture")
            tableMapping.ColumnMappings.Add("UIContext", "UIContext")
            tableMapping.ColumnMappings.Add("UITranslation", "UITranslation")
            tableMapping.ColumnMappings.Add("GUID", "GUID")
            tableMapping.ColumnMappings.Add("LastChange", "LastChange")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [UITranslations] WHERE (([IdUITranslation] = @Original_IdUITranslatio"& _ 
                "n) AND ((@IsNull_IDUIItem = 1 AND [IDUIItem] IS NULL) OR ([IDUIItem] = @Original"& _ 
                "_IDUIItem)) AND ((@IsNull_IDCulture = 1 AND [IDCulture] IS NULL) OR ([IDCulture]"& _ 
                " = @Original_IDCulture)) AND ((@IsNull_UIContext = 1 AND [UIContext] IS NULL) OR"& _ 
                " ([UIContext] = @Original_UIContext)) AND ((@IsNull_UITranslation = 1 AND [UITra"& _ 
                "nslation] IS NULL) OR ([UITranslation] = @Original_UITranslation)) AND ((@IsNull"& _ 
                "_GUID = 1 AND [GUID] IS NULL) OR ([GUID] = @Original_GUID)) AND ((@IsNull_LastCh"& _ 
                "ange = 1 AND [LastChange] IS NULL) OR ([LastChange] = @Original_LastChange)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IdUITranslation"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "IdUITranslation"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_IDUIItem"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDUIItem"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDUIItem"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "IDUIItem"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_IDCulture"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDCulture"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDCulture"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "IDCulture"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_UIContext"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "UIContext"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_UIContext"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "UIContext"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_UITranslation"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "UITranslation"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_UITranslation"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "UITranslation"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_GUID"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "GUID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_GUID"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "GUID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_LastChange"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "LastChange"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_LastChange"
            param.DbType = Global.System.Data.DbType.DateTime
            param.DbType = Global.System.Data.DbType.DateTime
            param.SourceColumn = "LastChange"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [UITranslations] ([IdUITranslation], [IDUIItem], [IDCulture], [UICont"& _ 
                "ext], [UITranslation], [GUID], [LastChange]) VALUES (@IdUITranslation, @IDUIItem"& _ 
                ", @IDCulture, @UIContext, @UITranslation, @GUID, @LastChange)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IdUITranslation"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "IdUITranslation"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDUIItem"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "IDUIItem"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDCulture"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "IDCulture"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@UIContext"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "UIContext"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@UITranslation"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "UITranslation"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@GUID"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "GUID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@LastChange"
            param.DbType = Global.System.Data.DbType.DateTime
            param.DbType = Global.System.Data.DbType.DateTime
            param.SourceColumn = "LastChange"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [UITranslations] SET [IdUITranslation] = @IdUITranslation, [IDUIItem] = @I"& _ 
                "DUIItem, [IDCulture] = @IDCulture, [UIContext] = @UIContext, [UITranslation] = @"& _ 
                "UITranslation, [GUID] = @GUID, [LastChange] = @LastChange WHERE (([IdUITranslati"& _ 
                "on] = @Original_IdUITranslation) AND ((@IsNull_IDUIItem = 1 AND [IDUIItem] IS NU"& _ 
                "LL) OR ([IDUIItem] = @Original_IDUIItem)) AND ((@IsNull_IDCulture = 1 AND [IDCul"& _ 
                "ture] IS NULL) OR ([IDCulture] = @Original_IDCulture)) AND ((@IsNull_UIContext ="& _ 
                " 1 AND [UIContext] IS NULL) OR ([UIContext] = @Original_UIContext)) AND ((@IsNul"& _ 
                "l_UITranslation = 1 AND [UITranslation] IS NULL) OR ([UITranslation] = @Original"& _ 
                "_UITranslation)) AND ((@IsNull_GUID = 1 AND [GUID] IS NULL) OR ([GUID] = @Origin"& _ 
                "al_GUID)) AND ((@IsNull_LastChange = 1 AND [LastChange] IS NULL) OR ([LastChange"& _ 
                "] = @Original_LastChange)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IdUITranslation"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "IdUITranslation"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDUIItem"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "IDUIItem"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDCulture"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "IDCulture"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@UIContext"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "UIContext"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@UITranslation"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "UITranslation"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@GUID"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "GUID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@LastChange"
            param.DbType = Global.System.Data.DbType.DateTime
            param.DbType = Global.System.Data.DbType.DateTime
            param.SourceColumn = "LastChange"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IdUITranslation"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "IdUITranslation"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_IDUIItem"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDUIItem"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDUIItem"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "IDUIItem"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_IDCulture"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDCulture"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDCulture"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "IDCulture"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_UIContext"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "UIContext"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_UIContext"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "UIContext"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_UITranslation"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "UITranslation"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_UITranslation"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "UITranslation"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_GUID"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "GUID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_GUID"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "GUID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_LastChange"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "LastChange"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_LastChange"
            param.DbType = Global.System.Data.DbType.DateTime
            param.DbType = Global.System.Data.DbType.DateTime
            param.SourceColumn = "LastChange"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.SignWriterStudio.UI.My.MySettings.Default.swsuiConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [IdUITranslation], [IDUIItem], [IDCulture], [UIContext], [UITranslation], "& _ 
                "[GUID], [LastChange] FROM [UITranslations]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT          UITranslations.IdUITranslation, UITranslations.IDUIItem, UITransl"& _ 
                "ations.IDCulture, UITranslations.UIContext, UITranslations.UITranslation, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    "& _ 
                "                            UITranslations.GUID, UITranslations.LastChange, UIGr"& _ 
                "oups.UIGroup"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM               UITranslations INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                    "& _ 
                "            UIItems ON UITranslations.IDUIItem = UIItems.IdUIItem INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"  "& _ 
                "                              UIGroups ON UIItems.IDUIGroup = UIGroups.IdUIGroup"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE           (UIGroups.UIGroup = @Group) AND (UITranslations.IDCulture = @I"& _ 
                "DCulture)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Group"
            param.DbType = Global.System.Data.DbType.[String]
            param.Size = 50
            param.SourceColumn = "UIGroup"
            Me._commandCollection(1).Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDCulture"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.Size = 8
            param.SourceColumn = "IDCulture"
            Me._commandCollection(1).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As swsuiDataSet.UITranslationsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As swsuiDataSet.UITranslationsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As swsuiDataSet.UITranslationsDataTable = New swsuiDataSet.UITranslationsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByGroup(ByVal dataTable As swsuiDataSet.UITranslationsDataTable, ByVal Group As String, ByVal IDCulture As Global.System.Nullable(Of Long)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Group Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Group,String)
            End If
            If (IDCulture.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(IDCulture.Value,Long)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByGroup(ByVal Group As String, ByVal IDCulture As Global.System.Nullable(Of Long)) As swsuiDataSet.UITranslationsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Group Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Group,String)
            End If
            If (IDCulture.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(IDCulture.Value,Long)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As swsuiDataSet.UITranslationsDataTable = New swsuiDataSet.UITranslationsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As swsuiDataSet.UITranslationsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As swsuiDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "UITranslations")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_IdUITranslation As Long, ByVal Original_IDUIItem As Global.System.Nullable(Of Long), ByVal Original_IDCulture As Global.System.Nullable(Of Long), ByVal Original_UIContext As String, ByVal Original_UITranslation As String, ByVal Original_GUID As String, ByVal Original_LastChange As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IdUITranslation,Long)
            If (Original_IDUIItem.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_IDUIItem.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_IDCulture.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_IDCulture.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_UIContext Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_UIContext,String)
            End If
            If (Original_UITranslation Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_UITranslation,String)
            End If
            If (Original_GUID Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_GUID,String)
            End If
            If (Original_LastChange.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_LastChange.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal IdUITranslation As Long, ByVal IDUIItem As Global.System.Nullable(Of Long), ByVal IDCulture As Global.System.Nullable(Of Long), ByVal UIContext As String, ByVal UITranslation As String, ByVal GUID As String, ByVal LastChange As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(IdUITranslation,Long)
            If (IDUIItem.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(IDUIItem.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (IDCulture.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(IDCulture.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (UIContext Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(UIContext,String)
            End If
            If (UITranslation Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(UITranslation,String)
            End If
            If (GUID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(GUID,String)
            End If
            If (LastChange.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(LastChange.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal IdUITranslation As Long, ByVal IDUIItem As Global.System.Nullable(Of Long), ByVal IDCulture As Global.System.Nullable(Of Long), ByVal UIContext As String, ByVal UITranslation As String, ByVal GUID As String, ByVal LastChange As Global.System.Nullable(Of Date), ByVal Original_IdUITranslation As Long, ByVal Original_IDUIItem As Global.System.Nullable(Of Long), ByVal Original_IDCulture As Global.System.Nullable(Of Long), ByVal Original_UIContext As String, ByVal Original_UITranslation As String, ByVal Original_GUID As String, ByVal Original_LastChange As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(IdUITranslation,Long)
            If (IDUIItem.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(IDUIItem.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (IDCulture.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(IDCulture.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (UIContext Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(UIContext,String)
            End If
            If (UITranslation Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(UITranslation,String)
            End If
            If (GUID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(GUID,String)
            End If
            If (LastChange.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(LastChange.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_IdUITranslation,Long)
            If (Original_IDUIItem.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_IDUIItem.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Original_IDCulture.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_IDCulture.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Original_UIContext Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_UIContext,String)
            End If
            If (Original_UITranslation Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_UITranslation,String)
            End If
            If (Original_GUID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_GUID,String)
            End If
            If (Original_LastChange.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_LastChange.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal IDUIItem As Global.System.Nullable(Of Long), ByVal IDCulture As Global.System.Nullable(Of Long), ByVal UIContext As String, ByVal UITranslation As String, ByVal GUID As String, ByVal LastChange As Global.System.Nullable(Of Date), ByVal Original_IdUITranslation As Long, ByVal Original_IDUIItem As Global.System.Nullable(Of Long), ByVal Original_IDCulture As Global.System.Nullable(Of Long), ByVal Original_UIContext As String, ByVal Original_UITranslation As String, ByVal Original_GUID As String, ByVal Original_LastChange As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(Original_IdUITranslation, IDUIItem, IDCulture, UIContext, UITranslation, GUID, LastChange, Original_IdUITranslation, Original_IDUIItem, Original_IDCulture, Original_UIContext, Original_UITranslation, Original_GUID, Original_LastChange)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VersionTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Version"
            tableMapping.ColumnMappings.Add("IDVersion", "IDVersion")
            tableMapping.ColumnMappings.Add("Major", "Major")
            tableMapping.ColumnMappings.Add("Minor", "Minor")
            tableMapping.ColumnMappings.Add("DatabaseName", "DatabaseName")
            tableMapping.ColumnMappings.Add("DatabaseType", "DatabaseType")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Version] WHERE (([IDVersion] = @Original_IDVersion) AND ((@IsNull_Ma"& _ 
                "jor = 1 AND [Major] IS NULL) OR ([Major] = @Original_Major)) AND ((@IsNull_Minor"& _ 
                " = 1 AND [Minor] IS NULL) OR ([Minor] = @Original_Minor)) AND ((@IsNull_Database"& _ 
                "Name = 1 AND [DatabaseName] IS NULL) OR ([DatabaseName] = @Original_DatabaseName"& _ 
                ")) AND ((@IsNull_DatabaseType = 1 AND [DatabaseType] IS NULL) OR ([DatabaseType]"& _ 
                " = @Original_DatabaseType)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDVersion"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "IDVersion"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_Major"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Major"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_Major"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "Major"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_Minor"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Minor"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_Minor"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "Minor"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_DatabaseName"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "DatabaseName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_DatabaseName"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "DatabaseName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_DatabaseType"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "DatabaseType"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_DatabaseType"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "DatabaseType"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Version] ([IDVersion], [Major], [Minor], [DatabaseName], [DatabaseTy"& _ 
                "pe]) VALUES (@IDVersion, @Major, @Minor, @DatabaseName, @DatabaseType)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDVersion"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "IDVersion"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Major"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "Major"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Minor"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "Minor"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@DatabaseName"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "DatabaseName"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@DatabaseType"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "DatabaseType"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Version] SET [IDVersion] = @IDVersion, [Major] = @Major, [Minor] = @Minor"& _ 
                ", [DatabaseName] = @DatabaseName, [DatabaseType] = @DatabaseType WHERE (([IDVers"& _ 
                "ion] = @Original_IDVersion) AND ((@IsNull_Major = 1 AND [Major] IS NULL) OR ([Ma"& _ 
                "jor] = @Original_Major)) AND ((@IsNull_Minor = 1 AND [Minor] IS NULL) OR ([Minor"& _ 
                "] = @Original_Minor)) AND ((@IsNull_DatabaseName = 1 AND [DatabaseName] IS NULL)"& _ 
                " OR ([DatabaseName] = @Original_DatabaseName)) AND ((@IsNull_DatabaseType = 1 AN"& _ 
                "D [DatabaseType] IS NULL) OR ([DatabaseType] = @Original_DatabaseType)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDVersion"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "IDVersion"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Major"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "Major"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Minor"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "Minor"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@DatabaseName"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "DatabaseName"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@DatabaseType"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "DatabaseType"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDVersion"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "IDVersion"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_Major"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Major"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_Major"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "Major"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_Minor"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Minor"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_Minor"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "Minor"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_DatabaseName"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "DatabaseName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_DatabaseName"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "DatabaseName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_DatabaseType"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "DatabaseType"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_DatabaseType"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "DatabaseType"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.SignWriterStudio.UI.My.MySettings.Default.swsuiConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [IDVersion], [Major], [Minor], [DatabaseName], [DatabaseType] FROM [Versio"& _ 
                "n]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As swsuiDataSet.VersionDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As swsuiDataSet.VersionDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As swsuiDataSet.VersionDataTable = New swsuiDataSet.VersionDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As swsuiDataSet.VersionDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As swsuiDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Version")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_IDVersion As Long, ByVal Original_Major As Global.System.Nullable(Of Long), ByVal Original_Minor As Global.System.Nullable(Of Long), ByVal Original_DatabaseName As String, ByVal Original_DatabaseType As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IDVersion,Long)
            If (Original_Major.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Major.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_Minor.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Minor.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_DatabaseName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_DatabaseName,String)
            End If
            If (Original_DatabaseType Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_DatabaseType,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal IDVersion As Long, ByVal Major As Global.System.Nullable(Of Long), ByVal Minor As Global.System.Nullable(Of Long), ByVal DatabaseName As String, ByVal DatabaseType As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(IDVersion,Long)
            If (Major.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Major.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Minor.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Minor.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (DatabaseName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(DatabaseName,String)
            End If
            If (DatabaseType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(DatabaseType,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal IDVersion As Long, ByVal Major As Global.System.Nullable(Of Long), ByVal Minor As Global.System.Nullable(Of Long), ByVal DatabaseName As String, ByVal DatabaseType As String, ByVal Original_IDVersion As Long, ByVal Original_Major As Global.System.Nullable(Of Long), ByVal Original_Minor As Global.System.Nullable(Of Long), ByVal Original_DatabaseName As String, ByVal Original_DatabaseType As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(IDVersion,Long)
            If (Major.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Major.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Minor.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Minor.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (DatabaseName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(DatabaseName,String)
            End If
            If (DatabaseType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(DatabaseType,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_IDVersion,Long)
            If (Original_Major.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_Major.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Original_Minor.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_Minor.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Original_DatabaseName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_DatabaseName,String)
            End If
            If (Original_DatabaseType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_DatabaseType,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Major As Global.System.Nullable(Of Long), ByVal Minor As Global.System.Nullable(Of Long), ByVal DatabaseName As String, ByVal DatabaseType As String, ByVal Original_IDVersion As Long, ByVal Original_Major As Global.System.Nullable(Of Long), ByVal Original_Minor As Global.System.Nullable(Of Long), ByVal Original_DatabaseName As String, ByVal Original_DatabaseType As String) As Integer
            Return Me.Update(Original_IDVersion, Major, Minor, DatabaseName, DatabaseType, Original_IDVersion, Original_Major, Original_Minor, Original_DatabaseName, Original_DatabaseType)
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _uICulturesTableAdapter As UICulturesTableAdapter
        
        Private _uIGroupsTableAdapter As UIGroupsTableAdapter
        
        Private _uIItemsTableAdapter As UIItemsTableAdapter
        
        Private _uIPicturesTableAdapter As UIPicturesTableAdapter
        
        Private _uISignLanguagesTableAdapter As UISignLanguagesTableAdapter
        
        Private _uITranslationsTableAdapter As UITranslationsTableAdapter
        
        Private _versionTableAdapter As VersionTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property UICulturesTableAdapter() As UICulturesTableAdapter
            Get
                Return Me._uICulturesTableAdapter
            End Get
            Set
                Me._uICulturesTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property UIGroupsTableAdapter() As UIGroupsTableAdapter
            Get
                Return Me._uIGroupsTableAdapter
            End Get
            Set
                Me._uIGroupsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property UIItemsTableAdapter() As UIItemsTableAdapter
            Get
                Return Me._uIItemsTableAdapter
            End Get
            Set
                Me._uIItemsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property UIPicturesTableAdapter() As UIPicturesTableAdapter
            Get
                Return Me._uIPicturesTableAdapter
            End Get
            Set
                Me._uIPicturesTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property UISignLanguagesTableAdapter() As UISignLanguagesTableAdapter
            Get
                Return Me._uISignLanguagesTableAdapter
            End Get
            Set
                Me._uISignLanguagesTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property UITranslationsTableAdapter() As UITranslationsTableAdapter
            Get
                Return Me._uITranslationsTableAdapter
            End Get
            Set
                Me._uITranslationsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property VersionTableAdapter() As VersionTableAdapter
            Get
                Return Me._versionTableAdapter
            End Get
            Set
                Me._versionTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._uICulturesTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._uICulturesTableAdapter.Connection) Is Nothing)) Then
                    Return Me._uICulturesTableAdapter.Connection
                End If
                If ((Not (Me._uIGroupsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._uIGroupsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._uIGroupsTableAdapter.Connection
                End If
                If ((Not (Me._uIItemsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._uIItemsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._uIItemsTableAdapter.Connection
                End If
                If ((Not (Me._uIPicturesTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._uIPicturesTableAdapter.Connection) Is Nothing)) Then
                    Return Me._uIPicturesTableAdapter.Connection
                End If
                If ((Not (Me._uISignLanguagesTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._uISignLanguagesTableAdapter.Connection) Is Nothing)) Then
                    Return Me._uISignLanguagesTableAdapter.Connection
                End If
                If ((Not (Me._uITranslationsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._uITranslationsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._uITranslationsTableAdapter.Connection
                End If
                If ((Not (Me._versionTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._versionTableAdapter.Connection) Is Nothing)) Then
                    Return Me._versionTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._uICulturesTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._uIGroupsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._uIItemsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._uIPicturesTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._uISignLanguagesTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._uITranslationsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._versionTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As swsuiDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._uIGroupsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.UIGroups.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._uIGroupsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._uIItemsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.UIItems.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._uIItemsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._uISignLanguagesTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.UISignLanguages.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._uISignLanguagesTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._uICulturesTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.UICultures.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._uICulturesTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._uIPicturesTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.UIPictures.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._uIPicturesTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._uITranslationsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.UITranslations.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._uITranslationsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._versionTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Version.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._versionTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As swsuiDataSet, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._uIGroupsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.UIGroups.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._uIGroupsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._uIItemsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.UIItems.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._uIItemsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._uISignLanguagesTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.UISignLanguages.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._uISignLanguagesTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._uICulturesTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.UICultures.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._uICulturesTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._uIPicturesTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.UIPictures.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._uIPicturesTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._uITranslationsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.UITranslations.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._uITranslationsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._versionTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Version.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._versionTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As swsuiDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._versionTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Version.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._versionTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._uITranslationsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.UITranslations.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._uITranslationsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._uIPicturesTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.UIPictures.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._uIPicturesTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._uICulturesTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.UICultures.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._uICulturesTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._uISignLanguagesTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.UISignLanguages.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._uISignLanguagesTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._uIItemsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.UIItems.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._uIItemsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._uIGroupsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.UIGroups.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._uIGroupsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As swsuiDataSet) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._uICulturesTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._uICulturesTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._uIGroupsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._uIGroupsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._uIItemsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._uIItemsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._uIPicturesTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._uIPicturesTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._uISignLanguagesTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._uISignLanguagesTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._uITranslationsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._uITranslationsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._versionTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._versionTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._uICulturesTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._uICulturesTableAdapter, Me._uICulturesTableAdapter.Connection)
                    Me._uICulturesTableAdapter.Connection = CType(workConnection,Global.System.Data.SQLite.SQLiteConnection)
                    Me._uICulturesTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SQLite.SQLiteTransaction)
                    If Me._uICulturesTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._uICulturesTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._uICulturesTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._uIGroupsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._uIGroupsTableAdapter, Me._uIGroupsTableAdapter.Connection)
                    Me._uIGroupsTableAdapter.Connection = CType(workConnection,Global.System.Data.SQLite.SQLiteConnection)
                    Me._uIGroupsTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SQLite.SQLiteTransaction)
                    If Me._uIGroupsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._uIGroupsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._uIGroupsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._uIItemsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._uIItemsTableAdapter, Me._uIItemsTableAdapter.Connection)
                    Me._uIItemsTableAdapter.Connection = CType(workConnection,Global.System.Data.SQLite.SQLiteConnection)
                    Me._uIItemsTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SQLite.SQLiteTransaction)
                    If Me._uIItemsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._uIItemsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._uIItemsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._uIPicturesTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._uIPicturesTableAdapter, Me._uIPicturesTableAdapter.Connection)
                    Me._uIPicturesTableAdapter.Connection = CType(workConnection,Global.System.Data.SQLite.SQLiteConnection)
                    Me._uIPicturesTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SQLite.SQLiteTransaction)
                    If Me._uIPicturesTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._uIPicturesTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._uIPicturesTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._uISignLanguagesTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._uISignLanguagesTableAdapter, Me._uISignLanguagesTableAdapter.Connection)
                    Me._uISignLanguagesTableAdapter.Connection = CType(workConnection,Global.System.Data.SQLite.SQLiteConnection)
                    Me._uISignLanguagesTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SQLite.SQLiteTransaction)
                    If Me._uISignLanguagesTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._uISignLanguagesTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._uISignLanguagesTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._uITranslationsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._uITranslationsTableAdapter, Me._uITranslationsTableAdapter.Connection)
                    Me._uITranslationsTableAdapter.Connection = CType(workConnection,Global.System.Data.SQLite.SQLiteConnection)
                    Me._uITranslationsTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SQLite.SQLiteTransaction)
                    If Me._uITranslationsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._uITranslationsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._uITranslationsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._versionTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._versionTableAdapter, Me._versionTableAdapter.Connection)
                    Me._versionTableAdapter.Connection = CType(workConnection,Global.System.Data.SQLite.SQLiteConnection)
                    Me._versionTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SQLite.SQLiteTransaction)
                    If Me._versionTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._versionTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._versionTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._uICulturesTableAdapter) Is Nothing) Then
                    Me._uICulturesTableAdapter.Connection = CType(revertConnections(Me._uICulturesTableAdapter),Global.System.Data.SQLite.SQLiteConnection)
                    Me._uICulturesTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._uIGroupsTableAdapter) Is Nothing) Then
                    Me._uIGroupsTableAdapter.Connection = CType(revertConnections(Me._uIGroupsTableAdapter),Global.System.Data.SQLite.SQLiteConnection)
                    Me._uIGroupsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._uIItemsTableAdapter) Is Nothing) Then
                    Me._uIItemsTableAdapter.Connection = CType(revertConnections(Me._uIItemsTableAdapter),Global.System.Data.SQLite.SQLiteConnection)
                    Me._uIItemsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._uIPicturesTableAdapter) Is Nothing) Then
                    Me._uIPicturesTableAdapter.Connection = CType(revertConnections(Me._uIPicturesTableAdapter),Global.System.Data.SQLite.SQLiteConnection)
                    Me._uIPicturesTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._uISignLanguagesTableAdapter) Is Nothing) Then
                    Me._uISignLanguagesTableAdapter.Connection = CType(revertConnections(Me._uISignLanguagesTableAdapter),Global.System.Data.SQLite.SQLiteConnection)
                    Me._uISignLanguagesTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._uITranslationsTableAdapter) Is Nothing) Then
                    Me._uITranslationsTableAdapter.Connection = CType(revertConnections(Me._uITranslationsTableAdapter),Global.System.Data.SQLite.SQLiteConnection)
                    Me._uITranslationsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._versionTableAdapter) Is Nothing) Then
                    Me._versionTableAdapter.Connection = CType(revertConnections(Me._versionTableAdapter),Global.System.Data.SQLite.SQLiteConnection)
                    Me._versionTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
