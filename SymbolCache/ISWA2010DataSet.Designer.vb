'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.34014
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("ISWA2010DataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class ISWA2010DataSet
    Inherits Global.System.Data.DataSet
    
    Private tableactionfinger As actionfingerDataTable
    
    Private tablebasesymbol As basesymbolDataTable
    
    Private tablebasesymbol1 As basesymbol1DataTable
    
    Private tablecategory As categoryDataTable
    
    Private tableclassification As classificationDataTable
    
    Private tablegroup As groupDataTable
    
    Private tablemultiplefinger As multiplefingerDataTable
    
    Private tablerootshape As rootshapeDataTable
    
    Private tablerootshapegroup As rootshapegroupDataTable
    
    Private tablerootshapequick As rootshapequickDataTable
    
    Private tablesymbol As symbolDataTable
    
    Private tablesymbolgroup As symbolgroupDataTable
    
    Private tablethumbposition As thumbpositionDataTable
    
    Private tableversion As versionDataTable
    
    Private tablecache As cacheDataTable
    
    Private relationFK_basesymbol_0 As Global.System.Data.DataRelation
    
    Private relationFK_basesymbol_1 As Global.System.Data.DataRelation
    
    Private relationFK_classification_0 As Global.System.Data.DataRelation
    
    Private relationFK_classification_1 As Global.System.Data.DataRelation
    
    Private relationFK_classification_2 As Global.System.Data.DataRelation
    
    Private relationFK_classification_3 As Global.System.Data.DataRelation
    
    Private relationFK_classification_4 As Global.System.Data.DataRelation
    
    Private relationFK_classification_5 As Global.System.Data.DataRelation
    
    Private relationFK_classification_6 As Global.System.Data.DataRelation
    
    Private relationFK_symbol_0 As Global.System.Data.DataRelation
    
    Private relationFK_symbol_1 As Global.System.Data.DataRelation
    
    Private relationFK_symbolgroup_0 As Global.System.Data.DataRelation
    
    Private relationFK_symbolgroup_1 As Global.System.Data.DataRelation
    
    Private relationFK_basesymbol_11 As Global.System.Data.DataRelation
    
    Private relationFK_symbolgroup_01 As Global.System.Data.DataRelation
    
    Private relationFK_basesymbol_12 As Global.System.Data.DataRelation
    
    Private relationFK_symbolgroup_11 As Global.System.Data.DataRelation
    
    Private relationFK_basesymbol_13 As Global.System.Data.DataRelation
    
    Private relationFK_basesymbol_14 As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("actionfinger")) Is Nothing) Then
                MyBase.Tables.Add(New actionfingerDataTable(ds.Tables("actionfinger")))
            End If
            If (Not (ds.Tables("basesymbol")) Is Nothing) Then
                MyBase.Tables.Add(New basesymbolDataTable(ds.Tables("basesymbol")))
            End If
            If (Not (ds.Tables("basesymbol1")) Is Nothing) Then
                MyBase.Tables.Add(New basesymbol1DataTable(ds.Tables("basesymbol1")))
            End If
            If (Not (ds.Tables("category")) Is Nothing) Then
                MyBase.Tables.Add(New categoryDataTable(ds.Tables("category")))
            End If
            If (Not (ds.Tables("classification")) Is Nothing) Then
                MyBase.Tables.Add(New classificationDataTable(ds.Tables("classification")))
            End If
            If (Not (ds.Tables("group")) Is Nothing) Then
                MyBase.Tables.Add(New groupDataTable(ds.Tables("group")))
            End If
            If (Not (ds.Tables("multiplefinger")) Is Nothing) Then
                MyBase.Tables.Add(New multiplefingerDataTable(ds.Tables("multiplefinger")))
            End If
            If (Not (ds.Tables("rootshape")) Is Nothing) Then
                MyBase.Tables.Add(New rootshapeDataTable(ds.Tables("rootshape")))
            End If
            If (Not (ds.Tables("rootshapegroup")) Is Nothing) Then
                MyBase.Tables.Add(New rootshapegroupDataTable(ds.Tables("rootshapegroup")))
            End If
            If (Not (ds.Tables("rootshapequick")) Is Nothing) Then
                MyBase.Tables.Add(New rootshapequickDataTable(ds.Tables("rootshapequick")))
            End If
            If (Not (ds.Tables("symbol")) Is Nothing) Then
                MyBase.Tables.Add(New symbolDataTable(ds.Tables("symbol")))
            End If
            If (Not (ds.Tables("symbolgroup")) Is Nothing) Then
                MyBase.Tables.Add(New symbolgroupDataTable(ds.Tables("symbolgroup")))
            End If
            If (Not (ds.Tables("thumbposition")) Is Nothing) Then
                MyBase.Tables.Add(New thumbpositionDataTable(ds.Tables("thumbposition")))
            End If
            If (Not (ds.Tables("version")) Is Nothing) Then
                MyBase.Tables.Add(New versionDataTable(ds.Tables("version")))
            End If
            If (Not (ds.Tables("cache")) Is Nothing) Then
                MyBase.Tables.Add(New cacheDataTable(ds.Tables("cache")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property actionfinger() As actionfingerDataTable
        Get
            Return Me.tableactionfinger
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property basesymbol() As basesymbolDataTable
        Get
            Return Me.tablebasesymbol
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property basesymbol1() As basesymbol1DataTable
        Get
            Return Me.tablebasesymbol1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property category() As categoryDataTable
        Get
            Return Me.tablecategory
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property classification() As classificationDataTable
        Get
            Return Me.tableclassification
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property group() As groupDataTable
        Get
            Return Me.tablegroup
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property multiplefinger() As multiplefingerDataTable
        Get
            Return Me.tablemultiplefinger
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property rootshape() As rootshapeDataTable
        Get
            Return Me.tablerootshape
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property rootshapegroup() As rootshapegroupDataTable
        Get
            Return Me.tablerootshapegroup
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property rootshapequick() As rootshapequickDataTable
        Get
            Return Me.tablerootshapequick
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property symbol() As symbolDataTable
        Get
            Return Me.tablesymbol
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property symbolgroup() As symbolgroupDataTable
        Get
            Return Me.tablesymbolgroup
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property thumbposition() As thumbpositionDataTable
        Get
            Return Me.tablethumbposition
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property version() As versionDataTable
        Get
            Return Me.tableversion
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property cache() As cacheDataTable
        Get
            Return Me.tablecache
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As ISWA2010DataSet = CType(MyBase.Clone,ISWA2010DataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("actionfinger")) Is Nothing) Then
                MyBase.Tables.Add(New actionfingerDataTable(ds.Tables("actionfinger")))
            End If
            If (Not (ds.Tables("basesymbol")) Is Nothing) Then
                MyBase.Tables.Add(New basesymbolDataTable(ds.Tables("basesymbol")))
            End If
            If (Not (ds.Tables("basesymbol1")) Is Nothing) Then
                MyBase.Tables.Add(New basesymbol1DataTable(ds.Tables("basesymbol1")))
            End If
            If (Not (ds.Tables("category")) Is Nothing) Then
                MyBase.Tables.Add(New categoryDataTable(ds.Tables("category")))
            End If
            If (Not (ds.Tables("classification")) Is Nothing) Then
                MyBase.Tables.Add(New classificationDataTable(ds.Tables("classification")))
            End If
            If (Not (ds.Tables("group")) Is Nothing) Then
                MyBase.Tables.Add(New groupDataTable(ds.Tables("group")))
            End If
            If (Not (ds.Tables("multiplefinger")) Is Nothing) Then
                MyBase.Tables.Add(New multiplefingerDataTable(ds.Tables("multiplefinger")))
            End If
            If (Not (ds.Tables("rootshape")) Is Nothing) Then
                MyBase.Tables.Add(New rootshapeDataTable(ds.Tables("rootshape")))
            End If
            If (Not (ds.Tables("rootshapegroup")) Is Nothing) Then
                MyBase.Tables.Add(New rootshapegroupDataTable(ds.Tables("rootshapegroup")))
            End If
            If (Not (ds.Tables("rootshapequick")) Is Nothing) Then
                MyBase.Tables.Add(New rootshapequickDataTable(ds.Tables("rootshapequick")))
            End If
            If (Not (ds.Tables("symbol")) Is Nothing) Then
                MyBase.Tables.Add(New symbolDataTable(ds.Tables("symbol")))
            End If
            If (Not (ds.Tables("symbolgroup")) Is Nothing) Then
                MyBase.Tables.Add(New symbolgroupDataTable(ds.Tables("symbolgroup")))
            End If
            If (Not (ds.Tables("thumbposition")) Is Nothing) Then
                MyBase.Tables.Add(New thumbpositionDataTable(ds.Tables("thumbposition")))
            End If
            If (Not (ds.Tables("version")) Is Nothing) Then
                MyBase.Tables.Add(New versionDataTable(ds.Tables("version")))
            End If
            If (Not (ds.Tables("cache")) Is Nothing) Then
                MyBase.Tables.Add(New cacheDataTable(ds.Tables("cache")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableactionfinger = CType(MyBase.Tables("actionfinger"),actionfingerDataTable)
        If (initTable = true) Then
            If (Not (Me.tableactionfinger) Is Nothing) Then
                Me.tableactionfinger.InitVars
            End If
        End If
        Me.tablebasesymbol = CType(MyBase.Tables("basesymbol"),basesymbolDataTable)
        If (initTable = true) Then
            If (Not (Me.tablebasesymbol) Is Nothing) Then
                Me.tablebasesymbol.InitVars
            End If
        End If
        Me.tablebasesymbol1 = CType(MyBase.Tables("basesymbol1"),basesymbol1DataTable)
        If (initTable = true) Then
            If (Not (Me.tablebasesymbol1) Is Nothing) Then
                Me.tablebasesymbol1.InitVars
            End If
        End If
        Me.tablecategory = CType(MyBase.Tables("category"),categoryDataTable)
        If (initTable = true) Then
            If (Not (Me.tablecategory) Is Nothing) Then
                Me.tablecategory.InitVars
            End If
        End If
        Me.tableclassification = CType(MyBase.Tables("classification"),classificationDataTable)
        If (initTable = true) Then
            If (Not (Me.tableclassification) Is Nothing) Then
                Me.tableclassification.InitVars
            End If
        End If
        Me.tablegroup = CType(MyBase.Tables("group"),groupDataTable)
        If (initTable = true) Then
            If (Not (Me.tablegroup) Is Nothing) Then
                Me.tablegroup.InitVars
            End If
        End If
        Me.tablemultiplefinger = CType(MyBase.Tables("multiplefinger"),multiplefingerDataTable)
        If (initTable = true) Then
            If (Not (Me.tablemultiplefinger) Is Nothing) Then
                Me.tablemultiplefinger.InitVars
            End If
        End If
        Me.tablerootshape = CType(MyBase.Tables("rootshape"),rootshapeDataTable)
        If (initTable = true) Then
            If (Not (Me.tablerootshape) Is Nothing) Then
                Me.tablerootshape.InitVars
            End If
        End If
        Me.tablerootshapegroup = CType(MyBase.Tables("rootshapegroup"),rootshapegroupDataTable)
        If (initTable = true) Then
            If (Not (Me.tablerootshapegroup) Is Nothing) Then
                Me.tablerootshapegroup.InitVars
            End If
        End If
        Me.tablerootshapequick = CType(MyBase.Tables("rootshapequick"),rootshapequickDataTable)
        If (initTable = true) Then
            If (Not (Me.tablerootshapequick) Is Nothing) Then
                Me.tablerootshapequick.InitVars
            End If
        End If
        Me.tablesymbol = CType(MyBase.Tables("symbol"),symbolDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesymbol) Is Nothing) Then
                Me.tablesymbol.InitVars
            End If
        End If
        Me.tablesymbolgroup = CType(MyBase.Tables("symbolgroup"),symbolgroupDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesymbolgroup) Is Nothing) Then
                Me.tablesymbolgroup.InitVars
            End If
        End If
        Me.tablethumbposition = CType(MyBase.Tables("thumbposition"),thumbpositionDataTable)
        If (initTable = true) Then
            If (Not (Me.tablethumbposition) Is Nothing) Then
                Me.tablethumbposition.InitVars
            End If
        End If
        Me.tableversion = CType(MyBase.Tables("version"),versionDataTable)
        If (initTable = true) Then
            If (Not (Me.tableversion) Is Nothing) Then
                Me.tableversion.InitVars
            End If
        End If
        Me.tablecache = CType(MyBase.Tables("cache"),cacheDataTable)
        If (initTable = true) Then
            If (Not (Me.tablecache) Is Nothing) Then
                Me.tablecache.InitVars
            End If
        End If
        Me.relationFK_basesymbol_0 = Me.Relations("FK_basesymbol_0")
        Me.relationFK_basesymbol_1 = Me.Relations("FK_basesymbol_1")
        Me.relationFK_classification_0 = Me.Relations("FK_classification_0")
        Me.relationFK_classification_1 = Me.Relations("FK_classification_1")
        Me.relationFK_classification_2 = Me.Relations("FK_classification_2")
        Me.relationFK_classification_3 = Me.Relations("FK_classification_3")
        Me.relationFK_classification_4 = Me.Relations("FK_classification_4")
        Me.relationFK_classification_5 = Me.Relations("FK_classification_5")
        Me.relationFK_classification_6 = Me.Relations("FK_classification_6")
        Me.relationFK_symbol_0 = Me.Relations("FK_symbol_0")
        Me.relationFK_symbol_1 = Me.Relations("FK_symbol_1")
        Me.relationFK_symbolgroup_0 = Me.Relations("FK_symbolgroup_0")
        Me.relationFK_symbolgroup_1 = Me.Relations("FK_symbolgroup_1")
        Me.relationFK_basesymbol_11 = Me.Relations("FK_basesymbol_11")
        Me.relationFK_symbolgroup_01 = Me.Relations("FK_symbolgroup_01")
        Me.relationFK_basesymbol_12 = Me.Relations("FK_basesymbol_12")
        Me.relationFK_symbolgroup_11 = Me.Relations("FK_symbolgroup_11")
        Me.relationFK_basesymbol_13 = Me.Relations("FK_basesymbol_13")
        Me.relationFK_basesymbol_14 = Me.Relations("FK_basesymbol_14")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "ISWA2010DataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DataSet1.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableactionfinger = New actionfingerDataTable()
        MyBase.Tables.Add(Me.tableactionfinger)
        Me.tablebasesymbol = New basesymbolDataTable()
        MyBase.Tables.Add(Me.tablebasesymbol)
        Me.tablebasesymbol1 = New basesymbol1DataTable()
        MyBase.Tables.Add(Me.tablebasesymbol1)
        Me.tablecategory = New categoryDataTable()
        MyBase.Tables.Add(Me.tablecategory)
        Me.tableclassification = New classificationDataTable()
        MyBase.Tables.Add(Me.tableclassification)
        Me.tablegroup = New groupDataTable()
        MyBase.Tables.Add(Me.tablegroup)
        Me.tablemultiplefinger = New multiplefingerDataTable()
        MyBase.Tables.Add(Me.tablemultiplefinger)
        Me.tablerootshape = New rootshapeDataTable()
        MyBase.Tables.Add(Me.tablerootshape)
        Me.tablerootshapegroup = New rootshapegroupDataTable()
        MyBase.Tables.Add(Me.tablerootshapegroup)
        Me.tablerootshapequick = New rootshapequickDataTable()
        MyBase.Tables.Add(Me.tablerootshapequick)
        Me.tablesymbol = New symbolDataTable()
        MyBase.Tables.Add(Me.tablesymbol)
        Me.tablesymbolgroup = New symbolgroupDataTable()
        MyBase.Tables.Add(Me.tablesymbolgroup)
        Me.tablethumbposition = New thumbpositionDataTable()
        MyBase.Tables.Add(Me.tablethumbposition)
        Me.tableversion = New versionDataTable()
        MyBase.Tables.Add(Me.tableversion)
        Me.tablecache = New cacheDataTable()
        MyBase.Tables.Add(Me.tablecache)
        Me.relationFK_basesymbol_0 = New Global.System.Data.DataRelation("FK_basesymbol_0", New Global.System.Data.DataColumn() {Me.tablesymbolgroup.sg_codeColumn}, New Global.System.Data.DataColumn() {Me.tablebasesymbol.bs_sg_codeColumn}, false)
        Me.Relations.Add(Me.relationFK_basesymbol_0)
        Me.relationFK_basesymbol_1 = New Global.System.Data.DataRelation("FK_basesymbol_1", New Global.System.Data.DataColumn() {Me.tablesymbol.sym_codeColumn}, New Global.System.Data.DataColumn() {Me.tablebasesymbol.bs_sym_codeColumn}, false)
        Me.Relations.Add(Me.relationFK_basesymbol_1)
        Me.relationFK_classification_0 = New Global.System.Data.DataRelation("FK_classification_0", New Global.System.Data.DataColumn() {Me.tablethumbposition.IDThumbPositionColumn}, New Global.System.Data.DataColumn() {Me.tableclassification.IDThumbPositionColumn}, false)
        Me.Relations.Add(Me.relationFK_classification_0)
        Me.relationFK_classification_1 = New Global.System.Data.DataRelation("FK_classification_1", New Global.System.Data.DataColumn() {Me.tablemultiplefinger.IDMultipleFingerColumn}, New Global.System.Data.DataColumn() {Me.tableclassification.IDMultipleFingerColumn}, false)
        Me.Relations.Add(Me.relationFK_classification_1)
        Me.relationFK_classification_2 = New Global.System.Data.DataRelation("FK_classification_2", New Global.System.Data.DataColumn() {Me.tableactionfinger.IDActionFingerColumn}, New Global.System.Data.DataColumn() {Me.tableclassification.IDActionFingerColumn}, false)
        Me.Relations.Add(Me.relationFK_classification_2)
        Me.relationFK_classification_3 = New Global.System.Data.DataRelation("FK_classification_3", New Global.System.Data.DataColumn() {Me.tablerootshapequick.IDRootshapeQuickColumn}, New Global.System.Data.DataColumn() {Me.tableclassification.IDRootShapeQuickColumn}, false)
        Me.Relations.Add(Me.relationFK_classification_3)
        Me.relationFK_classification_4 = New Global.System.Data.DataRelation("FK_classification_4", New Global.System.Data.DataColumn() {Me.tablerootshape.IDRootshapeColumn}, New Global.System.Data.DataColumn() {Me.tableclassification.IDRootShapeColumn}, false)
        Me.Relations.Add(Me.relationFK_classification_4)
        Me.relationFK_classification_5 = New Global.System.Data.DataRelation("FK_classification_5", New Global.System.Data.DataColumn() {Me.tablerootshapegroup.IDRootshapeGroupColumn}, New Global.System.Data.DataColumn() {Me.tableclassification.IDRootShapeGroupColumn}, false)
        Me.Relations.Add(Me.relationFK_classification_5)
        Me.relationFK_classification_6 = New Global.System.Data.DataRelation("FK_classification_6", New Global.System.Data.DataColumn() {Me.tablebasesymbol.bs_codeColumn}, New Global.System.Data.DataColumn() {Me.tableclassification.class_bs_codeColumn}, false)
        Me.Relations.Add(Me.relationFK_classification_6)
        Me.relationFK_symbol_0 = New Global.System.Data.DataRelation("FK_symbol_0", New Global.System.Data.DataColumn() {Me.tablebasesymbol.bs_codeColumn}, New Global.System.Data.DataColumn() {Me.tablesymbol.sym_bs_codeColumn}, false)
        Me.Relations.Add(Me.relationFK_symbol_0)
        Me.relationFK_symbol_1 = New Global.System.Data.DataRelation("FK_symbol_1", New Global.System.Data.DataColumn() {Me.tablesymbolgroup.sg_codeColumn}, New Global.System.Data.DataColumn() {Me.tablesymbol.sym_sg_codeColumn}, false)
        Me.Relations.Add(Me.relationFK_symbol_1)
        Me.relationFK_symbolgroup_0 = New Global.System.Data.DataRelation("FK_symbolgroup_0", New Global.System.Data.DataColumn() {Me.tablesymbol.sym_codeColumn}, New Global.System.Data.DataColumn() {Me.tablesymbolgroup.sg_sym_codeColumn}, false)
        Me.Relations.Add(Me.relationFK_symbolgroup_0)
        Me.relationFK_symbolgroup_1 = New Global.System.Data.DataRelation("FK_symbolgroup_1", New Global.System.Data.DataColumn() {Me.tablecategory.IDCategoryColumn}, New Global.System.Data.DataColumn() {Me.tablesymbolgroup.sg_cat_numColumn}, false)
        Me.Relations.Add(Me.relationFK_symbolgroup_1)
        Me.relationFK_basesymbol_11 = New Global.System.Data.DataRelation("FK_basesymbol_11", New Global.System.Data.DataColumn() {Me.tablecache.sym_codeColumn}, New Global.System.Data.DataColumn() {Me.tablebasesymbol.bs_sym_codeColumn}, false)
        Me.Relations.Add(Me.relationFK_basesymbol_11)
        Me.relationFK_symbolgroup_01 = New Global.System.Data.DataRelation("FK_symbolgroup_01", New Global.System.Data.DataColumn() {Me.tablecache.sym_codeColumn}, New Global.System.Data.DataColumn() {Me.tablesymbolgroup.sg_sym_codeColumn}, false)
        Me.Relations.Add(Me.relationFK_symbolgroup_01)
        Me.relationFK_basesymbol_12 = New Global.System.Data.DataRelation("FK_basesymbol_12", New Global.System.Data.DataColumn() {Me.tablesymbol.sym_codeColumn}, New Global.System.Data.DataColumn() {Me.tablecache.bs_sym_codeColumn}, false)
        Me.Relations.Add(Me.relationFK_basesymbol_12)
        Me.relationFK_symbolgroup_11 = New Global.System.Data.DataRelation("FK_symbolgroup_11", New Global.System.Data.DataColumn() {Me.tablecategory.IDCategoryColumn}, New Global.System.Data.DataColumn() {Me.tablecache.sg_cat_numColumn}, false)
        Me.Relations.Add(Me.relationFK_symbolgroup_11)
        Me.relationFK_basesymbol_13 = New Global.System.Data.DataRelation("FK_basesymbol_13", New Global.System.Data.DataColumn() {Me.tablesymbol.sym_bs_codeColumn}, New Global.System.Data.DataColumn() {Me.tablecache.bs_sym_codeColumn}, false)
        Me.Relations.Add(Me.relationFK_basesymbol_13)
        Me.relationFK_basesymbol_14 = New Global.System.Data.DataRelation("FK_basesymbol_14", New Global.System.Data.DataColumn() {Me.tablesymbol.sym_bs_codeColumn}, New Global.System.Data.DataColumn() {Me.tablebasesymbol.bs_sym_codeColumn}, false)
        Me.Relations.Add(Me.relationFK_basesymbol_14)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeactionfinger() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializebasesymbol() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializebasesymbol1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializecategory() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeclassification() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializegroup() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializemultiplefinger() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializerootshape() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializerootshapegroup() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializerootshapequick() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializesymbol() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializesymbolgroup() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializethumbposition() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeversion() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializecache() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As ISWA2010DataSet = New ISWA2010DataSet()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub actionfingerRowChangeEventHandler(ByVal sender As Object, ByVal e As actionfingerRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub basesymbolRowChangeEventHandler(ByVal sender As Object, ByVal e As basesymbolRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub basesymbol1RowChangeEventHandler(ByVal sender As Object, ByVal e As basesymbol1RowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub categoryRowChangeEventHandler(ByVal sender As Object, ByVal e As categoryRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub classificationRowChangeEventHandler(ByVal sender As Object, ByVal e As classificationRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub groupRowChangeEventHandler(ByVal sender As Object, ByVal e As groupRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub multiplefingerRowChangeEventHandler(ByVal sender As Object, ByVal e As multiplefingerRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub rootshapeRowChangeEventHandler(ByVal sender As Object, ByVal e As rootshapeRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub rootshapegroupRowChangeEventHandler(ByVal sender As Object, ByVal e As rootshapegroupRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub rootshapequickRowChangeEventHandler(ByVal sender As Object, ByVal e As rootshapequickRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub symbolRowChangeEventHandler(ByVal sender As Object, ByVal e As symbolRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub symbolgroupRowChangeEventHandler(ByVal sender As Object, ByVal e As symbolgroupRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub thumbpositionRowChangeEventHandler(ByVal sender As Object, ByVal e As thumbpositionRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub versionRowChangeEventHandler(ByVal sender As Object, ByVal e As versionRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub cacheRowChangeEventHandler(ByVal sender As Object, ByVal e As cacheRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class actionfingerDataTable
        Inherits Global.System.Data.TypedTableBase(Of actionfingerRow)
        
        Private columnIDActionFinger As Global.System.Data.DataColumn
        
        Private columnActionFingerName As Global.System.Data.DataColumn
        
        Private columnIDUIItem As Global.System.Data.DataColumn
        
        Private columnOrder As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "actionfinger"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDActionFingerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDActionFinger
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ActionFingerNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnActionFingerName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDUIItemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDUIItem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property OrderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrder
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As actionfingerRow
            Get
                Return CType(Me.Rows(index),actionfingerRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event actionfingerRowChanging As actionfingerRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event actionfingerRowChanged As actionfingerRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event actionfingerRowDeleting As actionfingerRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event actionfingerRowDeleted As actionfingerRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddactionfingerRow(ByVal row As actionfingerRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddactionfingerRow(ByVal IDActionFinger As Integer, ByVal ActionFingerName As String, ByVal IDUIItem As Integer, ByVal Order As Integer) As actionfingerRow
            Dim rowactionfingerRow As actionfingerRow = CType(Me.NewRow,actionfingerRow)
            Dim columnValuesArray() As Object = New Object() {IDActionFinger, ActionFingerName, IDUIItem, Order}
            rowactionfingerRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowactionfingerRow)
            Return rowactionfingerRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByIDActionFinger(ByVal IDActionFinger As Integer) As actionfingerRow
            Return CType(Me.Rows.Find(New Object() {IDActionFinger}),actionfingerRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As actionfingerDataTable = CType(MyBase.Clone,actionfingerDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New actionfingerDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnIDActionFinger = MyBase.Columns("IDActionFinger")
            Me.columnActionFingerName = MyBase.Columns("ActionFingerName")
            Me.columnIDUIItem = MyBase.Columns("IDUIItem")
            Me.columnOrder = MyBase.Columns("Order")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnIDActionFinger = New Global.System.Data.DataColumn("IDActionFinger", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDActionFinger)
            Me.columnActionFingerName = New Global.System.Data.DataColumn("ActionFingerName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnActionFingerName)
            Me.columnIDUIItem = New Global.System.Data.DataColumn("IDUIItem", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDUIItem)
            Me.columnOrder = New Global.System.Data.DataColumn("Order", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrder)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIDActionFinger}, true))
            Me.columnIDActionFinger.AllowDBNull = false
            Me.columnIDActionFinger.Unique = true
            Me.columnActionFingerName.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewactionfingerRow() As actionfingerRow
            Return CType(Me.NewRow,actionfingerRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New actionfingerRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(actionfingerRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.actionfingerRowChangedEvent) Is Nothing) Then
                RaiseEvent actionfingerRowChanged(Me, New actionfingerRowChangeEvent(CType(e.Row,actionfingerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.actionfingerRowChangingEvent) Is Nothing) Then
                RaiseEvent actionfingerRowChanging(Me, New actionfingerRowChangeEvent(CType(e.Row,actionfingerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.actionfingerRowDeletedEvent) Is Nothing) Then
                RaiseEvent actionfingerRowDeleted(Me, New actionfingerRowChangeEvent(CType(e.Row,actionfingerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.actionfingerRowDeletingEvent) Is Nothing) Then
                RaiseEvent actionfingerRowDeleting(Me, New actionfingerRowChangeEvent(CType(e.Row,actionfingerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveactionfingerRow(ByVal row As actionfingerRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As ISWA2010DataSet = New ISWA2010DataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "actionfingerDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class basesymbolDataTable
        Inherits Global.System.Data.TypedTableBase(Of basesymbolRow)
        
        Private columnbs_code As Global.System.Data.DataColumn
        
        Private columnbs_sym_code As Global.System.Data.DataColumn
        
        Private columnbs_sg_code As Global.System.Data.DataColumn
        
        Private columnbs_num As Global.System.Data.DataColumn
        
        Private columnbs_bas_num As Global.System.Data.DataColumn
        
        Private columnbs_var_num As Global.System.Data.DataColumn
        
        Private columnbs_vars As Global.System.Data.DataColumn
        
        Private columnbs_fills As Global.System.Data.DataColumn
        
        Private columnbs_rots As Global.System.Data.DataColumn
        
        Private columnbs_name As Global.System.Data.DataColumn
        
        Private columnUseArrowChooser As Global.System.Data.DataColumn
        
        Private columnShowWallPlane As Global.System.Data.DataColumn
        
        Private columnShowWallPlaneImage As Global.System.Data.DataColumn
        
        Private columnShowFloorPlane As Global.System.Data.DataColumn
        
        Private columnShowFloorPlaneImage As Global.System.Data.DataColumn
        
        Private columnShowFlip As Global.System.Data.DataColumn
        
        Private columnShowVP3VP7 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "basesymbol"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bs_codeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbs_code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bs_sym_codeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbs_sym_code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bs_sg_codeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbs_sg_code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bs_numColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbs_num
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bs_bas_numColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbs_bas_num
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bs_var_numColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbs_var_num
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bs_varsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbs_vars
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bs_fillsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbs_fills
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bs_rotsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbs_rots
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bs_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbs_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property UseArrowChooserColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUseArrowChooser
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ShowWallPlaneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShowWallPlane
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ShowWallPlaneImageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShowWallPlaneImage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ShowFloorPlaneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShowFloorPlane
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ShowFloorPlaneImageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShowFloorPlaneImage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ShowFlipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShowFlip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ShowVP3VP7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnShowVP3VP7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As basesymbolRow
            Get
                Return CType(Me.Rows(index),basesymbolRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event basesymbolRowChanging As basesymbolRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event basesymbolRowChanged As basesymbolRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event basesymbolRowDeleting As basesymbolRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event basesymbolRowDeleted As basesymbolRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddbasesymbolRow(ByVal row As basesymbolRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddbasesymbolRow( _
                    ByVal bs_code As Integer,  _
                    ByVal parentsymbolRowByFK_basesymbol_1 As symbolRow,  _
                    ByVal parentsymbolgroupRowByFK_basesymbol_0 As symbolgroupRow,  _
                    ByVal bs_num As Integer,  _
                    ByVal bs_bas_num As Integer,  _
                    ByVal bs_var_num As Integer,  _
                    ByVal bs_vars As Integer,  _
                    ByVal bs_fills As Integer,  _
                    ByVal bs_rots As Integer,  _
                    ByVal bs_name As String,  _
                    ByVal UseArrowChooser As Boolean,  _
                    ByVal ShowWallPlane As Boolean,  _
                    ByVal ShowWallPlaneImage As Boolean,  _
                    ByVal ShowFloorPlane As Boolean,  _
                    ByVal ShowFloorPlaneImage As Boolean,  _
                    ByVal ShowFlip As Boolean,  _
                    ByVal ShowVP3VP7 As Boolean) As basesymbolRow
            Dim rowbasesymbolRow As basesymbolRow = CType(Me.NewRow,basesymbolRow)
            Dim columnValuesArray() As Object = New Object() {bs_code, Nothing, Nothing, bs_num, bs_bas_num, bs_var_num, bs_vars, bs_fills, bs_rots, bs_name, UseArrowChooser, ShowWallPlane, ShowWallPlaneImage, ShowFloorPlane, ShowFloorPlaneImage, ShowFlip, ShowVP3VP7}
            If (Not (parentsymbolRowByFK_basesymbol_1) Is Nothing) Then
                columnValuesArray(1) = parentsymbolRowByFK_basesymbol_1(0)
            End If
            If (Not (parentsymbolgroupRowByFK_basesymbol_0) Is Nothing) Then
                columnValuesArray(2) = parentsymbolgroupRowByFK_basesymbol_0(0)
            End If
            rowbasesymbolRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowbasesymbolRow)
            Return rowbasesymbolRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindBybs_code(ByVal bs_code As Integer) As basesymbolRow
            Return CType(Me.Rows.Find(New Object() {bs_code}),basesymbolRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As basesymbolDataTable = CType(MyBase.Clone,basesymbolDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New basesymbolDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnbs_code = MyBase.Columns("bs_code")
            Me.columnbs_sym_code = MyBase.Columns("bs_sym_code")
            Me.columnbs_sg_code = MyBase.Columns("bs_sg_code")
            Me.columnbs_num = MyBase.Columns("bs_num")
            Me.columnbs_bas_num = MyBase.Columns("bs_bas_num")
            Me.columnbs_var_num = MyBase.Columns("bs_var_num")
            Me.columnbs_vars = MyBase.Columns("bs_vars")
            Me.columnbs_fills = MyBase.Columns("bs_fills")
            Me.columnbs_rots = MyBase.Columns("bs_rots")
            Me.columnbs_name = MyBase.Columns("bs_name")
            Me.columnUseArrowChooser = MyBase.Columns("UseArrowChooser")
            Me.columnShowWallPlane = MyBase.Columns("ShowWallPlane")
            Me.columnShowWallPlaneImage = MyBase.Columns("ShowWallPlaneImage")
            Me.columnShowFloorPlane = MyBase.Columns("ShowFloorPlane")
            Me.columnShowFloorPlaneImage = MyBase.Columns("ShowFloorPlaneImage")
            Me.columnShowFlip = MyBase.Columns("ShowFlip")
            Me.columnShowVP3VP7 = MyBase.Columns("ShowVP3VP7")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnbs_code = New Global.System.Data.DataColumn("bs_code", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbs_code)
            Me.columnbs_sym_code = New Global.System.Data.DataColumn("bs_sym_code", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbs_sym_code)
            Me.columnbs_sg_code = New Global.System.Data.DataColumn("bs_sg_code", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbs_sg_code)
            Me.columnbs_num = New Global.System.Data.DataColumn("bs_num", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbs_num)
            Me.columnbs_bas_num = New Global.System.Data.DataColumn("bs_bas_num", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbs_bas_num)
            Me.columnbs_var_num = New Global.System.Data.DataColumn("bs_var_num", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbs_var_num)
            Me.columnbs_vars = New Global.System.Data.DataColumn("bs_vars", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbs_vars)
            Me.columnbs_fills = New Global.System.Data.DataColumn("bs_fills", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbs_fills)
            Me.columnbs_rots = New Global.System.Data.DataColumn("bs_rots", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbs_rots)
            Me.columnbs_name = New Global.System.Data.DataColumn("bs_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbs_name)
            Me.columnUseArrowChooser = New Global.System.Data.DataColumn("UseArrowChooser", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUseArrowChooser)
            Me.columnShowWallPlane = New Global.System.Data.DataColumn("ShowWallPlane", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShowWallPlane)
            Me.columnShowWallPlaneImage = New Global.System.Data.DataColumn("ShowWallPlaneImage", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShowWallPlaneImage)
            Me.columnShowFloorPlane = New Global.System.Data.DataColumn("ShowFloorPlane", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShowFloorPlane)
            Me.columnShowFloorPlaneImage = New Global.System.Data.DataColumn("ShowFloorPlaneImage", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShowFloorPlaneImage)
            Me.columnShowFlip = New Global.System.Data.DataColumn("ShowFlip", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShowFlip)
            Me.columnShowVP3VP7 = New Global.System.Data.DataColumn("ShowVP3VP7", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShowVP3VP7)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnbs_code}, true))
            Me.columnbs_code.AllowDBNull = false
            Me.columnbs_code.Unique = true
            Me.columnbs_name.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewbasesymbolRow() As basesymbolRow
            Return CType(Me.NewRow,basesymbolRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New basesymbolRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(basesymbolRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.basesymbolRowChangedEvent) Is Nothing) Then
                RaiseEvent basesymbolRowChanged(Me, New basesymbolRowChangeEvent(CType(e.Row,basesymbolRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.basesymbolRowChangingEvent) Is Nothing) Then
                RaiseEvent basesymbolRowChanging(Me, New basesymbolRowChangeEvent(CType(e.Row,basesymbolRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.basesymbolRowDeletedEvent) Is Nothing) Then
                RaiseEvent basesymbolRowDeleted(Me, New basesymbolRowChangeEvent(CType(e.Row,basesymbolRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.basesymbolRowDeletingEvent) Is Nothing) Then
                RaiseEvent basesymbolRowDeleting(Me, New basesymbolRowChangeEvent(CType(e.Row,basesymbolRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovebasesymbolRow(ByVal row As basesymbolRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As ISWA2010DataSet = New ISWA2010DataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "basesymbolDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class basesymbol1DataTable
        Inherits Global.System.Data.TypedTableBase(Of basesymbol1Row)
        
        Private columnIDBaseSymbol As Global.System.Data.DataColumn
        
        Private columnIDISWAGroup As Global.System.Data.DataColumn
        
        Private columnBaseName As Global.System.Data.DataColumn
        
        Private columnCharacter_Code As Global.System.Data.DataColumn
        
        Private columnBaseSymbol As Global.System.Data.DataColumn
        
        Private columnVariations As Global.System.Data.DataColumn
        
        Private columnValid_Fills As Global.System.Data.DataColumn
        
        Private columnValid_Rotations As Global.System.Data.DataColumn
        
        Private columnIDUIItem As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "basesymbol1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDBaseSymbolColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDBaseSymbol
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDISWAGroupColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDISWAGroup
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BaseNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBaseName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Character_CodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCharacter_Code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BaseSymbolColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBaseSymbol
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property VariationsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVariations
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Valid_FillsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnValid_Fills
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Valid_RotationsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnValid_Rotations
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDUIItemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDUIItem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As basesymbol1Row
            Get
                Return CType(Me.Rows(index),basesymbol1Row)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event basesymbol1RowChanging As basesymbol1RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event basesymbol1RowChanged As basesymbol1RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event basesymbol1RowDeleting As basesymbol1RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event basesymbol1RowDeleted As basesymbol1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Addbasesymbol1Row(ByVal row As basesymbol1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Addbasesymbol1Row(ByVal IDBaseSymbol As Long, ByVal IDISWAGroup As Integer, ByVal BaseName As String, ByVal Character_Code As Integer, ByVal BaseSymbol As String, ByVal Variations As String, ByVal Valid_Fills As String, ByVal Valid_Rotations As String, ByVal IDUIItem As Integer) As basesymbol1Row
            Dim rowbasesymbol1Row As basesymbol1Row = CType(Me.NewRow,basesymbol1Row)
            Dim columnValuesArray() As Object = New Object() {IDBaseSymbol, IDISWAGroup, BaseName, Character_Code, BaseSymbol, Variations, Valid_Fills, Valid_Rotations, IDUIItem}
            rowbasesymbol1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowbasesymbol1Row)
            Return rowbasesymbol1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByIDBaseSymbol(ByVal IDBaseSymbol As Long) As basesymbol1Row
            Return CType(Me.Rows.Find(New Object() {IDBaseSymbol}),basesymbol1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As basesymbol1DataTable = CType(MyBase.Clone,basesymbol1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New basesymbol1DataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnIDBaseSymbol = MyBase.Columns("IDBaseSymbol")
            Me.columnIDISWAGroup = MyBase.Columns("IDISWAGroup")
            Me.columnBaseName = MyBase.Columns("BaseName")
            Me.columnCharacter_Code = MyBase.Columns("Character Code")
            Me.columnBaseSymbol = MyBase.Columns("BaseSymbol")
            Me.columnVariations = MyBase.Columns("Variations")
            Me.columnValid_Fills = MyBase.Columns("Valid Fills")
            Me.columnValid_Rotations = MyBase.Columns("Valid Rotations")
            Me.columnIDUIItem = MyBase.Columns("IDUIItem")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnIDBaseSymbol = New Global.System.Data.DataColumn("IDBaseSymbol", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDBaseSymbol)
            Me.columnIDISWAGroup = New Global.System.Data.DataColumn("IDISWAGroup", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDISWAGroup)
            Me.columnBaseName = New Global.System.Data.DataColumn("BaseName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBaseName)
            Me.columnCharacter_Code = New Global.System.Data.DataColumn("Character Code", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCharacter_Code)
            Me.columnBaseSymbol = New Global.System.Data.DataColumn("BaseSymbol", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBaseSymbol)
            Me.columnVariations = New Global.System.Data.DataColumn("Variations", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVariations)
            Me.columnValid_Fills = New Global.System.Data.DataColumn("Valid Fills", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValid_Fills)
            Me.columnValid_Rotations = New Global.System.Data.DataColumn("Valid Rotations", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValid_Rotations)
            Me.columnIDUIItem = New Global.System.Data.DataColumn("IDUIItem", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDUIItem)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIDBaseSymbol}, true))
            Me.columnIDBaseSymbol.AllowDBNull = false
            Me.columnIDBaseSymbol.Unique = true
            Me.columnBaseName.MaxLength = 2147483647
            Me.columnBaseSymbol.MaxLength = 2147483647
            Me.columnVariations.MaxLength = 2147483647
            Me.columnValid_Fills.MaxLength = 2147483647
            Me.columnValid_Rotations.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Newbasesymbol1Row() As basesymbol1Row
            Return CType(Me.NewRow,basesymbol1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New basesymbol1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(basesymbol1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.basesymbol1RowChangedEvent) Is Nothing) Then
                RaiseEvent basesymbol1RowChanged(Me, New basesymbol1RowChangeEvent(CType(e.Row,basesymbol1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.basesymbol1RowChangingEvent) Is Nothing) Then
                RaiseEvent basesymbol1RowChanging(Me, New basesymbol1RowChangeEvent(CType(e.Row,basesymbol1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.basesymbol1RowDeletedEvent) Is Nothing) Then
                RaiseEvent basesymbol1RowDeleted(Me, New basesymbol1RowChangeEvent(CType(e.Row,basesymbol1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.basesymbol1RowDeletingEvent) Is Nothing) Then
                RaiseEvent basesymbol1RowDeleting(Me, New basesymbol1RowChangeEvent(CType(e.Row,basesymbol1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Removebasesymbol1Row(ByVal row As basesymbol1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As ISWA2010DataSet = New ISWA2010DataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "basesymbol1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class categoryDataTable
        Inherits Global.System.Data.TypedTableBase(Of categoryRow)
        
        Private columnIDCategory As Global.System.Data.DataColumn
        
        Private columnCategoryName As Global.System.Data.DataColumn
        
        Private columnIDUIItem As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "category"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDCategoryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDCategory
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CategoryNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCategoryName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDUIItemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDUIItem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As categoryRow
            Get
                Return CType(Me.Rows(index),categoryRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event categoryRowChanging As categoryRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event categoryRowChanged As categoryRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event categoryRowDeleting As categoryRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event categoryRowDeleted As categoryRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddcategoryRow(ByVal row As categoryRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddcategoryRow(ByVal IDCategory As Integer, ByVal CategoryName As String, ByVal IDUIItem As Integer) As categoryRow
            Dim rowcategoryRow As categoryRow = CType(Me.NewRow,categoryRow)
            Dim columnValuesArray() As Object = New Object() {IDCategory, CategoryName, IDUIItem}
            rowcategoryRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowcategoryRow)
            Return rowcategoryRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByIDCategory(ByVal IDCategory As Integer) As categoryRow
            Return CType(Me.Rows.Find(New Object() {IDCategory}),categoryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As categoryDataTable = CType(MyBase.Clone,categoryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New categoryDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnIDCategory = MyBase.Columns("IDCategory")
            Me.columnCategoryName = MyBase.Columns("CategoryName")
            Me.columnIDUIItem = MyBase.Columns("IDUIItem")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnIDCategory = New Global.System.Data.DataColumn("IDCategory", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDCategory)
            Me.columnCategoryName = New Global.System.Data.DataColumn("CategoryName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCategoryName)
            Me.columnIDUIItem = New Global.System.Data.DataColumn("IDUIItem", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDUIItem)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIDCategory}, true))
            Me.columnIDCategory.AllowDBNull = false
            Me.columnIDCategory.Unique = true
            Me.columnCategoryName.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewcategoryRow() As categoryRow
            Return CType(Me.NewRow,categoryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New categoryRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(categoryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.categoryRowChangedEvent) Is Nothing) Then
                RaiseEvent categoryRowChanged(Me, New categoryRowChangeEvent(CType(e.Row,categoryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.categoryRowChangingEvent) Is Nothing) Then
                RaiseEvent categoryRowChanging(Me, New categoryRowChangeEvent(CType(e.Row,categoryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.categoryRowDeletedEvent) Is Nothing) Then
                RaiseEvent categoryRowDeleted(Me, New categoryRowChangeEvent(CType(e.Row,categoryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.categoryRowDeletingEvent) Is Nothing) Then
                RaiseEvent categoryRowDeleting(Me, New categoryRowChangeEvent(CType(e.Row,categoryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovecategoryRow(ByVal row As categoryRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As ISWA2010DataSet = New ISWA2010DataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "categoryDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class classificationDataTable
        Inherits Global.System.Data.TypedTableBase(Of classificationRow)
        
        Private columnclass_code As Global.System.Data.DataColumn
        
        Private columnclass_bs_code As Global.System.Data.DataColumn
        
        Private columnIDRootShapeGroup As Global.System.Data.DataColumn
        
        Private columnIDRootShape As Global.System.Data.DataColumn
        
        Private columnIDRootShapeQuick As Global.System.Data.DataColumn
        
        Private columnIDActionFinger As Global.System.Data.DataColumn
        
        Private columnIDMultipleFinger As Global.System.Data.DataColumn
        
        Private columnIDThumbPosition As Global.System.Data.DataColumn
        
        Private columnThumb As Global.System.Data.DataColumn
        
        Private columnIndex As Global.System.Data.DataColumn
        
        Private columnMiddle As Global.System.Data.DataColumn
        
        Private columnRing As Global.System.Data.DataColumn
        
        Private columnBaby As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "classification"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property class_codeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnclass_code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property class_bs_codeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnclass_bs_code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDRootShapeGroupColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDRootShapeGroup
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDRootShapeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDRootShape
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDRootShapeQuickColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDRootShapeQuick
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDActionFingerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDActionFinger
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDMultipleFingerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDMultipleFinger
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDThumbPositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDThumbPosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ThumbColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnThumb
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MiddleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMiddle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RingColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRing
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BabyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBaby
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As classificationRow
            Get
                Return CType(Me.Rows(index),classificationRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event classificationRowChanging As classificationRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event classificationRowChanged As classificationRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event classificationRowDeleting As classificationRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event classificationRowDeleted As classificationRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddclassificationRow(ByVal row As classificationRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddclassificationRow(ByVal class_code As Integer, ByVal parentbasesymbolRowByFK_classification_6 As basesymbolRow, ByVal parentrootshapegroupRowByFK_classification_5 As rootshapegroupRow, ByVal parentrootshapeRowByFK_classification_4 As rootshapeRow, ByVal parentrootshapequickRowByFK_classification_3 As rootshapequickRow, ByVal parentactionfingerRowByFK_classification_2 As actionfingerRow, ByVal parentmultiplefingerRowByFK_classification_1 As multiplefingerRow, ByVal parentthumbpositionRowByFK_classification_0 As thumbpositionRow, ByVal Thumb As Boolean, ByVal Index As Boolean, ByVal Middle As Boolean, ByVal Ring As Boolean, ByVal Baby As Boolean) As classificationRow
            Dim rowclassificationRow As classificationRow = CType(Me.NewRow,classificationRow)
            Dim columnValuesArray() As Object = New Object() {class_code, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Thumb, Index, Middle, Ring, Baby}
            If (Not (parentbasesymbolRowByFK_classification_6) Is Nothing) Then
                columnValuesArray(1) = parentbasesymbolRowByFK_classification_6(0)
            End If
            If (Not (parentrootshapegroupRowByFK_classification_5) Is Nothing) Then
                columnValuesArray(2) = parentrootshapegroupRowByFK_classification_5(0)
            End If
            If (Not (parentrootshapeRowByFK_classification_4) Is Nothing) Then
                columnValuesArray(3) = parentrootshapeRowByFK_classification_4(0)
            End If
            If (Not (parentrootshapequickRowByFK_classification_3) Is Nothing) Then
                columnValuesArray(4) = parentrootshapequickRowByFK_classification_3(0)
            End If
            If (Not (parentactionfingerRowByFK_classification_2) Is Nothing) Then
                columnValuesArray(5) = parentactionfingerRowByFK_classification_2(0)
            End If
            If (Not (parentmultiplefingerRowByFK_classification_1) Is Nothing) Then
                columnValuesArray(6) = parentmultiplefingerRowByFK_classification_1(0)
            End If
            If (Not (parentthumbpositionRowByFK_classification_0) Is Nothing) Then
                columnValuesArray(7) = parentthumbpositionRowByFK_classification_0(0)
            End If
            rowclassificationRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowclassificationRow)
            Return rowclassificationRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByclass_code(ByVal class_code As Integer) As classificationRow
            Return CType(Me.Rows.Find(New Object() {class_code}),classificationRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As classificationDataTable = CType(MyBase.Clone,classificationDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New classificationDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnclass_code = MyBase.Columns("class_code")
            Me.columnclass_bs_code = MyBase.Columns("class_bs_code")
            Me.columnIDRootShapeGroup = MyBase.Columns("IDRootShapeGroup")
            Me.columnIDRootShape = MyBase.Columns("IDRootShape")
            Me.columnIDRootShapeQuick = MyBase.Columns("IDRootShapeQuick")
            Me.columnIDActionFinger = MyBase.Columns("IDActionFinger")
            Me.columnIDMultipleFinger = MyBase.Columns("IDMultipleFinger")
            Me.columnIDThumbPosition = MyBase.Columns("IDThumbPosition")
            Me.columnThumb = MyBase.Columns("Thumb")
            Me.columnIndex = MyBase.Columns("Index")
            Me.columnMiddle = MyBase.Columns("Middle")
            Me.columnRing = MyBase.Columns("Ring")
            Me.columnBaby = MyBase.Columns("Baby")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnclass_code = New Global.System.Data.DataColumn("class_code", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnclass_code)
            Me.columnclass_bs_code = New Global.System.Data.DataColumn("class_bs_code", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnclass_bs_code)
            Me.columnIDRootShapeGroup = New Global.System.Data.DataColumn("IDRootShapeGroup", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDRootShapeGroup)
            Me.columnIDRootShape = New Global.System.Data.DataColumn("IDRootShape", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDRootShape)
            Me.columnIDRootShapeQuick = New Global.System.Data.DataColumn("IDRootShapeQuick", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDRootShapeQuick)
            Me.columnIDActionFinger = New Global.System.Data.DataColumn("IDActionFinger", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDActionFinger)
            Me.columnIDMultipleFinger = New Global.System.Data.DataColumn("IDMultipleFinger", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDMultipleFinger)
            Me.columnIDThumbPosition = New Global.System.Data.DataColumn("IDThumbPosition", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDThumbPosition)
            Me.columnThumb = New Global.System.Data.DataColumn("Thumb", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnThumb)
            Me.columnIndex = New Global.System.Data.DataColumn("Index", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIndex)
            Me.columnMiddle = New Global.System.Data.DataColumn("Middle", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMiddle)
            Me.columnRing = New Global.System.Data.DataColumn("Ring", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRing)
            Me.columnBaby = New Global.System.Data.DataColumn("Baby", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBaby)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnclass_code}, true))
            Me.columnclass_code.AllowDBNull = false
            Me.columnclass_code.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewclassificationRow() As classificationRow
            Return CType(Me.NewRow,classificationRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New classificationRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(classificationRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.classificationRowChangedEvent) Is Nothing) Then
                RaiseEvent classificationRowChanged(Me, New classificationRowChangeEvent(CType(e.Row,classificationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.classificationRowChangingEvent) Is Nothing) Then
                RaiseEvent classificationRowChanging(Me, New classificationRowChangeEvent(CType(e.Row,classificationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.classificationRowDeletedEvent) Is Nothing) Then
                RaiseEvent classificationRowDeleted(Me, New classificationRowChangeEvent(CType(e.Row,classificationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.classificationRowDeletingEvent) Is Nothing) Then
                RaiseEvent classificationRowDeleting(Me, New classificationRowChangeEvent(CType(e.Row,classificationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveclassificationRow(ByVal row As classificationRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As ISWA2010DataSet = New ISWA2010DataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "classificationDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class groupDataTable
        Inherits Global.System.Data.TypedTableBase(Of groupRow)
        
        Private columnIDGroup As Global.System.Data.DataColumn
        
        Private columnIDISWACategory As Global.System.Data.DataColumn
        
        Private columnHex As Global.System.Data.DataColumn
        
        Private columnIDSymbol As Global.System.Data.DataColumn
        
        Private columnBaseSymbols As Global.System.Data.DataColumn
        
        Private columnStandardColor As Global.System.Data.DataColumn
        
        Private columnSSS As Global.System.Data.DataColumn
        
        Private columnCharacterCode As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "group"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDGroupColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDGroup
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDISWACategoryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDISWACategory
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property HexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDSymbolColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDSymbol
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BaseSymbolsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBaseSymbols
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property StandardColorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStandardColor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SSSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSSS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CharacterCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCharacterCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As groupRow
            Get
                Return CType(Me.Rows(index),groupRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event groupRowChanging As groupRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event groupRowChanged As groupRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event groupRowDeleting As groupRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event groupRowDeleted As groupRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddgroupRow(ByVal row As groupRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddgroupRow(ByVal IDGroup As Integer, ByVal IDISWACategory As Integer, ByVal Hex As String, ByVal IDSymbol As String, ByVal BaseSymbols As Integer, ByVal StandardColor As String, ByVal SSS As String, ByVal CharacterCode As Integer) As groupRow
            Dim rowgroupRow As groupRow = CType(Me.NewRow,groupRow)
            Dim columnValuesArray() As Object = New Object() {IDGroup, IDISWACategory, Hex, IDSymbol, BaseSymbols, StandardColor, SSS, CharacterCode}
            rowgroupRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowgroupRow)
            Return rowgroupRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByIDGroup(ByVal IDGroup As Integer) As groupRow
            Return CType(Me.Rows.Find(New Object() {IDGroup}),groupRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As groupDataTable = CType(MyBase.Clone,groupDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New groupDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnIDGroup = MyBase.Columns("IDGroup")
            Me.columnIDISWACategory = MyBase.Columns("IDISWACategory")
            Me.columnHex = MyBase.Columns("Hex")
            Me.columnIDSymbol = MyBase.Columns("IDSymbol")
            Me.columnBaseSymbols = MyBase.Columns("BaseSymbols")
            Me.columnStandardColor = MyBase.Columns("StandardColor")
            Me.columnSSS = MyBase.Columns("SSS")
            Me.columnCharacterCode = MyBase.Columns("CharacterCode")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnIDGroup = New Global.System.Data.DataColumn("IDGroup", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDGroup)
            Me.columnIDISWACategory = New Global.System.Data.DataColumn("IDISWACategory", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDISWACategory)
            Me.columnHex = New Global.System.Data.DataColumn("Hex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHex)
            Me.columnIDSymbol = New Global.System.Data.DataColumn("IDSymbol", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDSymbol)
            Me.columnBaseSymbols = New Global.System.Data.DataColumn("BaseSymbols", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBaseSymbols)
            Me.columnStandardColor = New Global.System.Data.DataColumn("StandardColor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStandardColor)
            Me.columnSSS = New Global.System.Data.DataColumn("SSS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSSS)
            Me.columnCharacterCode = New Global.System.Data.DataColumn("CharacterCode", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCharacterCode)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIDGroup}, true))
            Me.columnIDGroup.AllowDBNull = false
            Me.columnIDGroup.Unique = true
            Me.columnHex.MaxLength = 2147483647
            Me.columnIDSymbol.MaxLength = 2147483647
            Me.columnStandardColor.MaxLength = 2147483647
            Me.columnSSS.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewgroupRow() As groupRow
            Return CType(Me.NewRow,groupRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New groupRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(groupRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.groupRowChangedEvent) Is Nothing) Then
                RaiseEvent groupRowChanged(Me, New groupRowChangeEvent(CType(e.Row,groupRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.groupRowChangingEvent) Is Nothing) Then
                RaiseEvent groupRowChanging(Me, New groupRowChangeEvent(CType(e.Row,groupRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.groupRowDeletedEvent) Is Nothing) Then
                RaiseEvent groupRowDeleted(Me, New groupRowChangeEvent(CType(e.Row,groupRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.groupRowDeletingEvent) Is Nothing) Then
                RaiseEvent groupRowDeleting(Me, New groupRowChangeEvent(CType(e.Row,groupRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovegroupRow(ByVal row As groupRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As ISWA2010DataSet = New ISWA2010DataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "groupDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class multiplefingerDataTable
        Inherits Global.System.Data.TypedTableBase(Of multiplefingerRow)
        
        Private columnIDMultipleFinger As Global.System.Data.DataColumn
        
        Private columnMultipleFingerName As Global.System.Data.DataColumn
        
        Private columnIDUIItem As Global.System.Data.DataColumn
        
        Private columnOrder As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "multiplefinger"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDMultipleFingerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDMultipleFinger
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MultipleFingerNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMultipleFingerName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDUIItemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDUIItem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property OrderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrder
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As multiplefingerRow
            Get
                Return CType(Me.Rows(index),multiplefingerRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event multiplefingerRowChanging As multiplefingerRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event multiplefingerRowChanged As multiplefingerRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event multiplefingerRowDeleting As multiplefingerRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event multiplefingerRowDeleted As multiplefingerRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddmultiplefingerRow(ByVal row As multiplefingerRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddmultiplefingerRow(ByVal IDMultipleFinger As Integer, ByVal MultipleFingerName As String, ByVal IDUIItem As Integer, ByVal Order As Integer) As multiplefingerRow
            Dim rowmultiplefingerRow As multiplefingerRow = CType(Me.NewRow,multiplefingerRow)
            Dim columnValuesArray() As Object = New Object() {IDMultipleFinger, MultipleFingerName, IDUIItem, Order}
            rowmultiplefingerRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowmultiplefingerRow)
            Return rowmultiplefingerRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByIDMultipleFinger(ByVal IDMultipleFinger As Integer) As multiplefingerRow
            Return CType(Me.Rows.Find(New Object() {IDMultipleFinger}),multiplefingerRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As multiplefingerDataTable = CType(MyBase.Clone,multiplefingerDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New multiplefingerDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnIDMultipleFinger = MyBase.Columns("IDMultipleFinger")
            Me.columnMultipleFingerName = MyBase.Columns("MultipleFingerName")
            Me.columnIDUIItem = MyBase.Columns("IDUIItem")
            Me.columnOrder = MyBase.Columns("Order")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnIDMultipleFinger = New Global.System.Data.DataColumn("IDMultipleFinger", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDMultipleFinger)
            Me.columnMultipleFingerName = New Global.System.Data.DataColumn("MultipleFingerName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMultipleFingerName)
            Me.columnIDUIItem = New Global.System.Data.DataColumn("IDUIItem", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDUIItem)
            Me.columnOrder = New Global.System.Data.DataColumn("Order", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrder)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIDMultipleFinger}, true))
            Me.columnIDMultipleFinger.AllowDBNull = false
            Me.columnIDMultipleFinger.Unique = true
            Me.columnMultipleFingerName.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewmultiplefingerRow() As multiplefingerRow
            Return CType(Me.NewRow,multiplefingerRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New multiplefingerRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(multiplefingerRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.multiplefingerRowChangedEvent) Is Nothing) Then
                RaiseEvent multiplefingerRowChanged(Me, New multiplefingerRowChangeEvent(CType(e.Row,multiplefingerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.multiplefingerRowChangingEvent) Is Nothing) Then
                RaiseEvent multiplefingerRowChanging(Me, New multiplefingerRowChangeEvent(CType(e.Row,multiplefingerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.multiplefingerRowDeletedEvent) Is Nothing) Then
                RaiseEvent multiplefingerRowDeleted(Me, New multiplefingerRowChangeEvent(CType(e.Row,multiplefingerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.multiplefingerRowDeletingEvent) Is Nothing) Then
                RaiseEvent multiplefingerRowDeleting(Me, New multiplefingerRowChangeEvent(CType(e.Row,multiplefingerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovemultiplefingerRow(ByVal row As multiplefingerRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As ISWA2010DataSet = New ISWA2010DataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "multiplefingerDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class rootshapeDataTable
        Inherits Global.System.Data.TypedTableBase(Of rootshapeRow)
        
        Private columnIDRootshape As Global.System.Data.DataColumn
        
        Private columnRootshapeName As Global.System.Data.DataColumn
        
        Private columnIDUIItem As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "rootshape"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDRootshapeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDRootshape
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RootshapeNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRootshapeName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDUIItemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDUIItem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As rootshapeRow
            Get
                Return CType(Me.Rows(index),rootshapeRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event rootshapeRowChanging As rootshapeRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event rootshapeRowChanged As rootshapeRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event rootshapeRowDeleting As rootshapeRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event rootshapeRowDeleted As rootshapeRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddrootshapeRow(ByVal row As rootshapeRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddrootshapeRow(ByVal IDRootshape As Integer, ByVal RootshapeName As String, ByVal IDUIItem As Integer) As rootshapeRow
            Dim rowrootshapeRow As rootshapeRow = CType(Me.NewRow,rootshapeRow)
            Dim columnValuesArray() As Object = New Object() {IDRootshape, RootshapeName, IDUIItem}
            rowrootshapeRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowrootshapeRow)
            Return rowrootshapeRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByIDRootshape(ByVal IDRootshape As Integer) As rootshapeRow
            Return CType(Me.Rows.Find(New Object() {IDRootshape}),rootshapeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As rootshapeDataTable = CType(MyBase.Clone,rootshapeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New rootshapeDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnIDRootshape = MyBase.Columns("IDRootshape")
            Me.columnRootshapeName = MyBase.Columns("RootshapeName")
            Me.columnIDUIItem = MyBase.Columns("IDUIItem")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnIDRootshape = New Global.System.Data.DataColumn("IDRootshape", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDRootshape)
            Me.columnRootshapeName = New Global.System.Data.DataColumn("RootshapeName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRootshapeName)
            Me.columnIDUIItem = New Global.System.Data.DataColumn("IDUIItem", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDUIItem)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIDRootshape}, true))
            Me.columnIDRootshape.AllowDBNull = false
            Me.columnIDRootshape.Unique = true
            Me.columnRootshapeName.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewrootshapeRow() As rootshapeRow
            Return CType(Me.NewRow,rootshapeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New rootshapeRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(rootshapeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.rootshapeRowChangedEvent) Is Nothing) Then
                RaiseEvent rootshapeRowChanged(Me, New rootshapeRowChangeEvent(CType(e.Row,rootshapeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.rootshapeRowChangingEvent) Is Nothing) Then
                RaiseEvent rootshapeRowChanging(Me, New rootshapeRowChangeEvent(CType(e.Row,rootshapeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.rootshapeRowDeletedEvent) Is Nothing) Then
                RaiseEvent rootshapeRowDeleted(Me, New rootshapeRowChangeEvent(CType(e.Row,rootshapeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.rootshapeRowDeletingEvent) Is Nothing) Then
                RaiseEvent rootshapeRowDeleting(Me, New rootshapeRowChangeEvent(CType(e.Row,rootshapeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoverootshapeRow(ByVal row As rootshapeRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As ISWA2010DataSet = New ISWA2010DataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "rootshapeDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class rootshapegroupDataTable
        Inherits Global.System.Data.TypedTableBase(Of rootshapegroupRow)
        
        Private columnIDRootshapeGroup As Global.System.Data.DataColumn
        
        Private columnRootshapeGroupName As Global.System.Data.DataColumn
        
        Private columnIDUIItem As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "rootshapegroup"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDRootshapeGroupColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDRootshapeGroup
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RootshapeGroupNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRootshapeGroupName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDUIItemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDUIItem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As rootshapegroupRow
            Get
                Return CType(Me.Rows(index),rootshapegroupRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event rootshapegroupRowChanging As rootshapegroupRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event rootshapegroupRowChanged As rootshapegroupRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event rootshapegroupRowDeleting As rootshapegroupRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event rootshapegroupRowDeleted As rootshapegroupRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddrootshapegroupRow(ByVal row As rootshapegroupRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddrootshapegroupRow(ByVal IDRootshapeGroup As Integer, ByVal RootshapeGroupName As String, ByVal IDUIItem As Integer) As rootshapegroupRow
            Dim rowrootshapegroupRow As rootshapegroupRow = CType(Me.NewRow,rootshapegroupRow)
            Dim columnValuesArray() As Object = New Object() {IDRootshapeGroup, RootshapeGroupName, IDUIItem}
            rowrootshapegroupRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowrootshapegroupRow)
            Return rowrootshapegroupRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByIDRootshapeGroup(ByVal IDRootshapeGroup As Integer) As rootshapegroupRow
            Return CType(Me.Rows.Find(New Object() {IDRootshapeGroup}),rootshapegroupRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As rootshapegroupDataTable = CType(MyBase.Clone,rootshapegroupDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New rootshapegroupDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnIDRootshapeGroup = MyBase.Columns("IDRootshapeGroup")
            Me.columnRootshapeGroupName = MyBase.Columns("RootshapeGroupName")
            Me.columnIDUIItem = MyBase.Columns("IDUIItem")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnIDRootshapeGroup = New Global.System.Data.DataColumn("IDRootshapeGroup", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDRootshapeGroup)
            Me.columnRootshapeGroupName = New Global.System.Data.DataColumn("RootshapeGroupName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRootshapeGroupName)
            Me.columnIDUIItem = New Global.System.Data.DataColumn("IDUIItem", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDUIItem)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIDRootshapeGroup}, true))
            Me.columnIDRootshapeGroup.AllowDBNull = false
            Me.columnIDRootshapeGroup.Unique = true
            Me.columnRootshapeGroupName.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewrootshapegroupRow() As rootshapegroupRow
            Return CType(Me.NewRow,rootshapegroupRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New rootshapegroupRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(rootshapegroupRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.rootshapegroupRowChangedEvent) Is Nothing) Then
                RaiseEvent rootshapegroupRowChanged(Me, New rootshapegroupRowChangeEvent(CType(e.Row,rootshapegroupRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.rootshapegroupRowChangingEvent) Is Nothing) Then
                RaiseEvent rootshapegroupRowChanging(Me, New rootshapegroupRowChangeEvent(CType(e.Row,rootshapegroupRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.rootshapegroupRowDeletedEvent) Is Nothing) Then
                RaiseEvent rootshapegroupRowDeleted(Me, New rootshapegroupRowChangeEvent(CType(e.Row,rootshapegroupRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.rootshapegroupRowDeletingEvent) Is Nothing) Then
                RaiseEvent rootshapegroupRowDeleting(Me, New rootshapegroupRowChangeEvent(CType(e.Row,rootshapegroupRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoverootshapegroupRow(ByVal row As rootshapegroupRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As ISWA2010DataSet = New ISWA2010DataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "rootshapegroupDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class rootshapequickDataTable
        Inherits Global.System.Data.TypedTableBase(Of rootshapequickRow)
        
        Private columnIDRootshapeQuick As Global.System.Data.DataColumn
        
        Private columnRootshapeQuickName As Global.System.Data.DataColumn
        
        Private columnIDUIItem As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "rootshapequick"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDRootshapeQuickColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDRootshapeQuick
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RootshapeQuickNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRootshapeQuickName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDUIItemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDUIItem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As rootshapequickRow
            Get
                Return CType(Me.Rows(index),rootshapequickRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event rootshapequickRowChanging As rootshapequickRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event rootshapequickRowChanged As rootshapequickRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event rootshapequickRowDeleting As rootshapequickRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event rootshapequickRowDeleted As rootshapequickRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddrootshapequickRow(ByVal row As rootshapequickRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddrootshapequickRow(ByVal IDRootshapeQuick As Integer, ByVal RootshapeQuickName As String, ByVal IDUIItem As Integer) As rootshapequickRow
            Dim rowrootshapequickRow As rootshapequickRow = CType(Me.NewRow,rootshapequickRow)
            Dim columnValuesArray() As Object = New Object() {IDRootshapeQuick, RootshapeQuickName, IDUIItem}
            rowrootshapequickRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowrootshapequickRow)
            Return rowrootshapequickRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByIDRootshapeQuick(ByVal IDRootshapeQuick As Integer) As rootshapequickRow
            Return CType(Me.Rows.Find(New Object() {IDRootshapeQuick}),rootshapequickRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As rootshapequickDataTable = CType(MyBase.Clone,rootshapequickDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New rootshapequickDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnIDRootshapeQuick = MyBase.Columns("IDRootshapeQuick")
            Me.columnRootshapeQuickName = MyBase.Columns("RootshapeQuickName")
            Me.columnIDUIItem = MyBase.Columns("IDUIItem")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnIDRootshapeQuick = New Global.System.Data.DataColumn("IDRootshapeQuick", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDRootshapeQuick)
            Me.columnRootshapeQuickName = New Global.System.Data.DataColumn("RootshapeQuickName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRootshapeQuickName)
            Me.columnIDUIItem = New Global.System.Data.DataColumn("IDUIItem", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDUIItem)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIDRootshapeQuick}, true))
            Me.columnIDRootshapeQuick.AllowDBNull = false
            Me.columnIDRootshapeQuick.Unique = true
            Me.columnRootshapeQuickName.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewrootshapequickRow() As rootshapequickRow
            Return CType(Me.NewRow,rootshapequickRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New rootshapequickRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(rootshapequickRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.rootshapequickRowChangedEvent) Is Nothing) Then
                RaiseEvent rootshapequickRowChanged(Me, New rootshapequickRowChangeEvent(CType(e.Row,rootshapequickRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.rootshapequickRowChangingEvent) Is Nothing) Then
                RaiseEvent rootshapequickRowChanging(Me, New rootshapequickRowChangeEvent(CType(e.Row,rootshapequickRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.rootshapequickRowDeletedEvent) Is Nothing) Then
                RaiseEvent rootshapequickRowDeleted(Me, New rootshapequickRowChangeEvent(CType(e.Row,rootshapequickRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.rootshapequickRowDeletingEvent) Is Nothing) Then
                RaiseEvent rootshapequickRowDeleting(Me, New rootshapequickRowChangeEvent(CType(e.Row,rootshapequickRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoverootshapequickRow(ByVal row As rootshapequickRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As ISWA2010DataSet = New ISWA2010DataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "rootshapequickDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class symbolDataTable
        Inherits Global.System.Data.TypedTableBase(Of symbolRow)
        
        Private columnsym_code As Global.System.Data.DataColumn
        
        Private columnsym_sss As Global.System.Data.DataColumn
        
        Private columnsym_fill As Global.System.Data.DataColumn
        
        Private columnsym_rot As Global.System.Data.DataColumn
        
        Private columnsym_w As Global.System.Data.DataColumn
        
        Private columnsym_h As Global.System.Data.DataColumn
        
        Private columnsym_bs_code As Global.System.Data.DataColumn
        
        Private columnsym_sg_code As Global.System.Data.DataColumn
        
        Private columnsym_png As Global.System.Data.DataColumn
        
        Private columnsym_illus As Global.System.Data.DataColumn
        
        Private columnsym_id As Global.System.Data.DataColumn
        
        Private columnsym_svg_line As Global.System.Data.DataColumn
        
        Private columnsym_svg_fill As Global.System.Data.DataColumn
        
        Private columnsort_weight As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "symbol"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property sym_codeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsym_code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property sym_sssColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsym_sss
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property sym_fillColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsym_fill
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property sym_rotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsym_rot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property sym_wColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsym_w
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property sym_hColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsym_h
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property sym_bs_codeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsym_bs_code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property sym_sg_codeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsym_sg_code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property sym_pngColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsym_png
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property sym_illusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsym_illus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property sym_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsym_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property sym_svg_lineColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsym_svg_line
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property sym_svg_fillColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsym_svg_fill
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property sort_weightColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsort_weight
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As symbolRow
            Get
                Return CType(Me.Rows(index),symbolRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event symbolRowChanging As symbolRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event symbolRowChanged As symbolRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event symbolRowDeleting As symbolRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event symbolRowDeleted As symbolRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddsymbolRow(ByVal row As symbolRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddsymbolRow(ByVal sym_code As Integer, ByVal sym_sss As String, ByVal sym_fill As Integer, ByVal sym_rot As Integer, ByVal sym_w As Integer, ByVal sym_h As Integer, ByVal parentbasesymbolRowByFK_symbol_0 As basesymbolRow, ByVal parentsymbolgroupRowByFK_symbol_1 As symbolgroupRow, ByVal sym_png() As Byte, ByVal sym_illus() As Byte, ByVal sym_id As String, ByVal sym_svg_line As String, ByVal sym_svg_fill As String, ByVal sort_weight As String) As symbolRow
            Dim rowsymbolRow As symbolRow = CType(Me.NewRow,symbolRow)
            Dim columnValuesArray() As Object = New Object() {sym_code, sym_sss, sym_fill, sym_rot, sym_w, sym_h, Nothing, Nothing, sym_png, sym_illus, sym_id, sym_svg_line, sym_svg_fill, sort_weight}
            If (Not (parentbasesymbolRowByFK_symbol_0) Is Nothing) Then
                columnValuesArray(6) = parentbasesymbolRowByFK_symbol_0(0)
            End If
            If (Not (parentsymbolgroupRowByFK_symbol_1) Is Nothing) Then
                columnValuesArray(7) = parentsymbolgroupRowByFK_symbol_1(0)
            End If
            rowsymbolRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsymbolRow)
            Return rowsymbolRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindBysym_code(ByVal sym_code As Integer) As symbolRow
            Return CType(Me.Rows.Find(New Object() {sym_code}),symbolRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As symbolDataTable = CType(MyBase.Clone,symbolDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New symbolDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnsym_code = MyBase.Columns("sym_code")
            Me.columnsym_sss = MyBase.Columns("sym_sss")
            Me.columnsym_fill = MyBase.Columns("sym_fill")
            Me.columnsym_rot = MyBase.Columns("sym_rot")
            Me.columnsym_w = MyBase.Columns("sym_w")
            Me.columnsym_h = MyBase.Columns("sym_h")
            Me.columnsym_bs_code = MyBase.Columns("sym_bs_code")
            Me.columnsym_sg_code = MyBase.Columns("sym_sg_code")
            Me.columnsym_png = MyBase.Columns("sym_png")
            Me.columnsym_illus = MyBase.Columns("sym_illus")
            Me.columnsym_id = MyBase.Columns("sym_id")
            Me.columnsym_svg_line = MyBase.Columns("sym_svg_line")
            Me.columnsym_svg_fill = MyBase.Columns("sym_svg_fill")
            Me.columnsort_weight = MyBase.Columns("sort_weight")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnsym_code = New Global.System.Data.DataColumn("sym_code", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsym_code)
            Me.columnsym_sss = New Global.System.Data.DataColumn("sym_sss", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsym_sss)
            Me.columnsym_fill = New Global.System.Data.DataColumn("sym_fill", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsym_fill)
            Me.columnsym_rot = New Global.System.Data.DataColumn("sym_rot", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsym_rot)
            Me.columnsym_w = New Global.System.Data.DataColumn("sym_w", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsym_w)
            Me.columnsym_h = New Global.System.Data.DataColumn("sym_h", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsym_h)
            Me.columnsym_bs_code = New Global.System.Data.DataColumn("sym_bs_code", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsym_bs_code)
            Me.columnsym_sg_code = New Global.System.Data.DataColumn("sym_sg_code", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsym_sg_code)
            Me.columnsym_png = New Global.System.Data.DataColumn("sym_png", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsym_png)
            Me.columnsym_illus = New Global.System.Data.DataColumn("sym_illus", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsym_illus)
            Me.columnsym_id = New Global.System.Data.DataColumn("sym_id", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsym_id)
            Me.columnsym_svg_line = New Global.System.Data.DataColumn("sym_svg_line", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsym_svg_line)
            Me.columnsym_svg_fill = New Global.System.Data.DataColumn("sym_svg_fill", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsym_svg_fill)
            Me.columnsort_weight = New Global.System.Data.DataColumn("sort_weight", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsort_weight)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnsym_code}, true))
            Me.columnsym_code.AllowDBNull = false
            Me.columnsym_code.Unique = true
            Me.columnsym_sss.MaxLength = 13
            Me.columnsym_id.MaxLength = 18
            Me.columnsym_svg_line.MaxLength = 2147483647
            Me.columnsym_svg_fill.MaxLength = 2147483647
            Me.columnsort_weight.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewsymbolRow() As symbolRow
            Return CType(Me.NewRow,symbolRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New symbolRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(symbolRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.symbolRowChangedEvent) Is Nothing) Then
                RaiseEvent symbolRowChanged(Me, New symbolRowChangeEvent(CType(e.Row,symbolRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.symbolRowChangingEvent) Is Nothing) Then
                RaiseEvent symbolRowChanging(Me, New symbolRowChangeEvent(CType(e.Row,symbolRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.symbolRowDeletedEvent) Is Nothing) Then
                RaiseEvent symbolRowDeleted(Me, New symbolRowChangeEvent(CType(e.Row,symbolRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.symbolRowDeletingEvent) Is Nothing) Then
                RaiseEvent symbolRowDeleting(Me, New symbolRowChangeEvent(CType(e.Row,symbolRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovesymbolRow(ByVal row As symbolRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As ISWA2010DataSet = New ISWA2010DataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "symbolDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class symbolgroupDataTable
        Inherits Global.System.Data.TypedTableBase(Of symbolgroupRow)
        
        Private columnsg_code As Global.System.Data.DataColumn
        
        Private columnsg_sym_code As Global.System.Data.DataColumn
        
        Private columnsg_num As Global.System.Data.DataColumn
        
        Private columnsg_cat_num As Global.System.Data.DataColumn
        
        Private columnsg_grp_num As Global.System.Data.DataColumn
        
        Private columnsg_bases As Global.System.Data.DataColumn
        
        Private columnsg_color As Global.System.Data.DataColumn
        
        Private columnsg_token As Global.System.Data.DataColumn
        
        Private columnsg_name As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "symbolgroup"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property sg_codeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsg_code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property sg_sym_codeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsg_sym_code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property sg_numColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsg_num
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property sg_cat_numColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsg_cat_num
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property sg_grp_numColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsg_grp_num
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property sg_basesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsg_bases
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property sg_colorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsg_color
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property sg_tokenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsg_token
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property sg_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsg_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As symbolgroupRow
            Get
                Return CType(Me.Rows(index),symbolgroupRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event symbolgroupRowChanging As symbolgroupRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event symbolgroupRowChanged As symbolgroupRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event symbolgroupRowDeleting As symbolgroupRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event symbolgroupRowDeleted As symbolgroupRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddsymbolgroupRow(ByVal row As symbolgroupRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddsymbolgroupRow(ByVal sg_code As Integer, ByVal parentsymbolRowByFK_symbolgroup_0 As symbolRow, ByVal sg_num As Integer, ByVal parentcategoryRowByFK_symbolgroup_1 As categoryRow, ByVal sg_grp_num As Integer, ByVal sg_bases As Integer, ByVal sg_color As String, ByVal sg_token As String, ByVal sg_name As String) As symbolgroupRow
            Dim rowsymbolgroupRow As symbolgroupRow = CType(Me.NewRow,symbolgroupRow)
            Dim columnValuesArray() As Object = New Object() {sg_code, Nothing, sg_num, Nothing, sg_grp_num, sg_bases, sg_color, sg_token, sg_name}
            If (Not (parentsymbolRowByFK_symbolgroup_0) Is Nothing) Then
                columnValuesArray(1) = parentsymbolRowByFK_symbolgroup_0(0)
            End If
            If (Not (parentcategoryRowByFK_symbolgroup_1) Is Nothing) Then
                columnValuesArray(3) = parentcategoryRowByFK_symbolgroup_1(0)
            End If
            rowsymbolgroupRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsymbolgroupRow)
            Return rowsymbolgroupRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindBysg_code(ByVal sg_code As Integer) As symbolgroupRow
            Return CType(Me.Rows.Find(New Object() {sg_code}),symbolgroupRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As symbolgroupDataTable = CType(MyBase.Clone,symbolgroupDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New symbolgroupDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnsg_code = MyBase.Columns("sg_code")
            Me.columnsg_sym_code = MyBase.Columns("sg_sym_code")
            Me.columnsg_num = MyBase.Columns("sg_num")
            Me.columnsg_cat_num = MyBase.Columns("sg_cat_num")
            Me.columnsg_grp_num = MyBase.Columns("sg_grp_num")
            Me.columnsg_bases = MyBase.Columns("sg_bases")
            Me.columnsg_color = MyBase.Columns("sg_color")
            Me.columnsg_token = MyBase.Columns("sg_token")
            Me.columnsg_name = MyBase.Columns("sg_name")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnsg_code = New Global.System.Data.DataColumn("sg_code", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsg_code)
            Me.columnsg_sym_code = New Global.System.Data.DataColumn("sg_sym_code", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsg_sym_code)
            Me.columnsg_num = New Global.System.Data.DataColumn("sg_num", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsg_num)
            Me.columnsg_cat_num = New Global.System.Data.DataColumn("sg_cat_num", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsg_cat_num)
            Me.columnsg_grp_num = New Global.System.Data.DataColumn("sg_grp_num", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsg_grp_num)
            Me.columnsg_bases = New Global.System.Data.DataColumn("sg_bases", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsg_bases)
            Me.columnsg_color = New Global.System.Data.DataColumn("sg_color", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsg_color)
            Me.columnsg_token = New Global.System.Data.DataColumn("sg_token", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsg_token)
            Me.columnsg_name = New Global.System.Data.DataColumn("sg_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsg_name)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnsg_code}, true))
            Me.columnsg_code.AllowDBNull = false
            Me.columnsg_code.Unique = true
            Me.columnsg_color.MaxLength = 6
            Me.columnsg_token.MaxLength = 1
            Me.columnsg_name.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewsymbolgroupRow() As symbolgroupRow
            Return CType(Me.NewRow,symbolgroupRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New symbolgroupRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(symbolgroupRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.symbolgroupRowChangedEvent) Is Nothing) Then
                RaiseEvent symbolgroupRowChanged(Me, New symbolgroupRowChangeEvent(CType(e.Row,symbolgroupRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.symbolgroupRowChangingEvent) Is Nothing) Then
                RaiseEvent symbolgroupRowChanging(Me, New symbolgroupRowChangeEvent(CType(e.Row,symbolgroupRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.symbolgroupRowDeletedEvent) Is Nothing) Then
                RaiseEvent symbolgroupRowDeleted(Me, New symbolgroupRowChangeEvent(CType(e.Row,symbolgroupRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.symbolgroupRowDeletingEvent) Is Nothing) Then
                RaiseEvent symbolgroupRowDeleting(Me, New symbolgroupRowChangeEvent(CType(e.Row,symbolgroupRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovesymbolgroupRow(ByVal row As symbolgroupRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As ISWA2010DataSet = New ISWA2010DataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "symbolgroupDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class thumbpositionDataTable
        Inherits Global.System.Data.TypedTableBase(Of thumbpositionRow)
        
        Private columnIDThumbPosition As Global.System.Data.DataColumn
        
        Private columnThumbPositionName As Global.System.Data.DataColumn
        
        Private columnIDUIItem As Global.System.Data.DataColumn
        
        Private columnOrder As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "thumbposition"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDThumbPositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDThumbPosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ThumbPositionNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnThumbPositionName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDUIItemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDUIItem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property OrderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrder
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As thumbpositionRow
            Get
                Return CType(Me.Rows(index),thumbpositionRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event thumbpositionRowChanging As thumbpositionRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event thumbpositionRowChanged As thumbpositionRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event thumbpositionRowDeleting As thumbpositionRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event thumbpositionRowDeleted As thumbpositionRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddthumbpositionRow(ByVal row As thumbpositionRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddthumbpositionRow(ByVal IDThumbPosition As Integer, ByVal ThumbPositionName As String, ByVal IDUIItem As Integer, ByVal Order As Integer) As thumbpositionRow
            Dim rowthumbpositionRow As thumbpositionRow = CType(Me.NewRow,thumbpositionRow)
            Dim columnValuesArray() As Object = New Object() {IDThumbPosition, ThumbPositionName, IDUIItem, Order}
            rowthumbpositionRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowthumbpositionRow)
            Return rowthumbpositionRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByIDThumbPosition(ByVal IDThumbPosition As Integer) As thumbpositionRow
            Return CType(Me.Rows.Find(New Object() {IDThumbPosition}),thumbpositionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As thumbpositionDataTable = CType(MyBase.Clone,thumbpositionDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New thumbpositionDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnIDThumbPosition = MyBase.Columns("IDThumbPosition")
            Me.columnThumbPositionName = MyBase.Columns("ThumbPositionName")
            Me.columnIDUIItem = MyBase.Columns("IDUIItem")
            Me.columnOrder = MyBase.Columns("Order")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnIDThumbPosition = New Global.System.Data.DataColumn("IDThumbPosition", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDThumbPosition)
            Me.columnThumbPositionName = New Global.System.Data.DataColumn("ThumbPositionName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnThumbPositionName)
            Me.columnIDUIItem = New Global.System.Data.DataColumn("IDUIItem", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDUIItem)
            Me.columnOrder = New Global.System.Data.DataColumn("Order", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrder)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIDThumbPosition}, true))
            Me.columnIDThumbPosition.AllowDBNull = false
            Me.columnIDThumbPosition.Unique = true
            Me.columnThumbPositionName.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewthumbpositionRow() As thumbpositionRow
            Return CType(Me.NewRow,thumbpositionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New thumbpositionRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(thumbpositionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.thumbpositionRowChangedEvent) Is Nothing) Then
                RaiseEvent thumbpositionRowChanged(Me, New thumbpositionRowChangeEvent(CType(e.Row,thumbpositionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.thumbpositionRowChangingEvent) Is Nothing) Then
                RaiseEvent thumbpositionRowChanging(Me, New thumbpositionRowChangeEvent(CType(e.Row,thumbpositionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.thumbpositionRowDeletedEvent) Is Nothing) Then
                RaiseEvent thumbpositionRowDeleted(Me, New thumbpositionRowChangeEvent(CType(e.Row,thumbpositionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.thumbpositionRowDeletingEvent) Is Nothing) Then
                RaiseEvent thumbpositionRowDeleting(Me, New thumbpositionRowChangeEvent(CType(e.Row,thumbpositionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovethumbpositionRow(ByVal row As thumbpositionRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As ISWA2010DataSet = New ISWA2010DataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "thumbpositionDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class versionDataTable
        Inherits Global.System.Data.TypedTableBase(Of versionRow)
        
        Private columnIDVersion As Global.System.Data.DataColumn
        
        Private columnMajor As Global.System.Data.DataColumn
        
        Private columnMinor As Global.System.Data.DataColumn
        
        Private columnDatabaseName As Global.System.Data.DataColumn
        
        Private columnDatabaseType As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "version"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDVersionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDVersion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MajorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMajor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MinorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMinor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DatabaseNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDatabaseName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DatabaseTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDatabaseType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As versionRow
            Get
                Return CType(Me.Rows(index),versionRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event versionRowChanging As versionRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event versionRowChanged As versionRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event versionRowDeleting As versionRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event versionRowDeleted As versionRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddversionRow(ByVal row As versionRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddversionRow(ByVal IDVersion As Integer, ByVal Major As Integer, ByVal Minor As Integer, ByVal DatabaseName As String, ByVal DatabaseType As String) As versionRow
            Dim rowversionRow As versionRow = CType(Me.NewRow,versionRow)
            Dim columnValuesArray() As Object = New Object() {IDVersion, Major, Minor, DatabaseName, DatabaseType}
            rowversionRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowversionRow)
            Return rowversionRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByIDVersion(ByVal IDVersion As Integer) As versionRow
            Return CType(Me.Rows.Find(New Object() {IDVersion}),versionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As versionDataTable = CType(MyBase.Clone,versionDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New versionDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnIDVersion = MyBase.Columns("IDVersion")
            Me.columnMajor = MyBase.Columns("Major")
            Me.columnMinor = MyBase.Columns("Minor")
            Me.columnDatabaseName = MyBase.Columns("DatabaseName")
            Me.columnDatabaseType = MyBase.Columns("DatabaseType")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnIDVersion = New Global.System.Data.DataColumn("IDVersion", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDVersion)
            Me.columnMajor = New Global.System.Data.DataColumn("Major", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMajor)
            Me.columnMinor = New Global.System.Data.DataColumn("Minor", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMinor)
            Me.columnDatabaseName = New Global.System.Data.DataColumn("DatabaseName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDatabaseName)
            Me.columnDatabaseType = New Global.System.Data.DataColumn("DatabaseType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDatabaseType)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIDVersion}, true))
            Me.columnIDVersion.AllowDBNull = false
            Me.columnIDVersion.Unique = true
            Me.columnDatabaseName.MaxLength = 2147483647
            Me.columnDatabaseType.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewversionRow() As versionRow
            Return CType(Me.NewRow,versionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New versionRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(versionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.versionRowChangedEvent) Is Nothing) Then
                RaiseEvent versionRowChanged(Me, New versionRowChangeEvent(CType(e.Row,versionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.versionRowChangingEvent) Is Nothing) Then
                RaiseEvent versionRowChanging(Me, New versionRowChangeEvent(CType(e.Row,versionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.versionRowDeletedEvent) Is Nothing) Then
                RaiseEvent versionRowDeleted(Me, New versionRowChangeEvent(CType(e.Row,versionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.versionRowDeletingEvent) Is Nothing) Then
                RaiseEvent versionRowDeleting(Me, New versionRowChangeEvent(CType(e.Row,versionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveversionRow(ByVal row As versionRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As ISWA2010DataSet = New ISWA2010DataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "versionDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class cacheDataTable
        Inherits Global.System.Data.TypedTableBase(Of cacheRow)
        
        Private columnsym_code As Global.System.Data.DataColumn
        
        Private columnsym_fill As Global.System.Data.DataColumn
        
        Private columnsym_rot As Global.System.Data.DataColumn
        
        Private columnsym_w As Global.System.Data.DataColumn
        
        Private columnsym_h As Global.System.Data.DataColumn
        
        Private columnsym_png As Global.System.Data.DataColumn
        
        Private columnsym_illus As Global.System.Data.DataColumn
        
        Private columnsym_id As Global.System.Data.DataColumn
        
        Private columnsg_cat_num As Global.System.Data.DataColumn
        
        Private columnsg_grp_num As Global.System.Data.DataColumn
        
        Private columnbs_bas_num As Global.System.Data.DataColumn
        
        Private columnbs_var_num As Global.System.Data.DataColumn
        
        Private columnbs_sym_code As Global.System.Data.DataColumn
        
        Private columnbs_name As Global.System.Data.DataColumn
        
        Private columnbs_vars As Global.System.Data.DataColumn
        
        Private columnbs_fills As Global.System.Data.DataColumn
        
        Private columnbs_rots As Global.System.Data.DataColumn
        
        Private columnsg_color As Global.System.Data.DataColumn
        
        Private columnsym_bs_code As Global.System.Data.DataColumn
        
        Private columnsort_weight As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "cache"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property sym_codeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsym_code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property sym_fillColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsym_fill
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property sym_rotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsym_rot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property sym_wColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsym_w
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property sym_hColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsym_h
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property sym_pngColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsym_png
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property sym_illusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsym_illus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property sym_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsym_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property sg_cat_numColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsg_cat_num
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property sg_grp_numColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsg_grp_num
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bs_bas_numColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbs_bas_num
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bs_var_numColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbs_var_num
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bs_sym_codeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbs_sym_code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bs_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbs_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bs_varsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbs_vars
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bs_fillsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbs_fills
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bs_rotsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbs_rots
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property sg_colorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsg_color
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property sym_bs_codeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsym_bs_code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property sort_weightColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsort_weight
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As cacheRow
            Get
                Return CType(Me.Rows(index),cacheRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event cacheRowChanging As cacheRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event cacheRowChanged As cacheRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event cacheRowDeleting As cacheRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event cacheRowDeleted As cacheRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddcacheRow(ByVal row As cacheRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddcacheRow( _
                    ByVal sym_code As Integer,  _
                    ByVal sym_fill As Integer,  _
                    ByVal sym_rot As Integer,  _
                    ByVal sym_w As Integer,  _
                    ByVal sym_h As Integer,  _
                    ByVal sym_png() As Byte,  _
                    ByVal sym_illus() As Byte,  _
                    ByVal sym_id As String,  _
                    ByVal parentcategoryRowByFK_symbolgroup_11 As categoryRow,  _
                    ByVal sg_grp_num As Integer,  _
                    ByVal bs_bas_num As Integer,  _
                    ByVal bs_var_num As Integer,  _
                    ByVal parentsymbolRowByFK_basesymbol_12 As symbolRow,  _
                    ByVal bs_name As String,  _
                    ByVal bs_vars As Integer,  _
                    ByVal bs_fills As Integer,  _
                    ByVal bs_rots As Integer,  _
                    ByVal sg_color As String,  _
                    ByVal sym_bs_code As Integer,  _
                    ByVal sort_weight As String) As cacheRow
            Dim rowcacheRow As cacheRow = CType(Me.NewRow,cacheRow)
            Dim columnValuesArray() As Object = New Object() {sym_code, sym_fill, sym_rot, sym_w, sym_h, sym_png, sym_illus, sym_id, Nothing, sg_grp_num, bs_bas_num, bs_var_num, Nothing, bs_name, bs_vars, bs_fills, bs_rots, sg_color, sym_bs_code, sort_weight}
            If (Not (parentcategoryRowByFK_symbolgroup_11) Is Nothing) Then
                columnValuesArray(8) = parentcategoryRowByFK_symbolgroup_11(0)
            End If
            If (Not (parentsymbolRowByFK_basesymbol_12) Is Nothing) Then
                columnValuesArray(12) = parentsymbolRowByFK_basesymbol_12(0)
            End If
            rowcacheRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowcacheRow)
            Return rowcacheRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindBysym_code(ByVal sym_code As Integer) As cacheRow
            Return CType(Me.Rows.Find(New Object() {sym_code}),cacheRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As cacheDataTable = CType(MyBase.Clone,cacheDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New cacheDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnsym_code = MyBase.Columns("sym_code")
            Me.columnsym_fill = MyBase.Columns("sym_fill")
            Me.columnsym_rot = MyBase.Columns("sym_rot")
            Me.columnsym_w = MyBase.Columns("sym_w")
            Me.columnsym_h = MyBase.Columns("sym_h")
            Me.columnsym_png = MyBase.Columns("sym_png")
            Me.columnsym_illus = MyBase.Columns("sym_illus")
            Me.columnsym_id = MyBase.Columns("sym_id")
            Me.columnsg_cat_num = MyBase.Columns("sg_cat_num")
            Me.columnsg_grp_num = MyBase.Columns("sg_grp_num")
            Me.columnbs_bas_num = MyBase.Columns("bs_bas_num")
            Me.columnbs_var_num = MyBase.Columns("bs_var_num")
            Me.columnbs_sym_code = MyBase.Columns("bs_sym_code")
            Me.columnbs_name = MyBase.Columns("bs_name")
            Me.columnbs_vars = MyBase.Columns("bs_vars")
            Me.columnbs_fills = MyBase.Columns("bs_fills")
            Me.columnbs_rots = MyBase.Columns("bs_rots")
            Me.columnsg_color = MyBase.Columns("sg_color")
            Me.columnsym_bs_code = MyBase.Columns("sym_bs_code")
            Me.columnsort_weight = MyBase.Columns("sort_weight")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnsym_code = New Global.System.Data.DataColumn("sym_code", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsym_code)
            Me.columnsym_fill = New Global.System.Data.DataColumn("sym_fill", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsym_fill)
            Me.columnsym_rot = New Global.System.Data.DataColumn("sym_rot", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsym_rot)
            Me.columnsym_w = New Global.System.Data.DataColumn("sym_w", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsym_w)
            Me.columnsym_h = New Global.System.Data.DataColumn("sym_h", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsym_h)
            Me.columnsym_png = New Global.System.Data.DataColumn("sym_png", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsym_png)
            Me.columnsym_illus = New Global.System.Data.DataColumn("sym_illus", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsym_illus)
            Me.columnsym_id = New Global.System.Data.DataColumn("sym_id", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsym_id)
            Me.columnsg_cat_num = New Global.System.Data.DataColumn("sg_cat_num", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsg_cat_num)
            Me.columnsg_grp_num = New Global.System.Data.DataColumn("sg_grp_num", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsg_grp_num)
            Me.columnbs_bas_num = New Global.System.Data.DataColumn("bs_bas_num", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbs_bas_num)
            Me.columnbs_var_num = New Global.System.Data.DataColumn("bs_var_num", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbs_var_num)
            Me.columnbs_sym_code = New Global.System.Data.DataColumn("bs_sym_code", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbs_sym_code)
            Me.columnbs_name = New Global.System.Data.DataColumn("bs_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbs_name)
            Me.columnbs_vars = New Global.System.Data.DataColumn("bs_vars", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbs_vars)
            Me.columnbs_fills = New Global.System.Data.DataColumn("bs_fills", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbs_fills)
            Me.columnbs_rots = New Global.System.Data.DataColumn("bs_rots", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbs_rots)
            Me.columnsg_color = New Global.System.Data.DataColumn("sg_color", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsg_color)
            Me.columnsym_bs_code = New Global.System.Data.DataColumn("sym_bs_code", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsym_bs_code)
            Me.columnsort_weight = New Global.System.Data.DataColumn("sort_weight", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsort_weight)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnsym_code}, true))
            Me.columnsym_code.AllowDBNull = false
            Me.columnsym_code.Unique = true
            Me.columnsym_id.MaxLength = 18
            Me.columnbs_name.MaxLength = 255
            Me.columnsg_color.MaxLength = 6
            Me.columnsort_weight.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewcacheRow() As cacheRow
            Return CType(Me.NewRow,cacheRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New cacheRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(cacheRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.cacheRowChangedEvent) Is Nothing) Then
                RaiseEvent cacheRowChanged(Me, New cacheRowChangeEvent(CType(e.Row,cacheRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.cacheRowChangingEvent) Is Nothing) Then
                RaiseEvent cacheRowChanging(Me, New cacheRowChangeEvent(CType(e.Row,cacheRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.cacheRowDeletedEvent) Is Nothing) Then
                RaiseEvent cacheRowDeleted(Me, New cacheRowChangeEvent(CType(e.Row,cacheRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.cacheRowDeletingEvent) Is Nothing) Then
                RaiseEvent cacheRowDeleting(Me, New cacheRowChangeEvent(CType(e.Row,cacheRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovecacheRow(ByVal row As cacheRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As ISWA2010DataSet = New ISWA2010DataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "cacheDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class actionfingerRow
        Inherits Global.System.Data.DataRow
        
        Private tableactionfinger As actionfingerDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableactionfinger = CType(Me.Table,actionfingerDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IDActionFinger() As Integer
            Get
                Return CType(Me(Me.tableactionfinger.IDActionFingerColumn),Integer)
            End Get
            Set
                Me(Me.tableactionfinger.IDActionFingerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ActionFingerName() As String
            Get
                Try 
                    Return CType(Me(Me.tableactionfinger.ActionFingerNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ActionFingerName' in table 'actionfinger' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableactionfinger.ActionFingerNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IDUIItem() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableactionfinger.IDUIItemColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IDUIItem' in table 'actionfinger' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableactionfinger.IDUIItemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Order() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableactionfinger.OrderColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Order' in table 'actionfinger' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableactionfinger.OrderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsActionFingerNameNull() As Boolean
            Return Me.IsNull(Me.tableactionfinger.ActionFingerNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetActionFingerNameNull()
            Me(Me.tableactionfinger.ActionFingerNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIDUIItemNull() As Boolean
            Return Me.IsNull(Me.tableactionfinger.IDUIItemColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIDUIItemNull()
            Me(Me.tableactionfinger.IDUIItemColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsOrderNull() As Boolean
            Return Me.IsNull(Me.tableactionfinger.OrderColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetOrderNull()
            Me(Me.tableactionfinger.OrderColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetclassificationRows() As classificationRow()
            If (Me.Table.ChildRelations("FK_classification_2") Is Nothing) Then
                Return New classificationRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_classification_2")),classificationRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class basesymbolRow
        Inherits Global.System.Data.DataRow
        
        Private tablebasesymbol As basesymbolDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablebasesymbol = CType(Me.Table,basesymbolDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bs_code() As Integer
            Get
                Return CType(Me(Me.tablebasesymbol.bs_codeColumn),Integer)
            End Get
            Set
                Me(Me.tablebasesymbol.bs_codeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bs_sym_code() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablebasesymbol.bs_sym_codeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bs_sym_code' in table 'basesymbol' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebasesymbol.bs_sym_codeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bs_sg_code() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablebasesymbol.bs_sg_codeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bs_sg_code' in table 'basesymbol' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebasesymbol.bs_sg_codeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bs_num() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablebasesymbol.bs_numColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bs_num' in table 'basesymbol' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebasesymbol.bs_numColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bs_bas_num() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablebasesymbol.bs_bas_numColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bs_bas_num' in table 'basesymbol' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebasesymbol.bs_bas_numColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bs_var_num() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablebasesymbol.bs_var_numColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bs_var_num' in table 'basesymbol' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebasesymbol.bs_var_numColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bs_vars() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablebasesymbol.bs_varsColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bs_vars' in table 'basesymbol' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebasesymbol.bs_varsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bs_fills() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablebasesymbol.bs_fillsColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bs_fills' in table 'basesymbol' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebasesymbol.bs_fillsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bs_rots() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablebasesymbol.bs_rotsColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bs_rots' in table 'basesymbol' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebasesymbol.bs_rotsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bs_name() As String
            Get
                Try 
                    Return CType(Me(Me.tablebasesymbol.bs_nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bs_name' in table 'basesymbol' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebasesymbol.bs_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UseArrowChooser() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablebasesymbol.UseArrowChooserColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UseArrowChooser' in table 'basesymbol' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebasesymbol.UseArrowChooserColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ShowWallPlane() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablebasesymbol.ShowWallPlaneColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ShowWallPlane' in table 'basesymbol' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebasesymbol.ShowWallPlaneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ShowWallPlaneImage() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablebasesymbol.ShowWallPlaneImageColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ShowWallPlaneImage' in table 'basesymbol' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebasesymbol.ShowWallPlaneImageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ShowFloorPlane() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablebasesymbol.ShowFloorPlaneColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ShowFloorPlane' in table 'basesymbol' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebasesymbol.ShowFloorPlaneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ShowFloorPlaneImage() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablebasesymbol.ShowFloorPlaneImageColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ShowFloorPlaneImage' in table 'basesymbol' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebasesymbol.ShowFloorPlaneImageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ShowFlip() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablebasesymbol.ShowFlipColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ShowFlip' in table 'basesymbol' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebasesymbol.ShowFlipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ShowVP3VP7() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablebasesymbol.ShowVP3VP7Column),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ShowVP3VP7' in table 'basesymbol' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebasesymbol.ShowVP3VP7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property symbolgroupRow() As symbolgroupRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_basesymbol_0")),symbolgroupRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_basesymbol_0"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property symbolRowByFK_basesymbol_1() As symbolRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_basesymbol_1")),symbolRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_basesymbol_1"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property cacheRow() As cacheRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_basesymbol_11")),cacheRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_basesymbol_11"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property symbolRowByFK_basesymbol_14() As symbolRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_basesymbol_14")),symbolRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_basesymbol_14"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isbs_sym_codeNull() As Boolean
            Return Me.IsNull(Me.tablebasesymbol.bs_sym_codeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setbs_sym_codeNull()
            Me(Me.tablebasesymbol.bs_sym_codeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isbs_sg_codeNull() As Boolean
            Return Me.IsNull(Me.tablebasesymbol.bs_sg_codeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setbs_sg_codeNull()
            Me(Me.tablebasesymbol.bs_sg_codeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isbs_numNull() As Boolean
            Return Me.IsNull(Me.tablebasesymbol.bs_numColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setbs_numNull()
            Me(Me.tablebasesymbol.bs_numColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isbs_bas_numNull() As Boolean
            Return Me.IsNull(Me.tablebasesymbol.bs_bas_numColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setbs_bas_numNull()
            Me(Me.tablebasesymbol.bs_bas_numColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isbs_var_numNull() As Boolean
            Return Me.IsNull(Me.tablebasesymbol.bs_var_numColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setbs_var_numNull()
            Me(Me.tablebasesymbol.bs_var_numColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isbs_varsNull() As Boolean
            Return Me.IsNull(Me.tablebasesymbol.bs_varsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setbs_varsNull()
            Me(Me.tablebasesymbol.bs_varsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isbs_fillsNull() As Boolean
            Return Me.IsNull(Me.tablebasesymbol.bs_fillsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setbs_fillsNull()
            Me(Me.tablebasesymbol.bs_fillsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isbs_rotsNull() As Boolean
            Return Me.IsNull(Me.tablebasesymbol.bs_rotsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setbs_rotsNull()
            Me(Me.tablebasesymbol.bs_rotsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isbs_nameNull() As Boolean
            Return Me.IsNull(Me.tablebasesymbol.bs_nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setbs_nameNull()
            Me(Me.tablebasesymbol.bs_nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsUseArrowChooserNull() As Boolean
            Return Me.IsNull(Me.tablebasesymbol.UseArrowChooserColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetUseArrowChooserNull()
            Me(Me.tablebasesymbol.UseArrowChooserColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsShowWallPlaneNull() As Boolean
            Return Me.IsNull(Me.tablebasesymbol.ShowWallPlaneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetShowWallPlaneNull()
            Me(Me.tablebasesymbol.ShowWallPlaneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsShowWallPlaneImageNull() As Boolean
            Return Me.IsNull(Me.tablebasesymbol.ShowWallPlaneImageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetShowWallPlaneImageNull()
            Me(Me.tablebasesymbol.ShowWallPlaneImageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsShowFloorPlaneNull() As Boolean
            Return Me.IsNull(Me.tablebasesymbol.ShowFloorPlaneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetShowFloorPlaneNull()
            Me(Me.tablebasesymbol.ShowFloorPlaneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsShowFloorPlaneImageNull() As Boolean
            Return Me.IsNull(Me.tablebasesymbol.ShowFloorPlaneImageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetShowFloorPlaneImageNull()
            Me(Me.tablebasesymbol.ShowFloorPlaneImageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsShowFlipNull() As Boolean
            Return Me.IsNull(Me.tablebasesymbol.ShowFlipColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetShowFlipNull()
            Me(Me.tablebasesymbol.ShowFlipColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsShowVP3VP7Null() As Boolean
            Return Me.IsNull(Me.tablebasesymbol.ShowVP3VP7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetShowVP3VP7Null()
            Me(Me.tablebasesymbol.ShowVP3VP7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetclassificationRows() As classificationRow()
            If (Me.Table.ChildRelations("FK_classification_6") Is Nothing) Then
                Return New classificationRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_classification_6")),classificationRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetsymbolRows() As symbolRow()
            If (Me.Table.ChildRelations("FK_symbol_0") Is Nothing) Then
                Return New symbolRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_symbol_0")),symbolRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class basesymbol1Row
        Inherits Global.System.Data.DataRow
        
        Private tablebasesymbol1 As basesymbol1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablebasesymbol1 = CType(Me.Table,basesymbol1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IDBaseSymbol() As Long
            Get
                Return CType(Me(Me.tablebasesymbol1.IDBaseSymbolColumn),Long)
            End Get
            Set
                Me(Me.tablebasesymbol1.IDBaseSymbolColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IDISWAGroup() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablebasesymbol1.IDISWAGroupColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IDISWAGroup' in table 'basesymbol1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebasesymbol1.IDISWAGroupColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BaseName() As String
            Get
                Try 
                    Return CType(Me(Me.tablebasesymbol1.BaseNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BaseName' in table 'basesymbol1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebasesymbol1.BaseNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Character_Code() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablebasesymbol1.Character_CodeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Character Code' in table 'basesymbol1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebasesymbol1.Character_CodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BaseSymbol() As String
            Get
                Try 
                    Return CType(Me(Me.tablebasesymbol1.BaseSymbolColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BaseSymbol' in table 'basesymbol1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebasesymbol1.BaseSymbolColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Variations() As String
            Get
                Try 
                    Return CType(Me(Me.tablebasesymbol1.VariationsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Variations' in table 'basesymbol1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebasesymbol1.VariationsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Valid_Fills() As String
            Get
                Try 
                    Return CType(Me(Me.tablebasesymbol1.Valid_FillsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Valid Fills' in table 'basesymbol1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebasesymbol1.Valid_FillsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Valid_Rotations() As String
            Get
                Try 
                    Return CType(Me(Me.tablebasesymbol1.Valid_RotationsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Valid Rotations' in table 'basesymbol1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebasesymbol1.Valid_RotationsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IDUIItem() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablebasesymbol1.IDUIItemColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IDUIItem' in table 'basesymbol1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebasesymbol1.IDUIItemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIDISWAGroupNull() As Boolean
            Return Me.IsNull(Me.tablebasesymbol1.IDISWAGroupColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIDISWAGroupNull()
            Me(Me.tablebasesymbol1.IDISWAGroupColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBaseNameNull() As Boolean
            Return Me.IsNull(Me.tablebasesymbol1.BaseNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBaseNameNull()
            Me(Me.tablebasesymbol1.BaseNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCharacter_CodeNull() As Boolean
            Return Me.IsNull(Me.tablebasesymbol1.Character_CodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCharacter_CodeNull()
            Me(Me.tablebasesymbol1.Character_CodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBaseSymbolNull() As Boolean
            Return Me.IsNull(Me.tablebasesymbol1.BaseSymbolColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBaseSymbolNull()
            Me(Me.tablebasesymbol1.BaseSymbolColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsVariationsNull() As Boolean
            Return Me.IsNull(Me.tablebasesymbol1.VariationsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetVariationsNull()
            Me(Me.tablebasesymbol1.VariationsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsValid_FillsNull() As Boolean
            Return Me.IsNull(Me.tablebasesymbol1.Valid_FillsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetValid_FillsNull()
            Me(Me.tablebasesymbol1.Valid_FillsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsValid_RotationsNull() As Boolean
            Return Me.IsNull(Me.tablebasesymbol1.Valid_RotationsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetValid_RotationsNull()
            Me(Me.tablebasesymbol1.Valid_RotationsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIDUIItemNull() As Boolean
            Return Me.IsNull(Me.tablebasesymbol1.IDUIItemColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIDUIItemNull()
            Me(Me.tablebasesymbol1.IDUIItemColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class categoryRow
        Inherits Global.System.Data.DataRow
        
        Private tablecategory As categoryDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablecategory = CType(Me.Table,categoryDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IDCategory() As Integer
            Get
                Return CType(Me(Me.tablecategory.IDCategoryColumn),Integer)
            End Get
            Set
                Me(Me.tablecategory.IDCategoryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CategoryName() As String
            Get
                Try 
                    Return CType(Me(Me.tablecategory.CategoryNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CategoryName' in table 'category' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecategory.CategoryNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IDUIItem() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecategory.IDUIItemColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IDUIItem' in table 'category' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecategory.IDUIItemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCategoryNameNull() As Boolean
            Return Me.IsNull(Me.tablecategory.CategoryNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCategoryNameNull()
            Me(Me.tablecategory.CategoryNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIDUIItemNull() As Boolean
            Return Me.IsNull(Me.tablecategory.IDUIItemColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIDUIItemNull()
            Me(Me.tablecategory.IDUIItemColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetsymbolgroupRows() As symbolgroupRow()
            If (Me.Table.ChildRelations("FK_symbolgroup_1") Is Nothing) Then
                Return New symbolgroupRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_symbolgroup_1")),symbolgroupRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetcacheRows() As cacheRow()
            If (Me.Table.ChildRelations("FK_symbolgroup_11") Is Nothing) Then
                Return New cacheRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_symbolgroup_11")),cacheRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class classificationRow
        Inherits Global.System.Data.DataRow
        
        Private tableclassification As classificationDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableclassification = CType(Me.Table,classificationDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property class_code() As Integer
            Get
                Return CType(Me(Me.tableclassification.class_codeColumn),Integer)
            End Get
            Set
                Me(Me.tableclassification.class_codeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property class_bs_code() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableclassification.class_bs_codeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'class_bs_code' in table 'classification' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableclassification.class_bs_codeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IDRootShapeGroup() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableclassification.IDRootShapeGroupColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IDRootShapeGroup' in table 'classification' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableclassification.IDRootShapeGroupColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IDRootShape() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableclassification.IDRootShapeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IDRootShape' in table 'classification' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableclassification.IDRootShapeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IDRootShapeQuick() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableclassification.IDRootShapeQuickColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IDRootShapeQuick' in table 'classification' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableclassification.IDRootShapeQuickColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IDActionFinger() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableclassification.IDActionFingerColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IDActionFinger' in table 'classification' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableclassification.IDActionFingerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IDMultipleFinger() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableclassification.IDMultipleFingerColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IDMultipleFinger' in table 'classification' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableclassification.IDMultipleFingerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IDThumbPosition() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableclassification.IDThumbPositionColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IDThumbPosition' in table 'classification' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableclassification.IDThumbPositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Thumb() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableclassification.ThumbColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Thumb' in table 'classification' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableclassification.ThumbColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Index() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableclassification.IndexColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Index' in table 'classification' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableclassification.IndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Middle() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableclassification.MiddleColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Middle' in table 'classification' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableclassification.MiddleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Ring() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableclassification.RingColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ring' in table 'classification' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableclassification.RingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Baby() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableclassification.BabyColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Baby' in table 'classification' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableclassification.BabyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property thumbpositionRow() As thumbpositionRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_classification_0")),thumbpositionRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_classification_0"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property multiplefingerRow() As multiplefingerRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_classification_1")),multiplefingerRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_classification_1"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property actionfingerRow() As actionfingerRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_classification_2")),actionfingerRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_classification_2"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property rootshapequickRow() As rootshapequickRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_classification_3")),rootshapequickRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_classification_3"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property rootshapeRow() As rootshapeRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_classification_4")),rootshapeRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_classification_4"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property rootshapegroupRow() As rootshapegroupRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_classification_5")),rootshapegroupRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_classification_5"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property basesymbolRow() As basesymbolRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_classification_6")),basesymbolRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_classification_6"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isclass_bs_codeNull() As Boolean
            Return Me.IsNull(Me.tableclassification.class_bs_codeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setclass_bs_codeNull()
            Me(Me.tableclassification.class_bs_codeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIDRootShapeGroupNull() As Boolean
            Return Me.IsNull(Me.tableclassification.IDRootShapeGroupColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIDRootShapeGroupNull()
            Me(Me.tableclassification.IDRootShapeGroupColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIDRootShapeNull() As Boolean
            Return Me.IsNull(Me.tableclassification.IDRootShapeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIDRootShapeNull()
            Me(Me.tableclassification.IDRootShapeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIDRootShapeQuickNull() As Boolean
            Return Me.IsNull(Me.tableclassification.IDRootShapeQuickColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIDRootShapeQuickNull()
            Me(Me.tableclassification.IDRootShapeQuickColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIDActionFingerNull() As Boolean
            Return Me.IsNull(Me.tableclassification.IDActionFingerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIDActionFingerNull()
            Me(Me.tableclassification.IDActionFingerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIDMultipleFingerNull() As Boolean
            Return Me.IsNull(Me.tableclassification.IDMultipleFingerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIDMultipleFingerNull()
            Me(Me.tableclassification.IDMultipleFingerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIDThumbPositionNull() As Boolean
            Return Me.IsNull(Me.tableclassification.IDThumbPositionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIDThumbPositionNull()
            Me(Me.tableclassification.IDThumbPositionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsThumbNull() As Boolean
            Return Me.IsNull(Me.tableclassification.ThumbColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetThumbNull()
            Me(Me.tableclassification.ThumbColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIndexNull() As Boolean
            Return Me.IsNull(Me.tableclassification.IndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIndexNull()
            Me(Me.tableclassification.IndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMiddleNull() As Boolean
            Return Me.IsNull(Me.tableclassification.MiddleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMiddleNull()
            Me(Me.tableclassification.MiddleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRingNull() As Boolean
            Return Me.IsNull(Me.tableclassification.RingColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRingNull()
            Me(Me.tableclassification.RingColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBabyNull() As Boolean
            Return Me.IsNull(Me.tableclassification.BabyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBabyNull()
            Me(Me.tableclassification.BabyColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class groupRow
        Inherits Global.System.Data.DataRow
        
        Private tablegroup As groupDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablegroup = CType(Me.Table,groupDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IDGroup() As Integer
            Get
                Return CType(Me(Me.tablegroup.IDGroupColumn),Integer)
            End Get
            Set
                Me(Me.tablegroup.IDGroupColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IDISWACategory() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablegroup.IDISWACategoryColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IDISWACategory' in table 'group' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegroup.IDISWACategoryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Hex() As String
            Get
                Try 
                    Return CType(Me(Me.tablegroup.HexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Hex' in table 'group' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegroup.HexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IDSymbol() As String
            Get
                Try 
                    Return CType(Me(Me.tablegroup.IDSymbolColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IDSymbol' in table 'group' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegroup.IDSymbolColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BaseSymbols() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablegroup.BaseSymbolsColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BaseSymbols' in table 'group' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegroup.BaseSymbolsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property StandardColor() As String
            Get
                Try 
                    Return CType(Me(Me.tablegroup.StandardColorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StandardColor' in table 'group' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegroup.StandardColorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SSS() As String
            Get
                Try 
                    Return CType(Me(Me.tablegroup.SSSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SSS' in table 'group' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegroup.SSSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CharacterCode() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablegroup.CharacterCodeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CharacterCode' in table 'group' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablegroup.CharacterCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIDISWACategoryNull() As Boolean
            Return Me.IsNull(Me.tablegroup.IDISWACategoryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIDISWACategoryNull()
            Me(Me.tablegroup.IDISWACategoryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsHexNull() As Boolean
            Return Me.IsNull(Me.tablegroup.HexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetHexNull()
            Me(Me.tablegroup.HexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIDSymbolNull() As Boolean
            Return Me.IsNull(Me.tablegroup.IDSymbolColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIDSymbolNull()
            Me(Me.tablegroup.IDSymbolColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBaseSymbolsNull() As Boolean
            Return Me.IsNull(Me.tablegroup.BaseSymbolsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBaseSymbolsNull()
            Me(Me.tablegroup.BaseSymbolsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsStandardColorNull() As Boolean
            Return Me.IsNull(Me.tablegroup.StandardColorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetStandardColorNull()
            Me(Me.tablegroup.StandardColorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSSSNull() As Boolean
            Return Me.IsNull(Me.tablegroup.SSSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSSSNull()
            Me(Me.tablegroup.SSSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCharacterCodeNull() As Boolean
            Return Me.IsNull(Me.tablegroup.CharacterCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCharacterCodeNull()
            Me(Me.tablegroup.CharacterCodeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class multiplefingerRow
        Inherits Global.System.Data.DataRow
        
        Private tablemultiplefinger As multiplefingerDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablemultiplefinger = CType(Me.Table,multiplefingerDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IDMultipleFinger() As Integer
            Get
                Return CType(Me(Me.tablemultiplefinger.IDMultipleFingerColumn),Integer)
            End Get
            Set
                Me(Me.tablemultiplefinger.IDMultipleFingerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MultipleFingerName() As String
            Get
                Try 
                    Return CType(Me(Me.tablemultiplefinger.MultipleFingerNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MultipleFingerName' in table 'multiplefinger' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemultiplefinger.MultipleFingerNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IDUIItem() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablemultiplefinger.IDUIItemColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IDUIItem' in table 'multiplefinger' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemultiplefinger.IDUIItemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Order() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablemultiplefinger.OrderColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Order' in table 'multiplefinger' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemultiplefinger.OrderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMultipleFingerNameNull() As Boolean
            Return Me.IsNull(Me.tablemultiplefinger.MultipleFingerNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMultipleFingerNameNull()
            Me(Me.tablemultiplefinger.MultipleFingerNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIDUIItemNull() As Boolean
            Return Me.IsNull(Me.tablemultiplefinger.IDUIItemColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIDUIItemNull()
            Me(Me.tablemultiplefinger.IDUIItemColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsOrderNull() As Boolean
            Return Me.IsNull(Me.tablemultiplefinger.OrderColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetOrderNull()
            Me(Me.tablemultiplefinger.OrderColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetclassificationRows() As classificationRow()
            If (Me.Table.ChildRelations("FK_classification_1") Is Nothing) Then
                Return New classificationRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_classification_1")),classificationRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class rootshapeRow
        Inherits Global.System.Data.DataRow
        
        Private tablerootshape As rootshapeDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablerootshape = CType(Me.Table,rootshapeDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IDRootshape() As Integer
            Get
                Return CType(Me(Me.tablerootshape.IDRootshapeColumn),Integer)
            End Get
            Set
                Me(Me.tablerootshape.IDRootshapeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RootshapeName() As String
            Get
                Try 
                    Return CType(Me(Me.tablerootshape.RootshapeNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RootshapeName' in table 'rootshape' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerootshape.RootshapeNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IDUIItem() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablerootshape.IDUIItemColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IDUIItem' in table 'rootshape' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerootshape.IDUIItemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRootshapeNameNull() As Boolean
            Return Me.IsNull(Me.tablerootshape.RootshapeNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRootshapeNameNull()
            Me(Me.tablerootshape.RootshapeNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIDUIItemNull() As Boolean
            Return Me.IsNull(Me.tablerootshape.IDUIItemColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIDUIItemNull()
            Me(Me.tablerootshape.IDUIItemColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetclassificationRows() As classificationRow()
            If (Me.Table.ChildRelations("FK_classification_4") Is Nothing) Then
                Return New classificationRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_classification_4")),classificationRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class rootshapegroupRow
        Inherits Global.System.Data.DataRow
        
        Private tablerootshapegroup As rootshapegroupDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablerootshapegroup = CType(Me.Table,rootshapegroupDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IDRootshapeGroup() As Integer
            Get
                Return CType(Me(Me.tablerootshapegroup.IDRootshapeGroupColumn),Integer)
            End Get
            Set
                Me(Me.tablerootshapegroup.IDRootshapeGroupColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RootshapeGroupName() As String
            Get
                Try 
                    Return CType(Me(Me.tablerootshapegroup.RootshapeGroupNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RootshapeGroupName' in table 'rootshapegroup' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerootshapegroup.RootshapeGroupNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IDUIItem() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablerootshapegroup.IDUIItemColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IDUIItem' in table 'rootshapegroup' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerootshapegroup.IDUIItemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRootshapeGroupNameNull() As Boolean
            Return Me.IsNull(Me.tablerootshapegroup.RootshapeGroupNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRootshapeGroupNameNull()
            Me(Me.tablerootshapegroup.RootshapeGroupNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIDUIItemNull() As Boolean
            Return Me.IsNull(Me.tablerootshapegroup.IDUIItemColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIDUIItemNull()
            Me(Me.tablerootshapegroup.IDUIItemColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetclassificationRows() As classificationRow()
            If (Me.Table.ChildRelations("FK_classification_5") Is Nothing) Then
                Return New classificationRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_classification_5")),classificationRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class rootshapequickRow
        Inherits Global.System.Data.DataRow
        
        Private tablerootshapequick As rootshapequickDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablerootshapequick = CType(Me.Table,rootshapequickDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IDRootshapeQuick() As Integer
            Get
                Return CType(Me(Me.tablerootshapequick.IDRootshapeQuickColumn),Integer)
            End Get
            Set
                Me(Me.tablerootshapequick.IDRootshapeQuickColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RootshapeQuickName() As String
            Get
                Try 
                    Return CType(Me(Me.tablerootshapequick.RootshapeQuickNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RootshapeQuickName' in table 'rootshapequick' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerootshapequick.RootshapeQuickNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IDUIItem() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablerootshapequick.IDUIItemColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IDUIItem' in table 'rootshapequick' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerootshapequick.IDUIItemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRootshapeQuickNameNull() As Boolean
            Return Me.IsNull(Me.tablerootshapequick.RootshapeQuickNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRootshapeQuickNameNull()
            Me(Me.tablerootshapequick.RootshapeQuickNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIDUIItemNull() As Boolean
            Return Me.IsNull(Me.tablerootshapequick.IDUIItemColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIDUIItemNull()
            Me(Me.tablerootshapequick.IDUIItemColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetclassificationRows() As classificationRow()
            If (Me.Table.ChildRelations("FK_classification_3") Is Nothing) Then
                Return New classificationRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_classification_3")),classificationRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class symbolRow
        Inherits Global.System.Data.DataRow
        
        Private tablesymbol As symbolDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesymbol = CType(Me.Table,symbolDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property sym_code() As Integer
            Get
                Return CType(Me(Me.tablesymbol.sym_codeColumn),Integer)
            End Get
            Set
                Me(Me.tablesymbol.sym_codeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property sym_sss() As String
            Get
                Try 
                    Return CType(Me(Me.tablesymbol.sym_sssColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sym_sss' in table 'symbol' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesymbol.sym_sssColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property sym_fill() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesymbol.sym_fillColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sym_fill' in table 'symbol' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesymbol.sym_fillColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property sym_rot() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesymbol.sym_rotColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sym_rot' in table 'symbol' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesymbol.sym_rotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property sym_w() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesymbol.sym_wColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sym_w' in table 'symbol' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesymbol.sym_wColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property sym_h() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesymbol.sym_hColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sym_h' in table 'symbol' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesymbol.sym_hColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property sym_bs_code() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesymbol.sym_bs_codeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sym_bs_code' in table 'symbol' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesymbol.sym_bs_codeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property sym_sg_code() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesymbol.sym_sg_codeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sym_sg_code' in table 'symbol' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesymbol.sym_sg_codeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property sym_png() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tablesymbol.sym_pngColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sym_png' in table 'symbol' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesymbol.sym_pngColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property sym_illus() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tablesymbol.sym_illusColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sym_illus' in table 'symbol' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesymbol.sym_illusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property sym_id() As String
            Get
                Try 
                    Return CType(Me(Me.tablesymbol.sym_idColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sym_id' in table 'symbol' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesymbol.sym_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property sym_svg_line() As String
            Get
                Try 
                    Return CType(Me(Me.tablesymbol.sym_svg_lineColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sym_svg_line' in table 'symbol' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesymbol.sym_svg_lineColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property sym_svg_fill() As String
            Get
                Try 
                    Return CType(Me(Me.tablesymbol.sym_svg_fillColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sym_svg_fill' in table 'symbol' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesymbol.sym_svg_fillColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property sort_weight() As String
            Get
                Try 
                    Return CType(Me(Me.tablesymbol.sort_weightColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sort_weight' in table 'symbol' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesymbol.sort_weightColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property basesymbolRow() As basesymbolRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_symbol_0")),basesymbolRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_symbol_0"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property symbolgroupRow() As symbolgroupRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_symbol_1")),symbolgroupRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_symbol_1"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Issym_sssNull() As Boolean
            Return Me.IsNull(Me.tablesymbol.sym_sssColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setsym_sssNull()
            Me(Me.tablesymbol.sym_sssColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Issym_fillNull() As Boolean
            Return Me.IsNull(Me.tablesymbol.sym_fillColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setsym_fillNull()
            Me(Me.tablesymbol.sym_fillColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Issym_rotNull() As Boolean
            Return Me.IsNull(Me.tablesymbol.sym_rotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setsym_rotNull()
            Me(Me.tablesymbol.sym_rotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Issym_wNull() As Boolean
            Return Me.IsNull(Me.tablesymbol.sym_wColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setsym_wNull()
            Me(Me.tablesymbol.sym_wColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Issym_hNull() As Boolean
            Return Me.IsNull(Me.tablesymbol.sym_hColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setsym_hNull()
            Me(Me.tablesymbol.sym_hColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Issym_bs_codeNull() As Boolean
            Return Me.IsNull(Me.tablesymbol.sym_bs_codeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setsym_bs_codeNull()
            Me(Me.tablesymbol.sym_bs_codeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Issym_sg_codeNull() As Boolean
            Return Me.IsNull(Me.tablesymbol.sym_sg_codeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setsym_sg_codeNull()
            Me(Me.tablesymbol.sym_sg_codeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Issym_pngNull() As Boolean
            Return Me.IsNull(Me.tablesymbol.sym_pngColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setsym_pngNull()
            Me(Me.tablesymbol.sym_pngColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Issym_illusNull() As Boolean
            Return Me.IsNull(Me.tablesymbol.sym_illusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setsym_illusNull()
            Me(Me.tablesymbol.sym_illusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Issym_idNull() As Boolean
            Return Me.IsNull(Me.tablesymbol.sym_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setsym_idNull()
            Me(Me.tablesymbol.sym_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Issym_svg_lineNull() As Boolean
            Return Me.IsNull(Me.tablesymbol.sym_svg_lineColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setsym_svg_lineNull()
            Me(Me.tablesymbol.sym_svg_lineColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Issym_svg_fillNull() As Boolean
            Return Me.IsNull(Me.tablesymbol.sym_svg_fillColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setsym_svg_fillNull()
            Me(Me.tablesymbol.sym_svg_fillColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Issort_weightNull() As Boolean
            Return Me.IsNull(Me.tablesymbol.sort_weightColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setsort_weightNull()
            Me(Me.tablesymbol.sort_weightColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetbasesymbolRowsByFK_basesymbol_1() As basesymbolRow()
            If (Me.Table.ChildRelations("FK_basesymbol_1") Is Nothing) Then
                Return New basesymbolRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_basesymbol_1")),basesymbolRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetsymbolgroupRows() As symbolgroupRow()
            If (Me.Table.ChildRelations("FK_symbolgroup_0") Is Nothing) Then
                Return New symbolgroupRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_symbolgroup_0")),symbolgroupRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetcacheRowsByFK_basesymbol_12() As cacheRow()
            If (Me.Table.ChildRelations("FK_basesymbol_12") Is Nothing) Then
                Return New cacheRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_basesymbol_12")),cacheRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetcacheRowsByFK_basesymbol_13() As cacheRow()
            If (Me.Table.ChildRelations("FK_basesymbol_13") Is Nothing) Then
                Return New cacheRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_basesymbol_13")),cacheRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetbasesymbolRowsByFK_basesymbol_14() As basesymbolRow()
            If (Me.Table.ChildRelations("FK_basesymbol_14") Is Nothing) Then
                Return New basesymbolRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_basesymbol_14")),basesymbolRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class symbolgroupRow
        Inherits Global.System.Data.DataRow
        
        Private tablesymbolgroup As symbolgroupDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesymbolgroup = CType(Me.Table,symbolgroupDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property sg_code() As Integer
            Get
                Return CType(Me(Me.tablesymbolgroup.sg_codeColumn),Integer)
            End Get
            Set
                Me(Me.tablesymbolgroup.sg_codeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property sg_sym_code() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesymbolgroup.sg_sym_codeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sg_sym_code' in table 'symbolgroup' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesymbolgroup.sg_sym_codeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property sg_num() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesymbolgroup.sg_numColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sg_num' in table 'symbolgroup' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesymbolgroup.sg_numColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property sg_cat_num() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesymbolgroup.sg_cat_numColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sg_cat_num' in table 'symbolgroup' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesymbolgroup.sg_cat_numColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property sg_grp_num() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesymbolgroup.sg_grp_numColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sg_grp_num' in table 'symbolgroup' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesymbolgroup.sg_grp_numColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property sg_bases() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesymbolgroup.sg_basesColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sg_bases' in table 'symbolgroup' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesymbolgroup.sg_basesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property sg_color() As String
            Get
                Try 
                    Return CType(Me(Me.tablesymbolgroup.sg_colorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sg_color' in table 'symbolgroup' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesymbolgroup.sg_colorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property sg_token() As String
            Get
                Try 
                    Return CType(Me(Me.tablesymbolgroup.sg_tokenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sg_token' in table 'symbolgroup' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesymbolgroup.sg_tokenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property sg_name() As String
            Get
                Try 
                    Return CType(Me(Me.tablesymbolgroup.sg_nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sg_name' in table 'symbolgroup' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesymbolgroup.sg_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property symbolRow() As symbolRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_symbolgroup_0")),symbolRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_symbolgroup_0"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property categoryRow() As categoryRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_symbolgroup_1")),categoryRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_symbolgroup_1"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property cacheRow() As cacheRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_symbolgroup_01")),cacheRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_symbolgroup_01"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Issg_sym_codeNull() As Boolean
            Return Me.IsNull(Me.tablesymbolgroup.sg_sym_codeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setsg_sym_codeNull()
            Me(Me.tablesymbolgroup.sg_sym_codeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Issg_numNull() As Boolean
            Return Me.IsNull(Me.tablesymbolgroup.sg_numColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setsg_numNull()
            Me(Me.tablesymbolgroup.sg_numColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Issg_cat_numNull() As Boolean
            Return Me.IsNull(Me.tablesymbolgroup.sg_cat_numColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setsg_cat_numNull()
            Me(Me.tablesymbolgroup.sg_cat_numColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Issg_grp_numNull() As Boolean
            Return Me.IsNull(Me.tablesymbolgroup.sg_grp_numColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setsg_grp_numNull()
            Me(Me.tablesymbolgroup.sg_grp_numColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Issg_basesNull() As Boolean
            Return Me.IsNull(Me.tablesymbolgroup.sg_basesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setsg_basesNull()
            Me(Me.tablesymbolgroup.sg_basesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Issg_colorNull() As Boolean
            Return Me.IsNull(Me.tablesymbolgroup.sg_colorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setsg_colorNull()
            Me(Me.tablesymbolgroup.sg_colorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Issg_tokenNull() As Boolean
            Return Me.IsNull(Me.tablesymbolgroup.sg_tokenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setsg_tokenNull()
            Me(Me.tablesymbolgroup.sg_tokenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Issg_nameNull() As Boolean
            Return Me.IsNull(Me.tablesymbolgroup.sg_nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setsg_nameNull()
            Me(Me.tablesymbolgroup.sg_nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetbasesymbolRows() As basesymbolRow()
            If (Me.Table.ChildRelations("FK_basesymbol_0") Is Nothing) Then
                Return New basesymbolRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_basesymbol_0")),basesymbolRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetsymbolRows() As symbolRow()
            If (Me.Table.ChildRelations("FK_symbol_1") Is Nothing) Then
                Return New symbolRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_symbol_1")),symbolRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class thumbpositionRow
        Inherits Global.System.Data.DataRow
        
        Private tablethumbposition As thumbpositionDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablethumbposition = CType(Me.Table,thumbpositionDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IDThumbPosition() As Integer
            Get
                Return CType(Me(Me.tablethumbposition.IDThumbPositionColumn),Integer)
            End Get
            Set
                Me(Me.tablethumbposition.IDThumbPositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ThumbPositionName() As String
            Get
                Try 
                    Return CType(Me(Me.tablethumbposition.ThumbPositionNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ThumbPositionName' in table 'thumbposition' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablethumbposition.ThumbPositionNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IDUIItem() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablethumbposition.IDUIItemColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IDUIItem' in table 'thumbposition' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablethumbposition.IDUIItemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Order() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablethumbposition.OrderColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Order' in table 'thumbposition' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablethumbposition.OrderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsThumbPositionNameNull() As Boolean
            Return Me.IsNull(Me.tablethumbposition.ThumbPositionNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetThumbPositionNameNull()
            Me(Me.tablethumbposition.ThumbPositionNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIDUIItemNull() As Boolean
            Return Me.IsNull(Me.tablethumbposition.IDUIItemColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIDUIItemNull()
            Me(Me.tablethumbposition.IDUIItemColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsOrderNull() As Boolean
            Return Me.IsNull(Me.tablethumbposition.OrderColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetOrderNull()
            Me(Me.tablethumbposition.OrderColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetclassificationRows() As classificationRow()
            If (Me.Table.ChildRelations("FK_classification_0") Is Nothing) Then
                Return New classificationRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_classification_0")),classificationRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class versionRow
        Inherits Global.System.Data.DataRow
        
        Private tableversion As versionDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableversion = CType(Me.Table,versionDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IDVersion() As Integer
            Get
                Return CType(Me(Me.tableversion.IDVersionColumn),Integer)
            End Get
            Set
                Me(Me.tableversion.IDVersionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Major() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableversion.MajorColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Major' in table 'version' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableversion.MajorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Minor() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableversion.MinorColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Minor' in table 'version' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableversion.MinorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DatabaseName() As String
            Get
                Try 
                    Return CType(Me(Me.tableversion.DatabaseNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DatabaseName' in table 'version' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableversion.DatabaseNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DatabaseType() As String
            Get
                Try 
                    Return CType(Me(Me.tableversion.DatabaseTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DatabaseType' in table 'version' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableversion.DatabaseTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMajorNull() As Boolean
            Return Me.IsNull(Me.tableversion.MajorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMajorNull()
            Me(Me.tableversion.MajorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMinorNull() As Boolean
            Return Me.IsNull(Me.tableversion.MinorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMinorNull()
            Me(Me.tableversion.MinorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDatabaseNameNull() As Boolean
            Return Me.IsNull(Me.tableversion.DatabaseNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDatabaseNameNull()
            Me(Me.tableversion.DatabaseNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDatabaseTypeNull() As Boolean
            Return Me.IsNull(Me.tableversion.DatabaseTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDatabaseTypeNull()
            Me(Me.tableversion.DatabaseTypeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class cacheRow
        Inherits Global.System.Data.DataRow
        
        Private tablecache As cacheDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablecache = CType(Me.Table,cacheDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property sym_code() As Integer
            Get
                Return CType(Me(Me.tablecache.sym_codeColumn),Integer)
            End Get
            Set
                Me(Me.tablecache.sym_codeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property sym_fill() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecache.sym_fillColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sym_fill' in table 'cache' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecache.sym_fillColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property sym_rot() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecache.sym_rotColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sym_rot' in table 'cache' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecache.sym_rotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property sym_w() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecache.sym_wColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sym_w' in table 'cache' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecache.sym_wColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property sym_h() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecache.sym_hColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sym_h' in table 'cache' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecache.sym_hColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property sym_png() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tablecache.sym_pngColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sym_png' in table 'cache' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecache.sym_pngColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property sym_illus() As Byte()
            Get
                If Me.Issym_illusNull Then
                    Return Nothing
                Else
                    Return CType(Me(Me.tablecache.sym_illusColumn),Byte())
                End If
            End Get
            Set
                Me(Me.tablecache.sym_illusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property sym_id() As String
            Get
                Try 
                    Return CType(Me(Me.tablecache.sym_idColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sym_id' in table 'cache' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecache.sym_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property sg_cat_num() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecache.sg_cat_numColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sg_cat_num' in table 'cache' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecache.sg_cat_numColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property sg_grp_num() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecache.sg_grp_numColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sg_grp_num' in table 'cache' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecache.sg_grp_numColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bs_bas_num() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecache.bs_bas_numColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bs_bas_num' in table 'cache' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecache.bs_bas_numColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bs_var_num() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecache.bs_var_numColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bs_var_num' in table 'cache' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecache.bs_var_numColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bs_sym_code() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecache.bs_sym_codeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bs_sym_code' in table 'cache' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecache.bs_sym_codeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bs_name() As String
            Get
                Try 
                    Return CType(Me(Me.tablecache.bs_nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bs_name' in table 'cache' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecache.bs_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bs_vars() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecache.bs_varsColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bs_vars' in table 'cache' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecache.bs_varsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bs_fills() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecache.bs_fillsColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bs_fills' in table 'cache' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecache.bs_fillsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bs_rots() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecache.bs_rotsColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bs_rots' in table 'cache' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecache.bs_rotsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property sg_color() As String
            Get
                Try 
                    Return CType(Me(Me.tablecache.sg_colorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sg_color' in table 'cache' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecache.sg_colorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property sym_bs_code() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecache.sym_bs_codeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sym_bs_code' in table 'cache' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecache.sym_bs_codeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property sort_weight() As String
            Get
                Try 
                    Return CType(Me(Me.tablecache.sort_weightColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sort_weight' in table 'cache' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecache.sort_weightColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property symbolRowByFK_basesymbol_12() As symbolRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_basesymbol_12")),symbolRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_basesymbol_12"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property categoryRow() As categoryRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_symbolgroup_11")),categoryRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_symbolgroup_11"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property symbolRowByFK_basesymbol_13() As symbolRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_basesymbol_13")),symbolRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_basesymbol_13"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Issym_fillNull() As Boolean
            Return Me.IsNull(Me.tablecache.sym_fillColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setsym_fillNull()
            Me(Me.tablecache.sym_fillColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Issym_rotNull() As Boolean
            Return Me.IsNull(Me.tablecache.sym_rotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setsym_rotNull()
            Me(Me.tablecache.sym_rotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Issym_wNull() As Boolean
            Return Me.IsNull(Me.tablecache.sym_wColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setsym_wNull()
            Me(Me.tablecache.sym_wColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Issym_hNull() As Boolean
            Return Me.IsNull(Me.tablecache.sym_hColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setsym_hNull()
            Me(Me.tablecache.sym_hColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Issym_pngNull() As Boolean
            Return Me.IsNull(Me.tablecache.sym_pngColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setsym_pngNull()
            Me(Me.tablecache.sym_pngColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Issym_illusNull() As Boolean
            Return Me.IsNull(Me.tablecache.sym_illusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setsym_illusNull()
            Me(Me.tablecache.sym_illusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Issym_idNull() As Boolean
            Return Me.IsNull(Me.tablecache.sym_idColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setsym_idNull()
            Me(Me.tablecache.sym_idColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Issg_cat_numNull() As Boolean
            Return Me.IsNull(Me.tablecache.sg_cat_numColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setsg_cat_numNull()
            Me(Me.tablecache.sg_cat_numColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Issg_grp_numNull() As Boolean
            Return Me.IsNull(Me.tablecache.sg_grp_numColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setsg_grp_numNull()
            Me(Me.tablecache.sg_grp_numColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isbs_bas_numNull() As Boolean
            Return Me.IsNull(Me.tablecache.bs_bas_numColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setbs_bas_numNull()
            Me(Me.tablecache.bs_bas_numColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isbs_var_numNull() As Boolean
            Return Me.IsNull(Me.tablecache.bs_var_numColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setbs_var_numNull()
            Me(Me.tablecache.bs_var_numColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isbs_sym_codeNull() As Boolean
            Return Me.IsNull(Me.tablecache.bs_sym_codeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setbs_sym_codeNull()
            Me(Me.tablecache.bs_sym_codeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isbs_nameNull() As Boolean
            Return Me.IsNull(Me.tablecache.bs_nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setbs_nameNull()
            Me(Me.tablecache.bs_nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isbs_varsNull() As Boolean
            Return Me.IsNull(Me.tablecache.bs_varsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setbs_varsNull()
            Me(Me.tablecache.bs_varsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isbs_fillsNull() As Boolean
            Return Me.IsNull(Me.tablecache.bs_fillsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setbs_fillsNull()
            Me(Me.tablecache.bs_fillsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isbs_rotsNull() As Boolean
            Return Me.IsNull(Me.tablecache.bs_rotsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setbs_rotsNull()
            Me(Me.tablecache.bs_rotsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Issg_colorNull() As Boolean
            Return Me.IsNull(Me.tablecache.sg_colorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setsg_colorNull()
            Me(Me.tablecache.sg_colorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Issym_bs_codeNull() As Boolean
            Return Me.IsNull(Me.tablecache.sym_bs_codeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setsym_bs_codeNull()
            Me(Me.tablecache.sym_bs_codeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Issort_weightNull() As Boolean
            Return Me.IsNull(Me.tablecache.sort_weightColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setsort_weightNull()
            Me(Me.tablecache.sort_weightColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetbasesymbolRows() As basesymbolRow()
            If (Me.Table.ChildRelations("FK_basesymbol_11") Is Nothing) Then
                Return New basesymbolRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_basesymbol_11")),basesymbolRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetsymbolgroupRows() As symbolgroupRow()
            If (Me.Table.ChildRelations("FK_symbolgroup_01") Is Nothing) Then
                Return New symbolgroupRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_symbolgroup_01")),symbolgroupRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class actionfingerRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As actionfingerRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As actionfingerRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As actionfingerRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class basesymbolRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As basesymbolRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As basesymbolRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As basesymbolRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class basesymbol1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As basesymbol1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As basesymbol1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As basesymbol1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class categoryRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As categoryRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As categoryRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As categoryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class classificationRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As classificationRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As classificationRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As classificationRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class groupRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As groupRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As groupRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As groupRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class multiplefingerRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As multiplefingerRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As multiplefingerRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As multiplefingerRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class rootshapeRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As rootshapeRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As rootshapeRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As rootshapeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class rootshapegroupRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As rootshapegroupRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As rootshapegroupRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As rootshapegroupRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class rootshapequickRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As rootshapequickRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As rootshapequickRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As rootshapequickRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class symbolRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As symbolRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As symbolRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As symbolRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class symbolgroupRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As symbolgroupRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As symbolgroupRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As symbolgroupRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class thumbpositionRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As thumbpositionRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As thumbpositionRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As thumbpositionRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class versionRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As versionRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As versionRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As versionRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class cacheRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As cacheRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As cacheRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As cacheRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace ISWA2010DataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class actionfingerTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "actionfinger"
            tableMapping.ColumnMappings.Add("IDActionFinger", "IDActionFinger")
            tableMapping.ColumnMappings.Add("ActionFingerName", "ActionFingerName")
            tableMapping.ColumnMappings.Add("IDUIItem", "IDUIItem")
            tableMapping.ColumnMappings.Add("Order", "Order")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [actionfinger] WHERE (([IDActionFinger] = @Original_IDActionFinger) A"& _ 
                "ND ((@IsNull_ActionFingerName = 1 AND [ActionFingerName] IS NULL) OR ([ActionFin"& _ 
                "gerName] = @Original_ActionFingerName)) AND ((@IsNull_IDUIItem = 1 AND [IDUIItem"& _ 
                "] IS NULL) OR ([IDUIItem] = @Original_IDUIItem)) AND ((@IsNull_Order = 1 AND [Or"& _ 
                "der] IS NULL) OR ([Order] = @Original_Order)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDActionFinger"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDActionFinger"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_ActionFingerName"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "ActionFingerName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_ActionFingerName"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "ActionFingerName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_IDUIItem"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDUIItem"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDUIItem"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDUIItem"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_Order"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Order"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_Order"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Order"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [actionfinger] ([IDActionFinger], [ActionFingerName], [IDUIItem], [Or"& _ 
                "der]) VALUES (@IDActionFinger, @ActionFingerName, @IDUIItem, @Order)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDActionFinger"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDActionFinger"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ActionFingerName"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "ActionFingerName"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDUIItem"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDUIItem"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Order"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Order"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [actionfinger] SET [IDActionFinger] = @IDActionFinger, [ActionFingerName] "& _ 
                "= @ActionFingerName, [IDUIItem] = @IDUIItem, [Order] = @Order WHERE (([IDActionF"& _ 
                "inger] = @Original_IDActionFinger) AND ((@IsNull_ActionFingerName = 1 AND [Actio"& _ 
                "nFingerName] IS NULL) OR ([ActionFingerName] = @Original_ActionFingerName)) AND "& _ 
                "((@IsNull_IDUIItem = 1 AND [IDUIItem] IS NULL) OR ([IDUIItem] = @Original_IDUIIt"& _ 
                "em)) AND ((@IsNull_Order = 1 AND [Order] IS NULL) OR ([Order] = @Original_Order)"& _ 
                "))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDActionFinger"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDActionFinger"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ActionFingerName"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "ActionFingerName"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDUIItem"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDUIItem"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Order"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Order"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDActionFinger"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDActionFinger"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_ActionFingerName"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "ActionFingerName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_ActionFingerName"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "ActionFingerName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_IDUIItem"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDUIItem"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDUIItem"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDUIItem"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_Order"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Order"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_Order"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Order"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.SignWriterStudio.SymbolCache.My.MySettings.Default.ISWA2010ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        IDActionFinger, ActionFingerName, IDUIItem, [Order]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM          "& _ 
                "  actionfinger"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY [Order]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ISWA2010DataSet.actionfingerDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ISWA2010DataSet.actionfingerDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ISWA2010DataSet.actionfingerDataTable = New ISWA2010DataSet.actionfingerDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ISWA2010DataSet.actionfingerDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ISWA2010DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "actionfinger")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_IDActionFinger As Integer, ByVal Original_ActionFingerName As String, ByVal Original_IDUIItem As Global.System.Nullable(Of Integer), ByVal Original_Order As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IDActionFinger,Integer)
            If (Original_ActionFingerName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ActionFingerName,String)
            End If
            If (Original_IDUIItem.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_IDUIItem.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_Order.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Order.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal IDActionFinger As Integer, ByVal ActionFingerName As String, ByVal IDUIItem As Global.System.Nullable(Of Integer), ByVal Order As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(IDActionFinger,Integer)
            If (ActionFingerName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ActionFingerName,String)
            End If
            If (IDUIItem.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(IDUIItem.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Order.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Order.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal IDActionFinger As Integer, ByVal ActionFingerName As String, ByVal IDUIItem As Global.System.Nullable(Of Integer), ByVal Order As Global.System.Nullable(Of Integer), ByVal Original_IDActionFinger As Integer, ByVal Original_ActionFingerName As String, ByVal Original_IDUIItem As Global.System.Nullable(Of Integer), ByVal Original_Order As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(IDActionFinger,Integer)
            If (ActionFingerName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ActionFingerName,String)
            End If
            If (IDUIItem.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(IDUIItem.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Order.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Order.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_IDActionFinger,Integer)
            If (Original_ActionFingerName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_ActionFingerName,String)
            End If
            If (Original_IDUIItem.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_IDUIItem.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_Order.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_Order.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ActionFingerName As String, ByVal IDUIItem As Global.System.Nullable(Of Integer), ByVal Order As Global.System.Nullable(Of Integer), ByVal Original_IDActionFinger As Integer, ByVal Original_ActionFingerName As String, ByVal Original_IDUIItem As Global.System.Nullable(Of Integer), ByVal Original_Order As Global.System.Nullable(Of Integer)) As Integer
            Return Me.Update(Original_IDActionFinger, ActionFingerName, IDUIItem, Order, Original_IDActionFinger, Original_ActionFingerName, Original_IDUIItem, Original_Order)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class basesymbolTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "basesymbol"
            tableMapping.ColumnMappings.Add("bs_code", "bs_code")
            tableMapping.ColumnMappings.Add("bs_sym_code", "bs_sym_code")
            tableMapping.ColumnMappings.Add("bs_sg_code", "bs_sg_code")
            tableMapping.ColumnMappings.Add("bs_num", "bs_num")
            tableMapping.ColumnMappings.Add("bs_bas_num", "bs_bas_num")
            tableMapping.ColumnMappings.Add("bs_var_num", "bs_var_num")
            tableMapping.ColumnMappings.Add("bs_vars", "bs_vars")
            tableMapping.ColumnMappings.Add("bs_fills", "bs_fills")
            tableMapping.ColumnMappings.Add("bs_rots", "bs_rots")
            tableMapping.ColumnMappings.Add("bs_name", "bs_name")
            tableMapping.ColumnMappings.Add("UseArrowChooser", "UseArrowChooser")
            tableMapping.ColumnMappings.Add("ShowWallPlane", "ShowWallPlane")
            tableMapping.ColumnMappings.Add("ShowWallPlaneImage", "ShowWallPlaneImage")
            tableMapping.ColumnMappings.Add("ShowFloorPlane", "ShowFloorPlane")
            tableMapping.ColumnMappings.Add("ShowFloorPlaneImage", "ShowFloorPlaneImage")
            tableMapping.ColumnMappings.Add("ShowFlip", "ShowFlip")
            tableMapping.ColumnMappings.Add("ShowVP3VP7", "ShowVP3VP7")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [main].[sqlite_default_schema].[basesymbol] WHERE (([bs_code] = @Orig"& _ 
                "inal_bs_code) AND ((@IsNull_bs_sym_code = 1 AND [bs_sym_code] IS NULL) OR ([bs_s"& _ 
                "ym_code] = @Original_bs_sym_code)) AND ((@IsNull_bs_sg_code = 1 AND [bs_sg_code]"& _ 
                " IS NULL) OR ([bs_sg_code] = @Original_bs_sg_code)) AND ((@IsNull_bs_num = 1 AND"& _ 
                " [bs_num] IS NULL) OR ([bs_num] = @Original_bs_num)) AND ((@IsNull_bs_bas_num = "& _ 
                "1 AND [bs_bas_num] IS NULL) OR ([bs_bas_num] = @Original_bs_bas_num)) AND ((@IsN"& _ 
                "ull_bs_var_num = 1 AND [bs_var_num] IS NULL) OR ([bs_var_num] = @Original_bs_var"& _ 
                "_num)) AND ((@IsNull_bs_vars = 1 AND [bs_vars] IS NULL) OR ([bs_vars] = @Origina"& _ 
                "l_bs_vars)) AND ((@IsNull_bs_fills = 1 AND [bs_fills] IS NULL) OR ([bs_fills] = "& _ 
                "@Original_bs_fills)) AND ((@IsNull_bs_rots = 1 AND [bs_rots] IS NULL) OR ([bs_ro"& _ 
                "ts] = @Original_bs_rots)) AND ((@IsNull_bs_name = 1 AND [bs_name] IS NULL) OR (["& _ 
                "bs_name] = @Original_bs_name)) AND ((@IsNull_UseArrowChooser = 1 AND [UseArrowCh"& _ 
                "ooser] IS NULL) OR ([UseArrowChooser] = @Original_UseArrowChooser)) AND ((@IsNul"& _ 
                "l_ShowWallPlane = 1 AND [ShowWallPlane] IS NULL) OR ([ShowWallPlane] = @Original"& _ 
                "_ShowWallPlane)) AND ((@IsNull_ShowWallPlaneImage = 1 AND [ShowWallPlaneImage] I"& _ 
                "S NULL) OR ([ShowWallPlaneImage] = @Original_ShowWallPlaneImage)) AND ((@IsNull_"& _ 
                "ShowFloorPlane = 1 AND [ShowFloorPlane] IS NULL) OR ([ShowFloorPlane] = @Origina"& _ 
                "l_ShowFloorPlane)) AND ((@IsNull_ShowFloorPlaneImage = 1 AND [ShowFloorPlaneImag"& _ 
                "e] IS NULL) OR ([ShowFloorPlaneImage] = @Original_ShowFloorPlaneImage)) AND ((@I"& _ 
                "sNull_ShowFlip = 1 AND [ShowFlip] IS NULL) OR ([ShowFlip] = @Original_ShowFlip))"& _ 
                " AND ((@IsNull_ShowVP3VP7 = 1 AND [ShowVP3VP7] IS NULL) OR ([ShowVP3VP7] = @Orig"& _ 
                "inal_ShowVP3VP7)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_bs_code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bs_code"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_bs_sym_code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bs_sym_code"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_bs_sym_code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bs_sym_code"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_bs_sg_code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bs_sg_code"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_bs_sg_code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bs_sg_code"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_bs_num"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bs_num"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_bs_num"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bs_num"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_bs_bas_num"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bs_bas_num"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_bs_bas_num"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bs_bas_num"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_bs_var_num"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bs_var_num"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_bs_var_num"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bs_var_num"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_bs_vars"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bs_vars"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_bs_vars"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bs_vars"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_bs_fills"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bs_fills"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_bs_fills"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bs_fills"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_bs_rots"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bs_rots"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_bs_rots"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bs_rots"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_bs_name"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bs_name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_bs_name"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "bs_name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_UseArrowChooser"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "UseArrowChooser"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_UseArrowChooser"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "UseArrowChooser"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_ShowWallPlane"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "ShowWallPlane"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_ShowWallPlane"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "ShowWallPlane"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_ShowWallPlaneImage"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "ShowWallPlaneImage"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_ShowWallPlaneImage"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "ShowWallPlaneImage"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_ShowFloorPlane"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "ShowFloorPlane"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_ShowFloorPlane"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "ShowFloorPlane"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_ShowFloorPlaneImage"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "ShowFloorPlaneImage"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_ShowFloorPlaneImage"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "ShowFloorPlaneImage"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_ShowFlip"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "ShowFlip"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_ShowFlip"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "ShowFlip"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_ShowVP3VP7"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "ShowVP3VP7"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_ShowVP3VP7"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "ShowVP3VP7"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [main].[sqlite_default_schema].[basesymbol] ([bs_code], [bs_sym_code]"& _ 
                ", [bs_sg_code], [bs_num], [bs_bas_num], [bs_var_num], [bs_vars], [bs_fills], [bs"& _ 
                "_rots], [bs_name], [UseArrowChooser], [ShowWallPlane], [ShowWallPlaneImage], [Sh"& _ 
                "owFloorPlane], [ShowFloorPlaneImage], [ShowFlip], [ShowVP3VP7]) VALUES (@bs_code"& _ 
                ", @bs_sym_code, @bs_sg_code, @bs_num, @bs_bas_num, @bs_var_num, @bs_vars, @bs_fi"& _ 
                "lls, @bs_rots, @bs_name, @UseArrowChooser, @ShowWallPlane, @ShowWallPlaneImage, "& _ 
                "@ShowFloorPlane, @ShowFloorPlaneImage, @ShowFlip, @ShowVP3VP7)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@bs_code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bs_code"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@bs_sym_code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bs_sym_code"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@bs_sg_code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bs_sg_code"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@bs_num"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bs_num"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@bs_bas_num"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bs_bas_num"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@bs_var_num"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bs_var_num"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@bs_vars"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bs_vars"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@bs_fills"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bs_fills"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@bs_rots"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bs_rots"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@bs_name"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "bs_name"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@UseArrowChooser"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "UseArrowChooser"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ShowWallPlane"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "ShowWallPlane"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ShowWallPlaneImage"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "ShowWallPlaneImage"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ShowFloorPlane"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "ShowFloorPlane"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ShowFloorPlaneImage"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "ShowFloorPlaneImage"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ShowFlip"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "ShowFlip"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ShowVP3VP7"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "ShowVP3VP7"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [main].[sqlite_default_schema].[basesymbol] SET [bs_code] = @bs_code, [bs_"& _ 
                "sym_code] = @bs_sym_code, [bs_sg_code] = @bs_sg_code, [bs_num] = @bs_num, [bs_ba"& _ 
                "s_num] = @bs_bas_num, [bs_var_num] = @bs_var_num, [bs_vars] = @bs_vars, [bs_fill"& _ 
                "s] = @bs_fills, [bs_rots] = @bs_rots, [bs_name] = @bs_name, [UseArrowChooser] = "& _ 
                "@UseArrowChooser, [ShowWallPlane] = @ShowWallPlane, [ShowWallPlaneImage] = @Show"& _ 
                "WallPlaneImage, [ShowFloorPlane] = @ShowFloorPlane, [ShowFloorPlaneImage] = @Sho"& _ 
                "wFloorPlaneImage, [ShowFlip] = @ShowFlip, [ShowVP3VP7] = @ShowVP3VP7 WHERE (([bs"& _ 
                "_code] = @Original_bs_code) AND ((@IsNull_bs_sym_code = 1 AND [bs_sym_code] IS N"& _ 
                "ULL) OR ([bs_sym_code] = @Original_bs_sym_code)) AND ((@IsNull_bs_sg_code = 1 AN"& _ 
                "D [bs_sg_code] IS NULL) OR ([bs_sg_code] = @Original_bs_sg_code)) AND ((@IsNull_"& _ 
                "bs_num = 1 AND [bs_num] IS NULL) OR ([bs_num] = @Original_bs_num)) AND ((@IsNull"& _ 
                "_bs_bas_num = 1 AND [bs_bas_num] IS NULL) OR ([bs_bas_num] = @Original_bs_bas_nu"& _ 
                "m)) AND ((@IsNull_bs_var_num = 1 AND [bs_var_num] IS NULL) OR ([bs_var_num] = @O"& _ 
                "riginal_bs_var_num)) AND ((@IsNull_bs_vars = 1 AND [bs_vars] IS NULL) OR ([bs_va"& _ 
                "rs] = @Original_bs_vars)) AND ((@IsNull_bs_fills = 1 AND [bs_fills] IS NULL) OR "& _ 
                "([bs_fills] = @Original_bs_fills)) AND ((@IsNull_bs_rots = 1 AND [bs_rots] IS NU"& _ 
                "LL) OR ([bs_rots] = @Original_bs_rots)) AND ((@IsNull_bs_name = 1 AND [bs_name] "& _ 
                "IS NULL) OR ([bs_name] = @Original_bs_name)) AND ((@IsNull_UseArrowChooser = 1 A"& _ 
                "ND [UseArrowChooser] IS NULL) OR ([UseArrowChooser] = @Original_UseArrowChooser)"& _ 
                ") AND ((@IsNull_ShowWallPlane = 1 AND [ShowWallPlane] IS NULL) OR ([ShowWallPlan"& _ 
                "e] = @Original_ShowWallPlane)) AND ((@IsNull_ShowWallPlaneImage = 1 AND [ShowWal"& _ 
                "lPlaneImage] IS NULL) OR ([ShowWallPlaneImage] = @Original_ShowWallPlaneImage)) "& _ 
                "AND ((@IsNull_ShowFloorPlane = 1 AND [ShowFloorPlane] IS NULL) OR ([ShowFloorPla"& _ 
                "ne] = @Original_ShowFloorPlane)) AND ((@IsNull_ShowFloorPlaneImage = 1 AND [Show"& _ 
                "FloorPlaneImage] IS NULL) OR ([ShowFloorPlaneImage] = @Original_ShowFloorPlaneIm"& _ 
                "age)) AND ((@IsNull_ShowFlip = 1 AND [ShowFlip] IS NULL) OR ([ShowFlip] = @Origi"& _ 
                "nal_ShowFlip)) AND ((@IsNull_ShowVP3VP7 = 1 AND [ShowVP3VP7] IS NULL) OR ([ShowV"& _ 
                "P3VP7] = @Original_ShowVP3VP7)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@bs_code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bs_code"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@bs_sym_code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bs_sym_code"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@bs_sg_code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bs_sg_code"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@bs_num"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bs_num"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@bs_bas_num"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bs_bas_num"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@bs_var_num"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bs_var_num"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@bs_vars"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bs_vars"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@bs_fills"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bs_fills"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@bs_rots"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bs_rots"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@bs_name"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "bs_name"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@UseArrowChooser"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "UseArrowChooser"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ShowWallPlane"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "ShowWallPlane"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ShowWallPlaneImage"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "ShowWallPlaneImage"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ShowFloorPlane"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "ShowFloorPlane"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ShowFloorPlaneImage"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "ShowFloorPlaneImage"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ShowFlip"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "ShowFlip"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ShowVP3VP7"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "ShowVP3VP7"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_bs_code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bs_code"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_bs_sym_code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bs_sym_code"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_bs_sym_code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bs_sym_code"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_bs_sg_code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bs_sg_code"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_bs_sg_code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bs_sg_code"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_bs_num"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bs_num"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_bs_num"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bs_num"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_bs_bas_num"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bs_bas_num"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_bs_bas_num"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bs_bas_num"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_bs_var_num"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bs_var_num"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_bs_var_num"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bs_var_num"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_bs_vars"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bs_vars"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_bs_vars"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bs_vars"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_bs_fills"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bs_fills"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_bs_fills"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bs_fills"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_bs_rots"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bs_rots"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_bs_rots"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bs_rots"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_bs_name"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "bs_name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_bs_name"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "bs_name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_UseArrowChooser"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "UseArrowChooser"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_UseArrowChooser"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "UseArrowChooser"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_ShowWallPlane"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "ShowWallPlane"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_ShowWallPlane"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "ShowWallPlane"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_ShowWallPlaneImage"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "ShowWallPlaneImage"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_ShowWallPlaneImage"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "ShowWallPlaneImage"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_ShowFloorPlane"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "ShowFloorPlane"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_ShowFloorPlane"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "ShowFloorPlane"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_ShowFloorPlaneImage"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "ShowFloorPlaneImage"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_ShowFloorPlaneImage"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "ShowFloorPlaneImage"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_ShowFlip"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "ShowFlip"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_ShowFlip"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "ShowFlip"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_ShowVP3VP7"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "ShowVP3VP7"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_ShowVP3VP7"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "ShowVP3VP7"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.SignWriterStudio.SymbolCache.My.MySettings.Default.ISWA2010ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        bs_code, bs_sym_code, bs_sg_code, bs_num, bs_bas_num, bs_var_num, b"& _ 
                "s_vars, bs_fills, bs_rots, bs_name, UseArrowChooser, ShowWallPlane, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"          "& _ 
                "               ShowWallPlaneImage, ShowFloorPlane, ShowFloorPlaneImage, ShowFlip"& _ 
                ", ShowVP3VP7"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            basesymbol"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT ShowFlip, ShowFloorPlane, ShowFloorPlaneImage, ShowVP3VP7, ShowWallPlane, "& _ 
                "ShowWallPlaneImage, UseArrowChooser, bs_bas_num, bs_code, bs_fills, bs_name, bs_"& _ 
                "num, bs_rots, bs_sg_code, bs_sym_code, bs_var_num, bs_vars FROM basesymbol WHERE"& _ 
                " (bs_code = @bs_code)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@bs_code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.SourceColumn = "bs_code"
            Me._commandCollection(1).Parameters.Add(param)
            Me._commandCollection(2) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT basesymbol.ShowFlip, basesymbol.ShowFloorPlane, basesymbol.ShowFloorPlaneI"& _ 
                "mage, basesymbol.ShowVP3VP7, basesymbol.ShowWallPlane, basesymbol.ShowWallPlaneI"& _ 
                "mage, basesymbol.UseArrowChooser, basesymbol.bs_bas_num, basesymbol.bs_code, bas"& _ 
                "esymbol.bs_fills, basesymbol.bs_name, basesymbol.bs_num, basesymbol.bs_rots, bas"& _ 
                "esymbol.bs_sg_code, basesymbol.bs_sym_code, basesymbol.bs_var_num, basesymbol.bs"& _ 
                "_vars FROM basesymbol INNER JOIN symbolgroup ON basesymbol.bs_sg_code = symbolgr"& _ 
                "oup.sg_code WHERE (symbolgroup.sg_cat_num = 1)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ISWA2010DataSet.basesymbolDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ISWA2010DataSet.basesymbolDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ISWA2010DataSet.basesymbolDataTable = New ISWA2010DataSet.basesymbolDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillArrowChooser(ByVal dataTable As ISWA2010DataSet.basesymbolDataTable, ByVal bs_code As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(bs_code,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataArrowChooser(ByVal bs_code As Integer) As ISWA2010DataSet.basesymbolDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(bs_code,Integer)
            Dim dataTable As ISWA2010DataSet.basesymbolDataTable = New ISWA2010DataSet.basesymbolDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBySymbolNameHand(ByVal dataTable As ISWA2010DataSet.basesymbolDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBySymbolNameHand() As ISWA2010DataSet.basesymbolDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Dim dataTable As ISWA2010DataSet.basesymbolDataTable = New ISWA2010DataSet.basesymbolDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ISWA2010DataSet.basesymbolDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ISWA2010DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "basesymbol")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_bs_code As Integer,  _
                    ByVal Original_bs_sym_code As Global.System.Nullable(Of Integer),  _
                    ByVal Original_bs_sg_code As Global.System.Nullable(Of Integer),  _
                    ByVal Original_bs_num As Global.System.Nullable(Of Integer),  _
                    ByVal Original_bs_bas_num As Global.System.Nullable(Of Integer),  _
                    ByVal Original_bs_var_num As Global.System.Nullable(Of Integer),  _
                    ByVal Original_bs_vars As Global.System.Nullable(Of Integer),  _
                    ByVal Original_bs_fills As Global.System.Nullable(Of Integer),  _
                    ByVal Original_bs_rots As Global.System.Nullable(Of Integer),  _
                    ByVal Original_bs_name As String,  _
                    ByVal Original_UseArrowChooser As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_ShowWallPlane As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_ShowWallPlaneImage As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_ShowFloorPlane As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_ShowFloorPlaneImage As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_ShowFlip As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_ShowVP3VP7 As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_bs_code,Integer)
            If (Original_bs_sym_code.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_bs_sym_code.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_bs_sg_code.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_bs_sg_code.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_bs_num.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_bs_num.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_bs_bas_num.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_bs_bas_num.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_bs_var_num.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_bs_var_num.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_bs_vars.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_bs_vars.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_bs_fills.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_bs_fills.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_bs_rots.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_bs_rots.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_bs_name Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_bs_name,String)
            End If
            If (Original_UseArrowChooser.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_UseArrowChooser.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_ShowWallPlane.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_ShowWallPlane.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_ShowWallPlaneImage.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_ShowWallPlaneImage.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_ShowFloorPlane.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_ShowFloorPlane.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_ShowFloorPlaneImage.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_ShowFloorPlaneImage.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Original_ShowFlip.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_ShowFlip.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (Original_ShowVP3VP7.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_ShowVP3VP7.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal bs_code As Integer,  _
                    ByVal bs_sym_code As Global.System.Nullable(Of Integer),  _
                    ByVal bs_sg_code As Global.System.Nullable(Of Integer),  _
                    ByVal bs_num As Global.System.Nullable(Of Integer),  _
                    ByVal bs_bas_num As Global.System.Nullable(Of Integer),  _
                    ByVal bs_var_num As Global.System.Nullable(Of Integer),  _
                    ByVal bs_vars As Global.System.Nullable(Of Integer),  _
                    ByVal bs_fills As Global.System.Nullable(Of Integer),  _
                    ByVal bs_rots As Global.System.Nullable(Of Integer),  _
                    ByVal bs_name As String,  _
                    ByVal UseArrowChooser As Global.System.Nullable(Of Boolean),  _
                    ByVal ShowWallPlane As Global.System.Nullable(Of Boolean),  _
                    ByVal ShowWallPlaneImage As Global.System.Nullable(Of Boolean),  _
                    ByVal ShowFloorPlane As Global.System.Nullable(Of Boolean),  _
                    ByVal ShowFloorPlaneImage As Global.System.Nullable(Of Boolean),  _
                    ByVal ShowFlip As Global.System.Nullable(Of Boolean),  _
                    ByVal ShowVP3VP7 As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(bs_code,Integer)
            If (bs_sym_code.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(bs_sym_code.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (bs_sg_code.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(bs_sg_code.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (bs_num.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(bs_num.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (bs_bas_num.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(bs_bas_num.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (bs_var_num.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(bs_var_num.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (bs_vars.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(bs_vars.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (bs_fills.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(bs_fills.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (bs_rots.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(bs_rots.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (bs_name Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(bs_name,String)
            End If
            If (UseArrowChooser.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(UseArrowChooser.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (ShowWallPlane.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(ShowWallPlane.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (ShowWallPlaneImage.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(ShowWallPlaneImage.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (ShowFloorPlane.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(ShowFloorPlane.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (ShowFloorPlaneImage.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(ShowFloorPlaneImage.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (ShowFlip.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(ShowFlip.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (ShowVP3VP7.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(ShowVP3VP7.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal bs_code As Integer,  _
                    ByVal bs_sym_code As Global.System.Nullable(Of Integer),  _
                    ByVal bs_sg_code As Global.System.Nullable(Of Integer),  _
                    ByVal bs_num As Global.System.Nullable(Of Integer),  _
                    ByVal bs_bas_num As Global.System.Nullable(Of Integer),  _
                    ByVal bs_var_num As Global.System.Nullable(Of Integer),  _
                    ByVal bs_vars As Global.System.Nullable(Of Integer),  _
                    ByVal bs_fills As Global.System.Nullable(Of Integer),  _
                    ByVal bs_rots As Global.System.Nullable(Of Integer),  _
                    ByVal bs_name As String,  _
                    ByVal UseArrowChooser As Global.System.Nullable(Of Boolean),  _
                    ByVal ShowWallPlane As Global.System.Nullable(Of Boolean),  _
                    ByVal ShowWallPlaneImage As Global.System.Nullable(Of Boolean),  _
                    ByVal ShowFloorPlane As Global.System.Nullable(Of Boolean),  _
                    ByVal ShowFloorPlaneImage As Global.System.Nullable(Of Boolean),  _
                    ByVal ShowFlip As Global.System.Nullable(Of Boolean),  _
                    ByVal ShowVP3VP7 As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_bs_code As Integer,  _
                    ByVal Original_bs_sym_code As Global.System.Nullable(Of Integer),  _
                    ByVal Original_bs_sg_code As Global.System.Nullable(Of Integer),  _
                    ByVal Original_bs_num As Global.System.Nullable(Of Integer),  _
                    ByVal Original_bs_bas_num As Global.System.Nullable(Of Integer),  _
                    ByVal Original_bs_var_num As Global.System.Nullable(Of Integer),  _
                    ByVal Original_bs_vars As Global.System.Nullable(Of Integer),  _
                    ByVal Original_bs_fills As Global.System.Nullable(Of Integer),  _
                    ByVal Original_bs_rots As Global.System.Nullable(Of Integer),  _
                    ByVal Original_bs_name As String,  _
                    ByVal Original_UseArrowChooser As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_ShowWallPlane As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_ShowWallPlaneImage As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_ShowFloorPlane As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_ShowFloorPlaneImage As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_ShowFlip As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_ShowVP3VP7 As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(bs_code,Integer)
            If (bs_sym_code.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(bs_sym_code.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (bs_sg_code.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(bs_sg_code.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (bs_num.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(bs_num.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (bs_bas_num.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(bs_bas_num.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (bs_var_num.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(bs_var_num.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (bs_vars.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(bs_vars.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (bs_fills.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(bs_fills.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (bs_rots.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(bs_rots.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (bs_name Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(bs_name,String)
            End If
            If (UseArrowChooser.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(UseArrowChooser.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (ShowWallPlane.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(ShowWallPlane.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (ShowWallPlaneImage.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(ShowWallPlaneImage.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (ShowFloorPlane.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(ShowFloorPlane.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (ShowFloorPlaneImage.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(ShowFloorPlaneImage.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (ShowFlip.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(ShowFlip.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (ShowVP3VP7.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(ShowVP3VP7.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_bs_code,Integer)
            If (Original_bs_sym_code.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_bs_sym_code.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Original_bs_sg_code.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_bs_sg_code.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (Original_bs_num.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_bs_num.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (Original_bs_bas_num.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_bs_bas_num.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (Original_bs_var_num.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_bs_var_num.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (Original_bs_vars.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_bs_vars.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (Original_bs_fills.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_bs_fills.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (Original_bs_rots.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_bs_rots.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (Original_bs_name Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_bs_name,String)
            End If
            If (Original_UseArrowChooser.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_UseArrowChooser.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (Original_ShowWallPlane.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_ShowWallPlane.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (Original_ShowWallPlaneImage.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_ShowWallPlaneImage.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (Original_ShowFloorPlane.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_ShowFloorPlane.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (Original_ShowFloorPlaneImage.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_ShowFloorPlaneImage.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            End If
            If (Original_ShowFlip.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_ShowFlip.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (Original_ShowVP3VP7.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_ShowVP3VP7.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal bs_sym_code As Global.System.Nullable(Of Integer),  _
                    ByVal bs_sg_code As Global.System.Nullable(Of Integer),  _
                    ByVal bs_num As Global.System.Nullable(Of Integer),  _
                    ByVal bs_bas_num As Global.System.Nullable(Of Integer),  _
                    ByVal bs_var_num As Global.System.Nullable(Of Integer),  _
                    ByVal bs_vars As Global.System.Nullable(Of Integer),  _
                    ByVal bs_fills As Global.System.Nullable(Of Integer),  _
                    ByVal bs_rots As Global.System.Nullable(Of Integer),  _
                    ByVal bs_name As String,  _
                    ByVal UseArrowChooser As Global.System.Nullable(Of Boolean),  _
                    ByVal ShowWallPlane As Global.System.Nullable(Of Boolean),  _
                    ByVal ShowWallPlaneImage As Global.System.Nullable(Of Boolean),  _
                    ByVal ShowFloorPlane As Global.System.Nullable(Of Boolean),  _
                    ByVal ShowFloorPlaneImage As Global.System.Nullable(Of Boolean),  _
                    ByVal ShowFlip As Global.System.Nullable(Of Boolean),  _
                    ByVal ShowVP3VP7 As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_bs_code As Integer,  _
                    ByVal Original_bs_sym_code As Global.System.Nullable(Of Integer),  _
                    ByVal Original_bs_sg_code As Global.System.Nullable(Of Integer),  _
                    ByVal Original_bs_num As Global.System.Nullable(Of Integer),  _
                    ByVal Original_bs_bas_num As Global.System.Nullable(Of Integer),  _
                    ByVal Original_bs_var_num As Global.System.Nullable(Of Integer),  _
                    ByVal Original_bs_vars As Global.System.Nullable(Of Integer),  _
                    ByVal Original_bs_fills As Global.System.Nullable(Of Integer),  _
                    ByVal Original_bs_rots As Global.System.Nullable(Of Integer),  _
                    ByVal Original_bs_name As String,  _
                    ByVal Original_UseArrowChooser As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_ShowWallPlane As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_ShowWallPlaneImage As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_ShowFloorPlane As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_ShowFloorPlaneImage As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_ShowFlip As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_ShowVP3VP7 As Global.System.Nullable(Of Boolean)) As Integer
            Return Me.Update(Original_bs_code, bs_sym_code, bs_sg_code, bs_num, bs_bas_num, bs_var_num, bs_vars, bs_fills, bs_rots, bs_name, UseArrowChooser, ShowWallPlane, ShowWallPlaneImage, ShowFloorPlane, ShowFloorPlaneImage, ShowFlip, ShowVP3VP7, Original_bs_code, Original_bs_sym_code, Original_bs_sg_code, Original_bs_num, Original_bs_bas_num, Original_bs_var_num, Original_bs_vars, Original_bs_fills, Original_bs_rots, Original_bs_name, Original_UseArrowChooser, Original_ShowWallPlane, Original_ShowWallPlaneImage, Original_ShowFloorPlane, Original_ShowFloorPlaneImage, Original_ShowFlip, Original_ShowVP3VP7)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class basesymbol1TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "basesymbol1"
            tableMapping.ColumnMappings.Add("IDBaseSymbol", "IDBaseSymbol")
            tableMapping.ColumnMappings.Add("IDISWAGroup", "IDISWAGroup")
            tableMapping.ColumnMappings.Add("BaseName", "BaseName")
            tableMapping.ColumnMappings.Add("Character Code", "Character Code")
            tableMapping.ColumnMappings.Add("BaseSymbol", "BaseSymbol")
            tableMapping.ColumnMappings.Add("Variations", "Variations")
            tableMapping.ColumnMappings.Add("Valid Fills", "Valid Fills")
            tableMapping.ColumnMappings.Add("Valid Rotations", "Valid Rotations")
            tableMapping.ColumnMappings.Add("IDUIItem", "IDUIItem")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [basesymbol1] WHERE (([IDBaseSymbol] = @Original_IDBaseSymbol) AND (("& _ 
                "@IsNull_IDISWAGroup = 1 AND [IDISWAGroup] IS NULL) OR ([IDISWAGroup] = @Original"& _ 
                "_IDISWAGroup)) AND ((@IsNull_BaseName = 1 AND [BaseName] IS NULL) OR ([BaseName]"& _ 
                " = @Original_BaseName)) AND ((@IsNull_Character_Code = 1 AND [Character Code] IS"& _ 
                " NULL) OR ([Character Code] = @Original_Character_Code)) AND ((@IsNull_BaseSymbo"& _ 
                "l = 1 AND [BaseSymbol] IS NULL) OR ([BaseSymbol] = @Original_BaseSymbol)) AND (("& _ 
                "@IsNull_Variations = 1 AND [Variations] IS NULL) OR ([Variations] = @Original_Va"& _ 
                "riations)) AND ((@IsNull_Valid_Fills = 1 AND [Valid Fills] IS NULL) OR ([Valid F"& _ 
                "ills] = @Original_Valid_Fills)) AND ((@IsNull_Valid_Rotations = 1 AND [Valid Rot"& _ 
                "ations] IS NULL) OR ([Valid Rotations] = @Original_Valid_Rotations)) AND ((@IsNu"& _ 
                "ll_IDUIItem = 1 AND [IDUIItem] IS NULL) OR ([IDUIItem] = @Original_IDUIItem)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDBaseSymbol"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "IDBaseSymbol"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_IDISWAGroup"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDISWAGroup"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDISWAGroup"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDISWAGroup"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_BaseName"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "BaseName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_BaseName"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "BaseName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_Character_Code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Character Code"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_Character_Code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Character Code"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_BaseSymbol"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "BaseSymbol"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_BaseSymbol"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "BaseSymbol"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_Variations"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Variations"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_Variations"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Variations"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_Valid_Fills"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Valid Fills"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_Valid_Fills"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Valid Fills"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_Valid_Rotations"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Valid Rotations"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_Valid_Rotations"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Valid Rotations"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_IDUIItem"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDUIItem"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDUIItem"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDUIItem"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [basesymbol1] ([IDBaseSymbol], [IDISWAGroup], [BaseName], [Character "& _ 
                "Code], [BaseSymbol], [Variations], [Valid Fills], [Valid Rotations], [IDUIItem])"& _ 
                " VALUES (@IDBaseSymbol, @IDISWAGroup, @BaseName, @Character_Code, @BaseSymbol, @"& _ 
                "Variations, @Valid_Fills, @Valid_Rotations, @IDUIItem)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDBaseSymbol"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "IDBaseSymbol"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDISWAGroup"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDISWAGroup"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@BaseName"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "BaseName"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Character_Code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Character Code"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@BaseSymbol"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "BaseSymbol"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Variations"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Variations"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Valid_Fills"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Valid Fills"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Valid_Rotations"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Valid Rotations"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDUIItem"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDUIItem"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [basesymbol1] SET [IDBaseSymbol] = @IDBaseSymbol, [IDISWAGroup] = @IDISWAG"& _ 
                "roup, [BaseName] = @BaseName, [Character Code] = @Character_Code, [BaseSymbol] ="& _ 
                " @BaseSymbol, [Variations] = @Variations, [Valid Fills] = @Valid_Fills, [Valid R"& _ 
                "otations] = @Valid_Rotations, [IDUIItem] = @IDUIItem WHERE (([IDBaseSymbol] = @O"& _ 
                "riginal_IDBaseSymbol) AND ((@IsNull_IDISWAGroup = 1 AND [IDISWAGroup] IS NULL) O"& _ 
                "R ([IDISWAGroup] = @Original_IDISWAGroup)) AND ((@IsNull_BaseName = 1 AND [BaseN"& _ 
                "ame] IS NULL) OR ([BaseName] = @Original_BaseName)) AND ((@IsNull_Character_Code"& _ 
                " = 1 AND [Character Code] IS NULL) OR ([Character Code] = @Original_Character_Co"& _ 
                "de)) AND ((@IsNull_BaseSymbol = 1 AND [BaseSymbol] IS NULL) OR ([BaseSymbol] = @"& _ 
                "Original_BaseSymbol)) AND ((@IsNull_Variations = 1 AND [Variations] IS NULL) OR "& _ 
                "([Variations] = @Original_Variations)) AND ((@IsNull_Valid_Fills = 1 AND [Valid "& _ 
                "Fills] IS NULL) OR ([Valid Fills] = @Original_Valid_Fills)) AND ((@IsNull_Valid_"& _ 
                "Rotations = 1 AND [Valid Rotations] IS NULL) OR ([Valid Rotations] = @Original_V"& _ 
                "alid_Rotations)) AND ((@IsNull_IDUIItem = 1 AND [IDUIItem] IS NULL) OR ([IDUIIte"& _ 
                "m] = @Original_IDUIItem)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDBaseSymbol"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "IDBaseSymbol"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDISWAGroup"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDISWAGroup"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@BaseName"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "BaseName"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Character_Code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Character Code"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@BaseSymbol"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "BaseSymbol"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Variations"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Variations"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Valid_Fills"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Valid Fills"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Valid_Rotations"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Valid Rotations"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDUIItem"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDUIItem"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDBaseSymbol"
            param.DbType = Global.System.Data.DbType.Int64
            param.DbType = Global.System.Data.DbType.Int64
            param.SourceColumn = "IDBaseSymbol"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_IDISWAGroup"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDISWAGroup"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDISWAGroup"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDISWAGroup"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_BaseName"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "BaseName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_BaseName"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "BaseName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_Character_Code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Character Code"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_Character_Code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Character Code"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_BaseSymbol"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "BaseSymbol"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_BaseSymbol"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "BaseSymbol"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_Variations"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Variations"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_Variations"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Variations"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_Valid_Fills"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Valid Fills"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_Valid_Fills"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Valid Fills"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_Valid_Rotations"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Valid Rotations"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_Valid_Rotations"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Valid Rotations"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_IDUIItem"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDUIItem"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDUIItem"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDUIItem"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.SignWriterStudio.SymbolCache.My.MySettings.Default.ISWA2010ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [IDBaseSymbol], [IDISWAGroup], [BaseName], [Character Code], [BaseSymbol],"& _ 
                " [Variations], [Valid Fills], [Valid Rotations], [IDUIItem] FROM [basesymbol1]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ISWA2010DataSet.basesymbol1DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ISWA2010DataSet.basesymbol1DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ISWA2010DataSet.basesymbol1DataTable = New ISWA2010DataSet.basesymbol1DataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ISWA2010DataSet.basesymbol1DataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ISWA2010DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "basesymbol1")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_IDBaseSymbol As Long, ByVal Original_IDISWAGroup As Global.System.Nullable(Of Integer), ByVal Original_BaseName As String, ByVal Original_Character_Code As Global.System.Nullable(Of Integer), ByVal Original_BaseSymbol As String, ByVal Original_Variations As String, ByVal Original_Valid_Fills As String, ByVal Original_Valid_Rotations As String, ByVal Original_IDUIItem As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IDBaseSymbol,Long)
            If (Original_IDISWAGroup.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_IDISWAGroup.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_BaseName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_BaseName,String)
            End If
            If (Original_Character_Code.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Character_Code.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_BaseSymbol Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_BaseSymbol,String)
            End If
            If (Original_Variations Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_Variations,String)
            End If
            If (Original_Valid_Fills Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_Valid_Fills,String)
            End If
            If (Original_Valid_Rotations Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_Valid_Rotations,String)
            End If
            If (Original_IDUIItem.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_IDUIItem.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal IDBaseSymbol As Long, ByVal IDISWAGroup As Global.System.Nullable(Of Integer), ByVal BaseName As String, ByVal Character_Code As Global.System.Nullable(Of Integer), ByVal BaseSymbol As String, ByVal Variations As String, ByVal Valid_Fills As String, ByVal Valid_Rotations As String, ByVal IDUIItem As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(IDBaseSymbol,Long)
            If (IDISWAGroup.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(IDISWAGroup.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (BaseName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(BaseName,String)
            End If
            If (Character_Code.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Character_Code.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (BaseSymbol Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(BaseSymbol,String)
            End If
            If (Variations Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Variations,String)
            End If
            If (Valid_Fills Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Valid_Fills,String)
            End If
            If (Valid_Rotations Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Valid_Rotations,String)
            End If
            If (IDUIItem.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(IDUIItem.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal IDBaseSymbol As Long,  _
                    ByVal IDISWAGroup As Global.System.Nullable(Of Integer),  _
                    ByVal BaseName As String,  _
                    ByVal Character_Code As Global.System.Nullable(Of Integer),  _
                    ByVal BaseSymbol As String,  _
                    ByVal Variations As String,  _
                    ByVal Valid_Fills As String,  _
                    ByVal Valid_Rotations As String,  _
                    ByVal IDUIItem As Global.System.Nullable(Of Integer),  _
                    ByVal Original_IDBaseSymbol As Long,  _
                    ByVal Original_IDISWAGroup As Global.System.Nullable(Of Integer),  _
                    ByVal Original_BaseName As String,  _
                    ByVal Original_Character_Code As Global.System.Nullable(Of Integer),  _
                    ByVal Original_BaseSymbol As String,  _
                    ByVal Original_Variations As String,  _
                    ByVal Original_Valid_Fills As String,  _
                    ByVal Original_Valid_Rotations As String,  _
                    ByVal Original_IDUIItem As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(IDBaseSymbol,Long)
            If (IDISWAGroup.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(IDISWAGroup.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (BaseName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(BaseName,String)
            End If
            If (Character_Code.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Character_Code.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (BaseSymbol Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(BaseSymbol,String)
            End If
            If (Variations Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Variations,String)
            End If
            If (Valid_Fills Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Valid_Fills,String)
            End If
            If (Valid_Rotations Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Valid_Rotations,String)
            End If
            If (IDUIItem.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(IDUIItem.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_IDBaseSymbol,Long)
            If (Original_IDISWAGroup.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_IDISWAGroup.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Original_BaseName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_BaseName,String)
            End If
            If (Original_Character_Code.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_Character_Code.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Original_BaseSymbol Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_BaseSymbol,String)
            End If
            If (Original_Variations Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_Variations,String)
            End If
            If (Original_Valid_Fills Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_Valid_Fills,String)
            End If
            If (Original_Valid_Rotations Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_Valid_Rotations,String)
            End If
            If (Original_IDUIItem.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_IDUIItem.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal IDISWAGroup As Global.System.Nullable(Of Integer),  _
                    ByVal BaseName As String,  _
                    ByVal Character_Code As Global.System.Nullable(Of Integer),  _
                    ByVal BaseSymbol As String,  _
                    ByVal Variations As String,  _
                    ByVal Valid_Fills As String,  _
                    ByVal Valid_Rotations As String,  _
                    ByVal IDUIItem As Global.System.Nullable(Of Integer),  _
                    ByVal Original_IDBaseSymbol As Long,  _
                    ByVal Original_IDISWAGroup As Global.System.Nullable(Of Integer),  _
                    ByVal Original_BaseName As String,  _
                    ByVal Original_Character_Code As Global.System.Nullable(Of Integer),  _
                    ByVal Original_BaseSymbol As String,  _
                    ByVal Original_Variations As String,  _
                    ByVal Original_Valid_Fills As String,  _
                    ByVal Original_Valid_Rotations As String,  _
                    ByVal Original_IDUIItem As Global.System.Nullable(Of Integer)) As Integer
            Return Me.Update(Original_IDBaseSymbol, IDISWAGroup, BaseName, Character_Code, BaseSymbol, Variations, Valid_Fills, Valid_Rotations, IDUIItem, Original_IDBaseSymbol, Original_IDISWAGroup, Original_BaseName, Original_Character_Code, Original_BaseSymbol, Original_Variations, Original_Valid_Fills, Original_Valid_Rotations, Original_IDUIItem)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class categoryTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "category"
            tableMapping.ColumnMappings.Add("IDCategory", "IDCategory")
            tableMapping.ColumnMappings.Add("CategoryName", "CategoryName")
            tableMapping.ColumnMappings.Add("IDUIItem", "IDUIItem")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [category] WHERE (([IDCategory] = @Original_IDCategory) AND ((@IsNull"& _ 
                "_CategoryName = 1 AND [CategoryName] IS NULL) OR ([CategoryName] = @Original_Cat"& _ 
                "egoryName)) AND ((@IsNull_IDUIItem = 1 AND [IDUIItem] IS NULL) OR ([IDUIItem] = "& _ 
                "@Original_IDUIItem)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDCategory"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDCategory"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_CategoryName"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "CategoryName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_CategoryName"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "CategoryName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_IDUIItem"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDUIItem"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDUIItem"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDUIItem"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [category] ([IDCategory], [CategoryName], [IDUIItem]) VALUES (@IDCate"& _ 
                "gory, @CategoryName, @IDUIItem)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDCategory"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDCategory"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@CategoryName"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "CategoryName"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDUIItem"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDUIItem"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [category] SET [IDCategory] = @IDCategory, [CategoryName] = @CategoryName,"& _ 
                " [IDUIItem] = @IDUIItem WHERE (([IDCategory] = @Original_IDCategory) AND ((@IsNu"& _ 
                "ll_CategoryName = 1 AND [CategoryName] IS NULL) OR ([CategoryName] = @Original_C"& _ 
                "ategoryName)) AND ((@IsNull_IDUIItem = 1 AND [IDUIItem] IS NULL) OR ([IDUIItem] "& _ 
                "= @Original_IDUIItem)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDCategory"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDCategory"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@CategoryName"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "CategoryName"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDUIItem"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDUIItem"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDCategory"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDCategory"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_CategoryName"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "CategoryName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_CategoryName"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "CategoryName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_IDUIItem"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDUIItem"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDUIItem"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDUIItem"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.SignWriterStudio.SymbolCache.My.MySettings.Default.ISWA2010ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [IDCategory], [CategoryName], [IDUIItem] FROM [category]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ISWA2010DataSet.categoryDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ISWA2010DataSet.categoryDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ISWA2010DataSet.categoryDataTable = New ISWA2010DataSet.categoryDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ISWA2010DataSet.categoryDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ISWA2010DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "category")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_IDCategory As Integer, ByVal Original_CategoryName As String, ByVal Original_IDUIItem As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IDCategory,Integer)
            If (Original_CategoryName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_CategoryName,String)
            End If
            If (Original_IDUIItem.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_IDUIItem.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal IDCategory As Integer, ByVal CategoryName As String, ByVal IDUIItem As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(IDCategory,Integer)
            If (CategoryName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CategoryName,String)
            End If
            If (IDUIItem.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(IDUIItem.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal IDCategory As Integer, ByVal CategoryName As String, ByVal IDUIItem As Global.System.Nullable(Of Integer), ByVal Original_IDCategory As Integer, ByVal Original_CategoryName As String, ByVal Original_IDUIItem As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(IDCategory,Integer)
            If (CategoryName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CategoryName,String)
            End If
            If (IDUIItem.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(IDUIItem.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_IDCategory,Integer)
            If (Original_CategoryName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_CategoryName,String)
            End If
            If (Original_IDUIItem.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_IDUIItem.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CategoryName As String, ByVal IDUIItem As Global.System.Nullable(Of Integer), ByVal Original_IDCategory As Integer, ByVal Original_CategoryName As String, ByVal Original_IDUIItem As Global.System.Nullable(Of Integer)) As Integer
            Return Me.Update(Original_IDCategory, CategoryName, IDUIItem, Original_IDCategory, Original_CategoryName, Original_IDUIItem)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class classificationTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "classification"
            tableMapping.ColumnMappings.Add("class_code", "class_code")
            tableMapping.ColumnMappings.Add("class_bs_code", "class_bs_code")
            tableMapping.ColumnMappings.Add("IDRootShapeGroup", "IDRootShapeGroup")
            tableMapping.ColumnMappings.Add("IDRootShape", "IDRootShape")
            tableMapping.ColumnMappings.Add("IDRootShapeQuick", "IDRootShapeQuick")
            tableMapping.ColumnMappings.Add("IDActionFinger", "IDActionFinger")
            tableMapping.ColumnMappings.Add("IDMultipleFinger", "IDMultipleFinger")
            tableMapping.ColumnMappings.Add("IDThumbPosition", "IDThumbPosition")
            tableMapping.ColumnMappings.Add("Thumb", "Thumb")
            tableMapping.ColumnMappings.Add("Index", "Index")
            tableMapping.ColumnMappings.Add("Middle", "Middle")
            tableMapping.ColumnMappings.Add("Ring", "Ring")
            tableMapping.ColumnMappings.Add("Baby", "Baby")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [classification] WHERE (([class_code] = @Original_class_code) AND ((@"& _ 
                "IsNull_class_bs_code = 1 AND [class_bs_code] IS NULL) OR ([class_bs_code] = @Ori"& _ 
                "ginal_class_bs_code)) AND ((@IsNull_IDRootShapeGroup = 1 AND [IDRootShapeGroup] "& _ 
                "IS NULL) OR ([IDRootShapeGroup] = @Original_IDRootShapeGroup)) AND ((@IsNull_IDR"& _ 
                "ootShape = 1 AND [IDRootShape] IS NULL) OR ([IDRootShape] = @Original_IDRootShap"& _ 
                "e)) AND ((@IsNull_IDRootShapeQuick = 1 AND [IDRootShapeQuick] IS NULL) OR ([IDRo"& _ 
                "otShapeQuick] = @Original_IDRootShapeQuick)) AND ((@IsNull_IDActionFinger = 1 AN"& _ 
                "D [IDActionFinger] IS NULL) OR ([IDActionFinger] = @Original_IDActionFinger)) AN"& _ 
                "D ((@IsNull_IDMultipleFinger = 1 AND [IDMultipleFinger] IS NULL) OR ([IDMultiple"& _ 
                "Finger] = @Original_IDMultipleFinger)) AND ((@IsNull_IDThumbPosition = 1 AND [ID"& _ 
                "ThumbPosition] IS NULL) OR ([IDThumbPosition] = @Original_IDThumbPosition)) AND "& _ 
                "((@IsNull_Thumb = 1 AND [Thumb] IS NULL) OR ([Thumb] = @Original_Thumb)) AND ((@"& _ 
                "IsNull_Index = 1 AND [Index] IS NULL) OR ([Index] = @Original_Index)) AND ((@IsN"& _ 
                "ull_Middle = 1 AND [Middle] IS NULL) OR ([Middle] = @Original_Middle)) AND ((@Is"& _ 
                "Null_Ring = 1 AND [Ring] IS NULL) OR ([Ring] = @Original_Ring)) AND ((@IsNull_Ba"& _ 
                "by = 1 AND [Baby] IS NULL) OR ([Baby] = @Original_Baby)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_class_code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "class_code"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_class_bs_code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "class_bs_code"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_class_bs_code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "class_bs_code"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_IDRootShapeGroup"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDRootShapeGroup"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDRootShapeGroup"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDRootShapeGroup"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_IDRootShape"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDRootShape"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDRootShape"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDRootShape"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_IDRootShapeQuick"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDRootShapeQuick"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDRootShapeQuick"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDRootShapeQuick"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_IDActionFinger"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDActionFinger"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDActionFinger"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDActionFinger"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_IDMultipleFinger"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDMultipleFinger"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDMultipleFinger"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDMultipleFinger"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_IDThumbPosition"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDThumbPosition"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDThumbPosition"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDThumbPosition"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_Thumb"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Thumb"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_Thumb"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "Thumb"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_Index"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Index"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_Index"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "Index"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_Middle"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Middle"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_Middle"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "Middle"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_Ring"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Ring"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_Ring"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "Ring"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_Baby"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Baby"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_Baby"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "Baby"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [classification] ([class_code], [class_bs_code], [IDRootShapeGroup], "& _ 
                "[IDRootShape], [IDRootShapeQuick], [IDActionFinger], [IDMultipleFinger], [IDThum"& _ 
                "bPosition], [Thumb], [Index], [Middle], [Ring], [Baby]) VALUES (@class_code, @cl"& _ 
                "ass_bs_code, @IDRootShapeGroup, @IDRootShape, @IDRootShapeQuick, @IDActionFinger"& _ 
                ", @IDMultipleFinger, @IDThumbPosition, @Thumb, @Index, @Middle, @Ring, @Baby)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@class_code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "class_code"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@class_bs_code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "class_bs_code"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDRootShapeGroup"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDRootShapeGroup"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDRootShape"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDRootShape"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDRootShapeQuick"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDRootShapeQuick"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDActionFinger"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDActionFinger"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDMultipleFinger"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDMultipleFinger"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDThumbPosition"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDThumbPosition"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Thumb"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "Thumb"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Index"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "Index"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Middle"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "Middle"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Ring"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "Ring"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Baby"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "Baby"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [classification] SET [class_code] = @class_code, [class_bs_code] = @class_"& _ 
                "bs_code, [IDRootShapeGroup] = @IDRootShapeGroup, [IDRootShape] = @IDRootShape, ["& _ 
                "IDRootShapeQuick] = @IDRootShapeQuick, [IDActionFinger] = @IDActionFinger, [IDMu"& _ 
                "ltipleFinger] = @IDMultipleFinger, [IDThumbPosition] = @IDThumbPosition, [Thumb]"& _ 
                " = @Thumb, [Index] = @Index, [Middle] = @Middle, [Ring] = @Ring, [Baby] = @Baby "& _ 
                "WHERE (([class_code] = @Original_class_code) AND ((@IsNull_class_bs_code = 1 AND"& _ 
                " [class_bs_code] IS NULL) OR ([class_bs_code] = @Original_class_bs_code)) AND (("& _ 
                "@IsNull_IDRootShapeGroup = 1 AND [IDRootShapeGroup] IS NULL) OR ([IDRootShapeGro"& _ 
                "up] = @Original_IDRootShapeGroup)) AND ((@IsNull_IDRootShape = 1 AND [IDRootShap"& _ 
                "e] IS NULL) OR ([IDRootShape] = @Original_IDRootShape)) AND ((@IsNull_IDRootShap"& _ 
                "eQuick = 1 AND [IDRootShapeQuick] IS NULL) OR ([IDRootShapeQuick] = @Original_ID"& _ 
                "RootShapeQuick)) AND ((@IsNull_IDActionFinger = 1 AND [IDActionFinger] IS NULL) "& _ 
                "OR ([IDActionFinger] = @Original_IDActionFinger)) AND ((@IsNull_IDMultipleFinger"& _ 
                " = 1 AND [IDMultipleFinger] IS NULL) OR ([IDMultipleFinger] = @Original_IDMultip"& _ 
                "leFinger)) AND ((@IsNull_IDThumbPosition = 1 AND [IDThumbPosition] IS NULL) OR ("& _ 
                "[IDThumbPosition] = @Original_IDThumbPosition)) AND ((@IsNull_Thumb = 1 AND [Thu"& _ 
                "mb] IS NULL) OR ([Thumb] = @Original_Thumb)) AND ((@IsNull_Index = 1 AND [Index]"& _ 
                " IS NULL) OR ([Index] = @Original_Index)) AND ((@IsNull_Middle = 1 AND [Middle] "& _ 
                "IS NULL) OR ([Middle] = @Original_Middle)) AND ((@IsNull_Ring = 1 AND [Ring] IS "& _ 
                "NULL) OR ([Ring] = @Original_Ring)) AND ((@IsNull_Baby = 1 AND [Baby] IS NULL) O"& _ 
                "R ([Baby] = @Original_Baby)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@class_code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "class_code"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@class_bs_code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "class_bs_code"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDRootShapeGroup"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDRootShapeGroup"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDRootShape"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDRootShape"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDRootShapeQuick"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDRootShapeQuick"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDActionFinger"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDActionFinger"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDMultipleFinger"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDMultipleFinger"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDThumbPosition"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDThumbPosition"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Thumb"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "Thumb"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Index"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "Index"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Middle"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "Middle"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Ring"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "Ring"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Baby"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "Baby"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_class_code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "class_code"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_class_bs_code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "class_bs_code"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_class_bs_code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "class_bs_code"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_IDRootShapeGroup"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDRootShapeGroup"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDRootShapeGroup"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDRootShapeGroup"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_IDRootShape"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDRootShape"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDRootShape"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDRootShape"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_IDRootShapeQuick"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDRootShapeQuick"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDRootShapeQuick"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDRootShapeQuick"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_IDActionFinger"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDActionFinger"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDActionFinger"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDActionFinger"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_IDMultipleFinger"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDMultipleFinger"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDMultipleFinger"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDMultipleFinger"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_IDThumbPosition"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDThumbPosition"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDThumbPosition"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDThumbPosition"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_Thumb"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Thumb"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_Thumb"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "Thumb"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_Index"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Index"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_Index"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "Index"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_Middle"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Middle"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_Middle"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "Middle"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_Ring"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Ring"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_Ring"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "Ring"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_Baby"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Baby"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_Baby"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.SourceColumn = "Baby"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.SignWriterStudio.SymbolCache.My.MySettings.Default.ISWA2010ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [class_code], [class_bs_code], [IDRootShapeGroup], [IDRootShape], [IDRootS"& _ 
                "hapeQuick], [IDActionFinger], [IDMultipleFinger], [IDThumbPosition], [Thumb], [I"& _ 
                "ndex], [Middle], [Ring], [Baby] FROM [classification]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT classification.class_code, classification.class_bs_code, classification.ID"& _ 
                "RootShapeGroup, classification.IDRootShape, classification.IDRootShapeQuick, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" "& _ 
                "                classification.IDActionFinger, classification.IDMultipleFinger, "& _ 
                "classification.IDThumbPosition, classification.Thumb, classification.[Index], "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "                 classification.Middle, classification.Ring, classification.Baby"& _ 
                ", symbol.sym_png, symbol.sym_code, basesymbol.bs_name"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM    classification IN"& _ 
                "NER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                 basesymbol ON classification.class_bs_code = basesymb"& _ 
                "ol.bs_code INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                 symbol ON basesymbol.bs_sym_code = symbo"& _ 
                "l.sym_code"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ISWA2010DataSet.classificationDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ISWA2010DataSet.classificationDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ISWA2010DataSet.classificationDataTable = New ISWA2010DataSet.classificationDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillClassificationView(ByVal dataTable As ISWA2010DataSet.classificationDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetClassificationView() As ISWA2010DataSet.classificationDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Dim dataTable As ISWA2010DataSet.classificationDataTable = New ISWA2010DataSet.classificationDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ISWA2010DataSet.classificationDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ISWA2010DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "classification")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_class_code As Integer, ByVal Original_class_bs_code As Global.System.Nullable(Of Integer), ByVal Original_IDRootShapeGroup As Global.System.Nullable(Of Integer), ByVal Original_IDRootShape As Global.System.Nullable(Of Integer), ByVal Original_IDRootShapeQuick As Global.System.Nullable(Of Integer), ByVal Original_IDActionFinger As Global.System.Nullable(Of Integer), ByVal Original_IDMultipleFinger As Global.System.Nullable(Of Integer), ByVal Original_IDThumbPosition As Global.System.Nullable(Of Integer), ByVal Original_Thumb As Global.System.Nullable(Of Boolean), ByVal Original_Index As Global.System.Nullable(Of Boolean), ByVal Original_Middle As Global.System.Nullable(Of Boolean), ByVal Original_Ring As Global.System.Nullable(Of Boolean), ByVal Original_Baby As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_class_code,Integer)
            If (Original_class_bs_code.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_class_bs_code.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_IDRootShapeGroup.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_IDRootShapeGroup.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_IDRootShape.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_IDRootShape.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_IDRootShapeQuick.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_IDRootShapeQuick.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_IDActionFinger.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_IDActionFinger.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_IDMultipleFinger.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_IDMultipleFinger.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_IDThumbPosition.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_IDThumbPosition.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_Thumb.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_Thumb.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_Index.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_Index.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_Middle.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_Middle.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_Ring.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_Ring.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_Baby.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_Baby.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal class_code As Integer, ByVal class_bs_code As Global.System.Nullable(Of Integer), ByVal IDRootShapeGroup As Global.System.Nullable(Of Integer), ByVal IDRootShape As Global.System.Nullable(Of Integer), ByVal IDRootShapeQuick As Global.System.Nullable(Of Integer), ByVal IDActionFinger As Global.System.Nullable(Of Integer), ByVal IDMultipleFinger As Global.System.Nullable(Of Integer), ByVal IDThumbPosition As Global.System.Nullable(Of Integer), ByVal Thumb As Global.System.Nullable(Of Boolean), ByVal Index As Global.System.Nullable(Of Boolean), ByVal Middle As Global.System.Nullable(Of Boolean), ByVal Ring As Global.System.Nullable(Of Boolean), ByVal Baby As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(class_code,Integer)
            If (class_bs_code.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(class_bs_code.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (IDRootShapeGroup.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(IDRootShapeGroup.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (IDRootShape.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(IDRootShape.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (IDRootShapeQuick.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(IDRootShapeQuick.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (IDActionFinger.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(IDActionFinger.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (IDMultipleFinger.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(IDMultipleFinger.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (IDThumbPosition.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(IDThumbPosition.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Thumb.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Thumb.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Index.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Index.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Middle.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Middle.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Ring.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Ring.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Baby.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(Baby.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal class_code As Integer,  _
                    ByVal class_bs_code As Global.System.Nullable(Of Integer),  _
                    ByVal IDRootShapeGroup As Global.System.Nullable(Of Integer),  _
                    ByVal IDRootShape As Global.System.Nullable(Of Integer),  _
                    ByVal IDRootShapeQuick As Global.System.Nullable(Of Integer),  _
                    ByVal IDActionFinger As Global.System.Nullable(Of Integer),  _
                    ByVal IDMultipleFinger As Global.System.Nullable(Of Integer),  _
                    ByVal IDThumbPosition As Global.System.Nullable(Of Integer),  _
                    ByVal Thumb As Global.System.Nullable(Of Boolean),  _
                    ByVal Index As Global.System.Nullable(Of Boolean),  _
                    ByVal Middle As Global.System.Nullable(Of Boolean),  _
                    ByVal Ring As Global.System.Nullable(Of Boolean),  _
                    ByVal Baby As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_class_code As Integer,  _
                    ByVal Original_class_bs_code As Global.System.Nullable(Of Integer),  _
                    ByVal Original_IDRootShapeGroup As Global.System.Nullable(Of Integer),  _
                    ByVal Original_IDRootShape As Global.System.Nullable(Of Integer),  _
                    ByVal Original_IDRootShapeQuick As Global.System.Nullable(Of Integer),  _
                    ByVal Original_IDActionFinger As Global.System.Nullable(Of Integer),  _
                    ByVal Original_IDMultipleFinger As Global.System.Nullable(Of Integer),  _
                    ByVal Original_IDThumbPosition As Global.System.Nullable(Of Integer),  _
                    ByVal Original_Thumb As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_Index As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_Middle As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_Ring As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_Baby As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(class_code,Integer)
            If (class_bs_code.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(class_bs_code.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (IDRootShapeGroup.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(IDRootShapeGroup.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (IDRootShape.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(IDRootShape.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (IDRootShapeQuick.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(IDRootShapeQuick.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (IDActionFinger.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(IDActionFinger.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (IDMultipleFinger.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(IDMultipleFinger.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (IDThumbPosition.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(IDThumbPosition.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Thumb.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Thumb.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Index.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Index.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Middle.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Middle.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Ring.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Ring.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Baby.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Baby.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_class_code,Integer)
            If (Original_class_bs_code.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_class_bs_code.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Original_IDRootShapeGroup.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_IDRootShapeGroup.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Original_IDRootShape.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_IDRootShape.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Original_IDRootShapeQuick.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_IDRootShapeQuick.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (Original_IDActionFinger.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_IDActionFinger.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (Original_IDMultipleFinger.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_IDMultipleFinger.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (Original_IDThumbPosition.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_IDThumbPosition.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (Original_Thumb.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_Thumb.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (Original_Index.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_Index.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (Original_Middle.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_Middle.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (Original_Ring.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_Ring.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (Original_Baby.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_Baby.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal class_bs_code As Global.System.Nullable(Of Integer),  _
                    ByVal IDRootShapeGroup As Global.System.Nullable(Of Integer),  _
                    ByVal IDRootShape As Global.System.Nullable(Of Integer),  _
                    ByVal IDRootShapeQuick As Global.System.Nullable(Of Integer),  _
                    ByVal IDActionFinger As Global.System.Nullable(Of Integer),  _
                    ByVal IDMultipleFinger As Global.System.Nullable(Of Integer),  _
                    ByVal IDThumbPosition As Global.System.Nullable(Of Integer),  _
                    ByVal Thumb As Global.System.Nullable(Of Boolean),  _
                    ByVal Index As Global.System.Nullable(Of Boolean),  _
                    ByVal Middle As Global.System.Nullable(Of Boolean),  _
                    ByVal Ring As Global.System.Nullable(Of Boolean),  _
                    ByVal Baby As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_class_code As Integer,  _
                    ByVal Original_class_bs_code As Global.System.Nullable(Of Integer),  _
                    ByVal Original_IDRootShapeGroup As Global.System.Nullable(Of Integer),  _
                    ByVal Original_IDRootShape As Global.System.Nullable(Of Integer),  _
                    ByVal Original_IDRootShapeQuick As Global.System.Nullable(Of Integer),  _
                    ByVal Original_IDActionFinger As Global.System.Nullable(Of Integer),  _
                    ByVal Original_IDMultipleFinger As Global.System.Nullable(Of Integer),  _
                    ByVal Original_IDThumbPosition As Global.System.Nullable(Of Integer),  _
                    ByVal Original_Thumb As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_Index As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_Middle As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_Ring As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_Baby As Global.System.Nullable(Of Boolean)) As Integer
            Return Me.Update(Original_class_code, class_bs_code, IDRootShapeGroup, IDRootShape, IDRootShapeQuick, IDActionFinger, IDMultipleFinger, IDThumbPosition, Thumb, Index, Middle, Ring, Baby, Original_class_code, Original_class_bs_code, Original_IDRootShapeGroup, Original_IDRootShape, Original_IDRootShapeQuick, Original_IDActionFinger, Original_IDMultipleFinger, Original_IDThumbPosition, Original_Thumb, Original_Index, Original_Middle, Original_Ring, Original_Baby)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class groupTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "group"
            tableMapping.ColumnMappings.Add("IDGroup", "IDGroup")
            tableMapping.ColumnMappings.Add("IDISWACategory", "IDISWACategory")
            tableMapping.ColumnMappings.Add("Hex", "Hex")
            tableMapping.ColumnMappings.Add("IDSymbol", "IDSymbol")
            tableMapping.ColumnMappings.Add("BaseSymbols", "BaseSymbols")
            tableMapping.ColumnMappings.Add("StandardColor", "StandardColor")
            tableMapping.ColumnMappings.Add("SSS", "SSS")
            tableMapping.ColumnMappings.Add("CharacterCode", "CharacterCode")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [group] WHERE (([IDGroup] = @Original_IDGroup) AND ((@IsNull_IDISWACa"& _ 
                "tegory = 1 AND [IDISWACategory] IS NULL) OR ([IDISWACategory] = @Original_IDISWA"& _ 
                "Category)) AND ((@IsNull_Hex = 1 AND [Hex] IS NULL) OR ([Hex] = @Original_Hex)) "& _ 
                "AND ((@IsNull_IDSymbol = 1 AND [IDSymbol] IS NULL) OR ([IDSymbol] = @Original_ID"& _ 
                "Symbol)) AND ((@IsNull_BaseSymbols = 1 AND [BaseSymbols] IS NULL) OR ([BaseSymbo"& _ 
                "ls] = @Original_BaseSymbols)) AND ((@IsNull_StandardColor = 1 AND [StandardColor"& _ 
                "] IS NULL) OR ([StandardColor] = @Original_StandardColor)) AND ((@IsNull_SSS = 1"& _ 
                " AND [SSS] IS NULL) OR ([SSS] = @Original_SSS)) AND ((@IsNull_CharacterCode = 1 "& _ 
                "AND [CharacterCode] IS NULL) OR ([CharacterCode] = @Original_CharacterCode)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDGroup"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDGroup"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_IDISWACategory"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDISWACategory"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDISWACategory"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDISWACategory"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_Hex"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Hex"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_Hex"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Hex"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_IDSymbol"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDSymbol"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDSymbol"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "IDSymbol"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_BaseSymbols"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "BaseSymbols"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_BaseSymbols"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "BaseSymbols"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_StandardColor"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "StandardColor"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_StandardColor"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "StandardColor"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_SSS"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "SSS"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_SSS"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "SSS"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_CharacterCode"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "CharacterCode"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_CharacterCode"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "CharacterCode"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [group] ([IDGroup], [IDISWACategory], [Hex], [IDSymbol], [BaseSymbols"& _ 
                "], [StandardColor], [SSS], [CharacterCode]) VALUES (@IDGroup, @IDISWACategory, @"& _ 
                "Hex, @IDSymbol, @BaseSymbols, @StandardColor, @SSS, @CharacterCode)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDGroup"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDGroup"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDISWACategory"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDISWACategory"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Hex"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Hex"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDSymbol"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "IDSymbol"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@BaseSymbols"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "BaseSymbols"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@StandardColor"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "StandardColor"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@SSS"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "SSS"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@CharacterCode"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "CharacterCode"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [group] SET [IDGroup] = @IDGroup, [IDISWACategory] = @IDISWACategory, [Hex"& _ 
                "] = @Hex, [IDSymbol] = @IDSymbol, [BaseSymbols] = @BaseSymbols, [StandardColor] "& _ 
                "= @StandardColor, [SSS] = @SSS, [CharacterCode] = @CharacterCode WHERE (([IDGrou"& _ 
                "p] = @Original_IDGroup) AND ((@IsNull_IDISWACategory = 1 AND [IDISWACategory] IS"& _ 
                " NULL) OR ([IDISWACategory] = @Original_IDISWACategory)) AND ((@IsNull_Hex = 1 A"& _ 
                "ND [Hex] IS NULL) OR ([Hex] = @Original_Hex)) AND ((@IsNull_IDSymbol = 1 AND [ID"& _ 
                "Symbol] IS NULL) OR ([IDSymbol] = @Original_IDSymbol)) AND ((@IsNull_BaseSymbols"& _ 
                " = 1 AND [BaseSymbols] IS NULL) OR ([BaseSymbols] = @Original_BaseSymbols)) AND "& _ 
                "((@IsNull_StandardColor = 1 AND [StandardColor] IS NULL) OR ([StandardColor] = @"& _ 
                "Original_StandardColor)) AND ((@IsNull_SSS = 1 AND [SSS] IS NULL) OR ([SSS] = @O"& _ 
                "riginal_SSS)) AND ((@IsNull_CharacterCode = 1 AND [CharacterCode] IS NULL) OR (["& _ 
                "CharacterCode] = @Original_CharacterCode)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDGroup"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDGroup"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDISWACategory"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDISWACategory"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Hex"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Hex"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDSymbol"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "IDSymbol"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@BaseSymbols"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "BaseSymbols"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@StandardColor"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "StandardColor"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@SSS"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "SSS"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@CharacterCode"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "CharacterCode"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDGroup"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDGroup"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_IDISWACategory"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDISWACategory"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDISWACategory"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDISWACategory"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_Hex"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Hex"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_Hex"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "Hex"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_IDSymbol"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDSymbol"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDSymbol"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "IDSymbol"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_BaseSymbols"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "BaseSymbols"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_BaseSymbols"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "BaseSymbols"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_StandardColor"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "StandardColor"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_StandardColor"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "StandardColor"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_SSS"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "SSS"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_SSS"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "SSS"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_CharacterCode"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "CharacterCode"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_CharacterCode"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "CharacterCode"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.SignWriterStudio.SymbolCache.My.MySettings.Default.ISWA2010ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [IDGroup], [IDISWACategory], [Hex], [IDSymbol], [BaseSymbols], [StandardCo"& _ 
                "lor], [SSS], [CharacterCode] FROM [group]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ISWA2010DataSet.groupDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ISWA2010DataSet.groupDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ISWA2010DataSet.groupDataTable = New ISWA2010DataSet.groupDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ISWA2010DataSet.groupDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ISWA2010DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "group")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_IDGroup As Integer, ByVal Original_IDISWACategory As Global.System.Nullable(Of Integer), ByVal Original_Hex As String, ByVal Original_IDSymbol As String, ByVal Original_BaseSymbols As Global.System.Nullable(Of Integer), ByVal Original_StandardColor As String, ByVal Original_SSS As String, ByVal Original_CharacterCode As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IDGroup,Integer)
            If (Original_IDISWACategory.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_IDISWACategory.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_Hex Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Hex,String)
            End If
            If (Original_IDSymbol Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_IDSymbol,String)
            End If
            If (Original_BaseSymbols.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_BaseSymbols.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_StandardColor Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_StandardColor,String)
            End If
            If (Original_SSS Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_SSS,String)
            End If
            If (Original_CharacterCode.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_CharacterCode.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal IDGroup As Integer, ByVal IDISWACategory As Global.System.Nullable(Of Integer), ByVal Hex As String, ByVal IDSymbol As String, ByVal BaseSymbols As Global.System.Nullable(Of Integer), ByVal StandardColor As String, ByVal SSS As String, ByVal CharacterCode As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(IDGroup,Integer)
            If (IDISWACategory.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(IDISWACategory.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Hex Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Hex,String)
            End If
            If (IDSymbol Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(IDSymbol,String)
            End If
            If (BaseSymbols.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(BaseSymbols.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (StandardColor Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(StandardColor,String)
            End If
            If (SSS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(SSS,String)
            End If
            If (CharacterCode.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(CharacterCode.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal IDGroup As Integer,  _
                    ByVal IDISWACategory As Global.System.Nullable(Of Integer),  _
                    ByVal Hex As String,  _
                    ByVal IDSymbol As String,  _
                    ByVal BaseSymbols As Global.System.Nullable(Of Integer),  _
                    ByVal StandardColor As String,  _
                    ByVal SSS As String,  _
                    ByVal CharacterCode As Global.System.Nullable(Of Integer),  _
                    ByVal Original_IDGroup As Integer,  _
                    ByVal Original_IDISWACategory As Global.System.Nullable(Of Integer),  _
                    ByVal Original_Hex As String,  _
                    ByVal Original_IDSymbol As String,  _
                    ByVal Original_BaseSymbols As Global.System.Nullable(Of Integer),  _
                    ByVal Original_StandardColor As String,  _
                    ByVal Original_SSS As String,  _
                    ByVal Original_CharacterCode As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(IDGroup,Integer)
            If (IDISWACategory.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(IDISWACategory.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Hex Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Hex,String)
            End If
            If (IDSymbol Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(IDSymbol,String)
            End If
            If (BaseSymbols.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(BaseSymbols.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (StandardColor Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(StandardColor,String)
            End If
            If (SSS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(SSS,String)
            End If
            If (CharacterCode.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(CharacterCode.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_IDGroup,Integer)
            If (Original_IDISWACategory.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_IDISWACategory.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_Hex Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_Hex,String)
            End If
            If (Original_IDSymbol Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_IDSymbol,String)
            End If
            If (Original_BaseSymbols.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_BaseSymbols.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_StandardColor Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_StandardColor,String)
            End If
            If (Original_SSS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_SSS,String)
            End If
            If (Original_CharacterCode.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_CharacterCode.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal IDISWACategory As Global.System.Nullable(Of Integer), ByVal Hex As String, ByVal IDSymbol As String, ByVal BaseSymbols As Global.System.Nullable(Of Integer), ByVal StandardColor As String, ByVal SSS As String, ByVal CharacterCode As Global.System.Nullable(Of Integer), ByVal Original_IDGroup As Integer, ByVal Original_IDISWACategory As Global.System.Nullable(Of Integer), ByVal Original_Hex As String, ByVal Original_IDSymbol As String, ByVal Original_BaseSymbols As Global.System.Nullable(Of Integer), ByVal Original_StandardColor As String, ByVal Original_SSS As String, ByVal Original_CharacterCode As Global.System.Nullable(Of Integer)) As Integer
            Return Me.Update(Original_IDGroup, IDISWACategory, Hex, IDSymbol, BaseSymbols, StandardColor, SSS, CharacterCode, Original_IDGroup, Original_IDISWACategory, Original_Hex, Original_IDSymbol, Original_BaseSymbols, Original_StandardColor, Original_SSS, Original_CharacterCode)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class multiplefingerTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "multiplefinger"
            tableMapping.ColumnMappings.Add("IDMultipleFinger", "IDMultipleFinger")
            tableMapping.ColumnMappings.Add("MultipleFingerName", "MultipleFingerName")
            tableMapping.ColumnMappings.Add("IDUIItem", "IDUIItem")
            tableMapping.ColumnMappings.Add("Order", "Order")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [multiplefinger] WHERE (([IDMultipleFinger] = @Original_IDMultipleFin"& _ 
                "ger) AND ((@IsNull_MultipleFingerName = 1 AND [MultipleFingerName] IS NULL) OR ("& _ 
                "[MultipleFingerName] = @Original_MultipleFingerName)) AND ((@IsNull_IDUIItem = 1"& _ 
                " AND [IDUIItem] IS NULL) OR ([IDUIItem] = @Original_IDUIItem)) AND ((@IsNull_Ord"& _ 
                "er = 1 AND [Order] IS NULL) OR ([Order] = @Original_Order)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDMultipleFinger"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDMultipleFinger"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_MultipleFingerName"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "MultipleFingerName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_MultipleFingerName"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "MultipleFingerName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_IDUIItem"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDUIItem"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDUIItem"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDUIItem"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_Order"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Order"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_Order"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Order"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [multiplefinger] ([IDMultipleFinger], [MultipleFingerName], [IDUIItem"& _ 
                "], [Order]) VALUES (@IDMultipleFinger, @MultipleFingerName, @IDUIItem, @Order)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDMultipleFinger"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDMultipleFinger"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@MultipleFingerName"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "MultipleFingerName"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDUIItem"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDUIItem"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Order"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Order"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [multiplefinger] SET [IDMultipleFinger] = @IDMultipleFinger, [MultipleFing"& _ 
                "erName] = @MultipleFingerName, [IDUIItem] = @IDUIItem, [Order] = @Order WHERE (("& _ 
                "[IDMultipleFinger] = @Original_IDMultipleFinger) AND ((@IsNull_MultipleFingerNam"& _ 
                "e = 1 AND [MultipleFingerName] IS NULL) OR ([MultipleFingerName] = @Original_Mul"& _ 
                "tipleFingerName)) AND ((@IsNull_IDUIItem = 1 AND [IDUIItem] IS NULL) OR ([IDUIIt"& _ 
                "em] = @Original_IDUIItem)) AND ((@IsNull_Order = 1 AND [Order] IS NULL) OR ([Ord"& _ 
                "er] = @Original_Order)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDMultipleFinger"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDMultipleFinger"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@MultipleFingerName"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "MultipleFingerName"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDUIItem"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDUIItem"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Order"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Order"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDMultipleFinger"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDMultipleFinger"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_MultipleFingerName"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "MultipleFingerName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_MultipleFingerName"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "MultipleFingerName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_IDUIItem"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDUIItem"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDUIItem"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDUIItem"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_Order"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Order"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_Order"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Order"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.SignWriterStudio.SymbolCache.My.MySettings.Default.ISWA2010ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        IDMultipleFinger, MultipleFingerName, IDUIItem, [Order]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM      "& _ 
                "      multiplefinger"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY [Order]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ISWA2010DataSet.multiplefingerDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ISWA2010DataSet.multiplefingerDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ISWA2010DataSet.multiplefingerDataTable = New ISWA2010DataSet.multiplefingerDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ISWA2010DataSet.multiplefingerDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ISWA2010DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "multiplefinger")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_IDMultipleFinger As Integer, ByVal Original_MultipleFingerName As String, ByVal Original_IDUIItem As Global.System.Nullable(Of Integer), ByVal Original_Order As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IDMultipleFinger,Integer)
            If (Original_MultipleFingerName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_MultipleFingerName,String)
            End If
            If (Original_IDUIItem.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_IDUIItem.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_Order.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Order.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal IDMultipleFinger As Integer, ByVal MultipleFingerName As String, ByVal IDUIItem As Global.System.Nullable(Of Integer), ByVal Order As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(IDMultipleFinger,Integer)
            If (MultipleFingerName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(MultipleFingerName,String)
            End If
            If (IDUIItem.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(IDUIItem.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Order.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Order.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal IDMultipleFinger As Integer, ByVal MultipleFingerName As String, ByVal IDUIItem As Global.System.Nullable(Of Integer), ByVal Order As Global.System.Nullable(Of Integer), ByVal Original_IDMultipleFinger As Integer, ByVal Original_MultipleFingerName As String, ByVal Original_IDUIItem As Global.System.Nullable(Of Integer), ByVal Original_Order As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(IDMultipleFinger,Integer)
            If (MultipleFingerName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(MultipleFingerName,String)
            End If
            If (IDUIItem.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(IDUIItem.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Order.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Order.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_IDMultipleFinger,Integer)
            If (Original_MultipleFingerName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_MultipleFingerName,String)
            End If
            If (Original_IDUIItem.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_IDUIItem.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_Order.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_Order.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal MultipleFingerName As String, ByVal IDUIItem As Global.System.Nullable(Of Integer), ByVal Order As Global.System.Nullable(Of Integer), ByVal Original_IDMultipleFinger As Integer, ByVal Original_MultipleFingerName As String, ByVal Original_IDUIItem As Global.System.Nullable(Of Integer), ByVal Original_Order As Global.System.Nullable(Of Integer)) As Integer
            Return Me.Update(Original_IDMultipleFinger, MultipleFingerName, IDUIItem, Order, Original_IDMultipleFinger, Original_MultipleFingerName, Original_IDUIItem, Original_Order)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class rootshapeTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "rootshape"
            tableMapping.ColumnMappings.Add("IDRootshape", "IDRootshape")
            tableMapping.ColumnMappings.Add("RootshapeName", "RootshapeName")
            tableMapping.ColumnMappings.Add("IDUIItem", "IDUIItem")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [rootshape] WHERE (([IDRootshape] = @Original_IDRootshape) AND ((@IsN"& _ 
                "ull_RootshapeName = 1 AND [RootshapeName] IS NULL) OR ([RootshapeName] = @Origin"& _ 
                "al_RootshapeName)) AND ((@IsNull_IDUIItem = 1 AND [IDUIItem] IS NULL) OR ([IDUII"& _ 
                "tem] = @Original_IDUIItem)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDRootshape"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDRootshape"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_RootshapeName"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "RootshapeName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_RootshapeName"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "RootshapeName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_IDUIItem"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDUIItem"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDUIItem"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDUIItem"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [rootshape] ([IDRootshape], [RootshapeName], [IDUIItem]) VALUES (@IDR"& _ 
                "ootshape, @RootshapeName, @IDUIItem)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDRootshape"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDRootshape"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@RootshapeName"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "RootshapeName"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDUIItem"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDUIItem"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [rootshape] SET [IDRootshape] = @IDRootshape, [RootshapeName] = @Rootshape"& _ 
                "Name, [IDUIItem] = @IDUIItem WHERE (([IDRootshape] = @Original_IDRootshape) AND "& _ 
                "((@IsNull_RootshapeName = 1 AND [RootshapeName] IS NULL) OR ([RootshapeName] = @"& _ 
                "Original_RootshapeName)) AND ((@IsNull_IDUIItem = 1 AND [IDUIItem] IS NULL) OR ("& _ 
                "[IDUIItem] = @Original_IDUIItem)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDRootshape"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDRootshape"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@RootshapeName"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "RootshapeName"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDUIItem"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDUIItem"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDRootshape"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDRootshape"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_RootshapeName"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "RootshapeName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_RootshapeName"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "RootshapeName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_IDUIItem"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDUIItem"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDUIItem"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDUIItem"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.SignWriterStudio.SymbolCache.My.MySettings.Default.ISWA2010ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [IDRootshape], [RootshapeName], [IDUIItem] FROM [rootshape]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ISWA2010DataSet.rootshapeDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ISWA2010DataSet.rootshapeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ISWA2010DataSet.rootshapeDataTable = New ISWA2010DataSet.rootshapeDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ISWA2010DataSet.rootshapeDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ISWA2010DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "rootshape")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_IDRootshape As Integer, ByVal Original_RootshapeName As String, ByVal Original_IDUIItem As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IDRootshape,Integer)
            If (Original_RootshapeName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_RootshapeName,String)
            End If
            If (Original_IDUIItem.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_IDUIItem.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal IDRootshape As Integer, ByVal RootshapeName As String, ByVal IDUIItem As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(IDRootshape,Integer)
            If (RootshapeName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(RootshapeName,String)
            End If
            If (IDUIItem.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(IDUIItem.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal IDRootshape As Integer, ByVal RootshapeName As String, ByVal IDUIItem As Global.System.Nullable(Of Integer), ByVal Original_IDRootshape As Integer, ByVal Original_RootshapeName As String, ByVal Original_IDUIItem As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(IDRootshape,Integer)
            If (RootshapeName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(RootshapeName,String)
            End If
            If (IDUIItem.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(IDUIItem.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_IDRootshape,Integer)
            If (Original_RootshapeName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_RootshapeName,String)
            End If
            If (Original_IDUIItem.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_IDUIItem.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal RootshapeName As String, ByVal IDUIItem As Global.System.Nullable(Of Integer), ByVal Original_IDRootshape As Integer, ByVal Original_RootshapeName As String, ByVal Original_IDUIItem As Global.System.Nullable(Of Integer)) As Integer
            Return Me.Update(Original_IDRootshape, RootshapeName, IDUIItem, Original_IDRootshape, Original_RootshapeName, Original_IDUIItem)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class rootshapegroupTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "rootshapegroup"
            tableMapping.ColumnMappings.Add("IDRootshapeGroup", "IDRootshapeGroup")
            tableMapping.ColumnMappings.Add("RootshapeGroupName", "RootshapeGroupName")
            tableMapping.ColumnMappings.Add("IDUIItem", "IDUIItem")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [rootshapegroup] WHERE (([IDRootshapeGroup] = @Original_IDRootshapeGr"& _ 
                "oup) AND ((@IsNull_RootshapeGroupName = 1 AND [RootshapeGroupName] IS NULL) OR ("& _ 
                "[RootshapeGroupName] = @Original_RootshapeGroupName)) AND ((@IsNull_IDUIItem = 1"& _ 
                " AND [IDUIItem] IS NULL) OR ([IDUIItem] = @Original_IDUIItem)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDRootshapeGroup"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDRootshapeGroup"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_RootshapeGroupName"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "RootshapeGroupName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_RootshapeGroupName"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "RootshapeGroupName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_IDUIItem"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDUIItem"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDUIItem"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDUIItem"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [rootshapegroup] ([IDRootshapeGroup], [RootshapeGroupName], [IDUIItem"& _ 
                "]) VALUES (@IDRootshapeGroup, @RootshapeGroupName, @IDUIItem)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDRootshapeGroup"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDRootshapeGroup"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@RootshapeGroupName"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "RootshapeGroupName"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDUIItem"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDUIItem"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [rootshapegroup] SET [IDRootshapeGroup] = @IDRootshapeGroup, [RootshapeGro"& _ 
                "upName] = @RootshapeGroupName, [IDUIItem] = @IDUIItem WHERE (([IDRootshapeGroup]"& _ 
                " = @Original_IDRootshapeGroup) AND ((@IsNull_RootshapeGroupName = 1 AND [Rootsha"& _ 
                "peGroupName] IS NULL) OR ([RootshapeGroupName] = @Original_RootshapeGroupName)) "& _ 
                "AND ((@IsNull_IDUIItem = 1 AND [IDUIItem] IS NULL) OR ([IDUIItem] = @Original_ID"& _ 
                "UIItem)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDRootshapeGroup"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDRootshapeGroup"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@RootshapeGroupName"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "RootshapeGroupName"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDUIItem"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDUIItem"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDRootshapeGroup"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDRootshapeGroup"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_RootshapeGroupName"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "RootshapeGroupName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_RootshapeGroupName"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "RootshapeGroupName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_IDUIItem"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDUIItem"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDUIItem"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDUIItem"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.SignWriterStudio.SymbolCache.My.MySettings.Default.ISWA2010ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [IDRootshapeGroup], [RootshapeGroupName], [IDUIItem] FROM [rootshapegroup]"& _ 
                ""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ISWA2010DataSet.rootshapegroupDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ISWA2010DataSet.rootshapegroupDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ISWA2010DataSet.rootshapegroupDataTable = New ISWA2010DataSet.rootshapegroupDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ISWA2010DataSet.rootshapegroupDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ISWA2010DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "rootshapegroup")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_IDRootshapeGroup As Integer, ByVal Original_RootshapeGroupName As String, ByVal Original_IDUIItem As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IDRootshapeGroup,Integer)
            If (Original_RootshapeGroupName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_RootshapeGroupName,String)
            End If
            If (Original_IDUIItem.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_IDUIItem.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal IDRootshapeGroup As Integer, ByVal RootshapeGroupName As String, ByVal IDUIItem As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(IDRootshapeGroup,Integer)
            If (RootshapeGroupName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(RootshapeGroupName,String)
            End If
            If (IDUIItem.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(IDUIItem.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal IDRootshapeGroup As Integer, ByVal RootshapeGroupName As String, ByVal IDUIItem As Global.System.Nullable(Of Integer), ByVal Original_IDRootshapeGroup As Integer, ByVal Original_RootshapeGroupName As String, ByVal Original_IDUIItem As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(IDRootshapeGroup,Integer)
            If (RootshapeGroupName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(RootshapeGroupName,String)
            End If
            If (IDUIItem.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(IDUIItem.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_IDRootshapeGroup,Integer)
            If (Original_RootshapeGroupName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_RootshapeGroupName,String)
            End If
            If (Original_IDUIItem.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_IDUIItem.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal RootshapeGroupName As String, ByVal IDUIItem As Global.System.Nullable(Of Integer), ByVal Original_IDRootshapeGroup As Integer, ByVal Original_RootshapeGroupName As String, ByVal Original_IDUIItem As Global.System.Nullable(Of Integer)) As Integer
            Return Me.Update(Original_IDRootshapeGroup, RootshapeGroupName, IDUIItem, Original_IDRootshapeGroup, Original_RootshapeGroupName, Original_IDUIItem)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class rootshapequickTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "rootshapequick"
            tableMapping.ColumnMappings.Add("IDRootshapeQuick", "IDRootshapeQuick")
            tableMapping.ColumnMappings.Add("RootshapeQuickName", "RootshapeQuickName")
            tableMapping.ColumnMappings.Add("IDUIItem", "IDUIItem")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [rootshapequick] WHERE (([IDRootshapeQuick] = @Original_IDRootshapeQu"& _ 
                "ick) AND ((@IsNull_RootshapeQuickName = 1 AND [RootshapeQuickName] IS NULL) OR ("& _ 
                "[RootshapeQuickName] = @Original_RootshapeQuickName)) AND ((@IsNull_IDUIItem = 1"& _ 
                " AND [IDUIItem] IS NULL) OR ([IDUIItem] = @Original_IDUIItem)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDRootshapeQuick"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDRootshapeQuick"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_RootshapeQuickName"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "RootshapeQuickName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_RootshapeQuickName"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "RootshapeQuickName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_IDUIItem"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDUIItem"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDUIItem"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDUIItem"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [rootshapequick] ([IDRootshapeQuick], [RootshapeQuickName], [IDUIItem"& _ 
                "]) VALUES (@IDRootshapeQuick, @RootshapeQuickName, @IDUIItem)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDRootshapeQuick"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDRootshapeQuick"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@RootshapeQuickName"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "RootshapeQuickName"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDUIItem"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDUIItem"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [rootshapequick] SET [IDRootshapeQuick] = @IDRootshapeQuick, [RootshapeQui"& _ 
                "ckName] = @RootshapeQuickName, [IDUIItem] = @IDUIItem WHERE (([IDRootshapeQuick]"& _ 
                " = @Original_IDRootshapeQuick) AND ((@IsNull_RootshapeQuickName = 1 AND [Rootsha"& _ 
                "peQuickName] IS NULL) OR ([RootshapeQuickName] = @Original_RootshapeQuickName)) "& _ 
                "AND ((@IsNull_IDUIItem = 1 AND [IDUIItem] IS NULL) OR ([IDUIItem] = @Original_ID"& _ 
                "UIItem)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDRootshapeQuick"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDRootshapeQuick"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@RootshapeQuickName"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "RootshapeQuickName"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDUIItem"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDUIItem"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDRootshapeQuick"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDRootshapeQuick"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_RootshapeQuickName"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "RootshapeQuickName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_RootshapeQuickName"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "RootshapeQuickName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_IDUIItem"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDUIItem"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDUIItem"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDUIItem"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.SignWriterStudio.SymbolCache.My.MySettings.Default.ISWA2010ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [IDRootshapeQuick], [RootshapeQuickName], [IDUIItem] FROM [rootshapequick]"& _ 
                ""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ISWA2010DataSet.rootshapequickDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ISWA2010DataSet.rootshapequickDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ISWA2010DataSet.rootshapequickDataTable = New ISWA2010DataSet.rootshapequickDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ISWA2010DataSet.rootshapequickDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ISWA2010DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "rootshapequick")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_IDRootshapeQuick As Integer, ByVal Original_RootshapeQuickName As String, ByVal Original_IDUIItem As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IDRootshapeQuick,Integer)
            If (Original_RootshapeQuickName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_RootshapeQuickName,String)
            End If
            If (Original_IDUIItem.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_IDUIItem.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal IDRootshapeQuick As Integer, ByVal RootshapeQuickName As String, ByVal IDUIItem As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(IDRootshapeQuick,Integer)
            If (RootshapeQuickName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(RootshapeQuickName,String)
            End If
            If (IDUIItem.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(IDUIItem.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal IDRootshapeQuick As Integer, ByVal RootshapeQuickName As String, ByVal IDUIItem As Global.System.Nullable(Of Integer), ByVal Original_IDRootshapeQuick As Integer, ByVal Original_RootshapeQuickName As String, ByVal Original_IDUIItem As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(IDRootshapeQuick,Integer)
            If (RootshapeQuickName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(RootshapeQuickName,String)
            End If
            If (IDUIItem.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(IDUIItem.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_IDRootshapeQuick,Integer)
            If (Original_RootshapeQuickName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_RootshapeQuickName,String)
            End If
            If (Original_IDUIItem.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_IDUIItem.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal RootshapeQuickName As String, ByVal IDUIItem As Global.System.Nullable(Of Integer), ByVal Original_IDRootshapeQuick As Integer, ByVal Original_RootshapeQuickName As String, ByVal Original_IDUIItem As Global.System.Nullable(Of Integer)) As Integer
            Return Me.Update(Original_IDRootshapeQuick, RootshapeQuickName, IDUIItem, Original_IDRootshapeQuick, Original_RootshapeQuickName, Original_IDUIItem)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class symbolTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "symbol"
            tableMapping.ColumnMappings.Add("sym_code", "sym_code")
            tableMapping.ColumnMappings.Add("sym_sss", "sym_sss")
            tableMapping.ColumnMappings.Add("sym_fill", "sym_fill")
            tableMapping.ColumnMappings.Add("sym_rot", "sym_rot")
            tableMapping.ColumnMappings.Add("sym_w", "sym_w")
            tableMapping.ColumnMappings.Add("sym_h", "sym_h")
            tableMapping.ColumnMappings.Add("sym_bs_code", "sym_bs_code")
            tableMapping.ColumnMappings.Add("sym_sg_code", "sym_sg_code")
            tableMapping.ColumnMappings.Add("sym_png", "sym_png")
            tableMapping.ColumnMappings.Add("sym_illus", "sym_illus")
            tableMapping.ColumnMappings.Add("sym_id", "sym_id")
            tableMapping.ColumnMappings.Add("sym_svg_line", "sym_svg_line")
            tableMapping.ColumnMappings.Add("sym_svg_fill", "sym_svg_fill")
            tableMapping.ColumnMappings.Add("sort_weight", "sort_weight")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [main].[sqlite_default_schema].[symbol] WHERE (([sym_code] = @Origina"& _ 
                "l_sym_code) AND ((@IsNull_sym_sss = 1 AND [sym_sss] IS NULL) OR ([sym_sss] = @Or"& _ 
                "iginal_sym_sss)) AND ((@IsNull_sym_fill = 1 AND [sym_fill] IS NULL) OR ([sym_fil"& _ 
                "l] = @Original_sym_fill)) AND ((@IsNull_sym_rot = 1 AND [sym_rot] IS NULL) OR (["& _ 
                "sym_rot] = @Original_sym_rot)) AND ((@IsNull_sym_w = 1 AND [sym_w] IS NULL) OR ("& _ 
                "[sym_w] = @Original_sym_w)) AND ((@IsNull_sym_h = 1 AND [sym_h] IS NULL) OR ([sy"& _ 
                "m_h] = @Original_sym_h)) AND ((@IsNull_sym_bs_code = 1 AND [sym_bs_code] IS NULL"& _ 
                ") OR ([sym_bs_code] = @Original_sym_bs_code)) AND ((@IsNull_sym_sg_code = 1 AND "& _ 
                "[sym_sg_code] IS NULL) OR ([sym_sg_code] = @Original_sym_sg_code)) AND ((@IsNull"& _ 
                "_sym_png = 1 AND [sym_png] IS NULL) OR ([sym_png] = @Original_sym_png)) AND ((@I"& _ 
                "sNull_sym_illus = 1 AND [sym_illus] IS NULL) OR ([sym_illus] = @Original_sym_ill"& _ 
                "us)) AND ((@IsNull_sym_id = 1 AND [sym_id] IS NULL) OR ([sym_id] = @Original_sym"& _ 
                "_id)) AND ((@IsNull_sym_svg_line = 1 AND [sym_svg_line] IS NULL) OR ([sym_svg_li"& _ 
                "ne] = @Original_sym_svg_line)) AND ((@IsNull_sym_svg_fill = 1 AND [sym_svg_fill]"& _ 
                " IS NULL) OR ([sym_svg_fill] = @Original_sym_svg_fill)) AND ((@IsNull_sort_weigh"& _ 
                "t = 1 AND [sort_weight] IS NULL) OR ([sort_weight] = @Original_sort_weight)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_sym_code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sym_code"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_sym_sss"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sym_sss"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_sym_sss"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "sym_sss"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_sym_fill"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sym_fill"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_sym_fill"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sym_fill"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_sym_rot"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sym_rot"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_sym_rot"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sym_rot"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_sym_w"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sym_w"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_sym_w"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sym_w"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_sym_h"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sym_h"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_sym_h"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sym_h"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_sym_bs_code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sym_bs_code"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_sym_bs_code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sym_bs_code"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_sym_sg_code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sym_sg_code"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_sym_sg_code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sym_sg_code"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_sym_png"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sym_png"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_sym_png"
            param.DbType = Global.System.Data.DbType.Binary
            param.DbType = Global.System.Data.DbType.Binary
            param.SourceColumn = "sym_png"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_sym_illus"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sym_illus"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_sym_illus"
            param.DbType = Global.System.Data.DbType.Binary
            param.DbType = Global.System.Data.DbType.Binary
            param.SourceColumn = "sym_illus"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_sym_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sym_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_sym_id"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "sym_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_sym_svg_line"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sym_svg_line"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_sym_svg_line"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "sym_svg_line"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_sym_svg_fill"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sym_svg_fill"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_sym_svg_fill"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "sym_svg_fill"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_sort_weight"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sort_weight"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_sort_weight"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "sort_weight"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [main].[sqlite_default_schema].[symbol] ([sym_code], [sym_sss], [sym_"& _ 
                "fill], [sym_rot], [sym_w], [sym_h], [sym_bs_code], [sym_sg_code], [sym_png], [sy"& _ 
                "m_illus], [sym_id], [sym_svg_line], [sym_svg_fill], [sort_weight]) VALUES (@sym_"& _ 
                "code, @sym_sss, @sym_fill, @sym_rot, @sym_w, @sym_h, @sym_bs_code, @sym_sg_code,"& _ 
                " @sym_png, @sym_illus, @sym_id, @sym_svg_line, @sym_svg_fill, @sort_weight)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@sym_code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sym_code"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@sym_sss"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "sym_sss"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@sym_fill"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sym_fill"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@sym_rot"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sym_rot"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@sym_w"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sym_w"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@sym_h"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sym_h"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@sym_bs_code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sym_bs_code"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@sym_sg_code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sym_sg_code"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@sym_png"
            param.DbType = Global.System.Data.DbType.Binary
            param.DbType = Global.System.Data.DbType.Binary
            param.SourceColumn = "sym_png"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@sym_illus"
            param.DbType = Global.System.Data.DbType.Binary
            param.DbType = Global.System.Data.DbType.Binary
            param.SourceColumn = "sym_illus"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@sym_id"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "sym_id"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@sym_svg_line"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "sym_svg_line"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@sym_svg_fill"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "sym_svg_fill"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@sort_weight"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "sort_weight"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [main].[sqlite_default_schema].[symbol] SET [sym_code] = @sym_code, [sym_s"& _ 
                "ss] = @sym_sss, [sym_fill] = @sym_fill, [sym_rot] = @sym_rot, [sym_w] = @sym_w, "& _ 
                "[sym_h] = @sym_h, [sym_bs_code] = @sym_bs_code, [sym_sg_code] = @sym_sg_code, [s"& _ 
                "ym_png] = @sym_png, [sym_illus] = @sym_illus, [sym_id] = @sym_id, [sym_svg_line]"& _ 
                " = @sym_svg_line, [sym_svg_fill] = @sym_svg_fill, [sort_weight] = @sort_weight W"& _ 
                "HERE (([sym_code] = @Original_sym_code) AND ((@IsNull_sym_sss = 1 AND [sym_sss] "& _ 
                "IS NULL) OR ([sym_sss] = @Original_sym_sss)) AND ((@IsNull_sym_fill = 1 AND [sym"& _ 
                "_fill] IS NULL) OR ([sym_fill] = @Original_sym_fill)) AND ((@IsNull_sym_rot = 1 "& _ 
                "AND [sym_rot] IS NULL) OR ([sym_rot] = @Original_sym_rot)) AND ((@IsNull_sym_w ="& _ 
                " 1 AND [sym_w] IS NULL) OR ([sym_w] = @Original_sym_w)) AND ((@IsNull_sym_h = 1 "& _ 
                "AND [sym_h] IS NULL) OR ([sym_h] = @Original_sym_h)) AND ((@IsNull_sym_bs_code ="& _ 
                " 1 AND [sym_bs_code] IS NULL) OR ([sym_bs_code] = @Original_sym_bs_code)) AND (("& _ 
                "@IsNull_sym_sg_code = 1 AND [sym_sg_code] IS NULL) OR ([sym_sg_code] = @Original"& _ 
                "_sym_sg_code)) AND ((@IsNull_sym_png = 1 AND [sym_png] IS NULL) OR ([sym_png] = "& _ 
                "@Original_sym_png)) AND ((@IsNull_sym_illus = 1 AND [sym_illus] IS NULL) OR ([sy"& _ 
                "m_illus] = @Original_sym_illus)) AND ((@IsNull_sym_id = 1 AND [sym_id] IS NULL) "& _ 
                "OR ([sym_id] = @Original_sym_id)) AND ((@IsNull_sym_svg_line = 1 AND [sym_svg_li"& _ 
                "ne] IS NULL) OR ([sym_svg_line] = @Original_sym_svg_line)) AND ((@IsNull_sym_svg"& _ 
                "_fill = 1 AND [sym_svg_fill] IS NULL) OR ([sym_svg_fill] = @Original_sym_svg_fil"& _ 
                "l)) AND ((@IsNull_sort_weight = 1 AND [sort_weight] IS NULL) OR ([sort_weight] ="& _ 
                " @Original_sort_weight)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@sym_code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sym_code"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@sym_sss"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "sym_sss"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@sym_fill"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sym_fill"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@sym_rot"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sym_rot"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@sym_w"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sym_w"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@sym_h"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sym_h"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@sym_bs_code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sym_bs_code"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@sym_sg_code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sym_sg_code"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@sym_png"
            param.DbType = Global.System.Data.DbType.Binary
            param.DbType = Global.System.Data.DbType.Binary
            param.SourceColumn = "sym_png"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@sym_illus"
            param.DbType = Global.System.Data.DbType.Binary
            param.DbType = Global.System.Data.DbType.Binary
            param.SourceColumn = "sym_illus"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@sym_id"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "sym_id"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@sym_svg_line"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "sym_svg_line"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@sym_svg_fill"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "sym_svg_fill"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@sort_weight"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "sort_weight"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_sym_code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sym_code"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_sym_sss"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sym_sss"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_sym_sss"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "sym_sss"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_sym_fill"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sym_fill"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_sym_fill"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sym_fill"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_sym_rot"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sym_rot"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_sym_rot"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sym_rot"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_sym_w"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sym_w"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_sym_w"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sym_w"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_sym_h"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sym_h"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_sym_h"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sym_h"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_sym_bs_code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sym_bs_code"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_sym_bs_code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sym_bs_code"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_sym_sg_code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sym_sg_code"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_sym_sg_code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sym_sg_code"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_sym_png"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sym_png"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_sym_png"
            param.DbType = Global.System.Data.DbType.Binary
            param.DbType = Global.System.Data.DbType.Binary
            param.SourceColumn = "sym_png"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_sym_illus"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sym_illus"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_sym_illus"
            param.DbType = Global.System.Data.DbType.Binary
            param.DbType = Global.System.Data.DbType.Binary
            param.SourceColumn = "sym_illus"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_sym_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sym_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_sym_id"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SourceColumn = "sym_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_sym_svg_line"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sym_svg_line"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_sym_svg_line"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "sym_svg_line"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_sym_svg_fill"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sym_svg_fill"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_sym_svg_fill"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "sym_svg_fill"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_sort_weight"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sort_weight"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_sort_weight"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "sort_weight"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.SignWriterStudio.SymbolCache.My.MySettings.Default.ISWA2010ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(8) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [sym_code], [sym_sss], [sym_fill], [sym_rot], [sym_w], [sym_h], [sym_bs_co"& _ 
                "de], [sym_sg_code], [sym_png], [sym_illus], [sym_id], [sym_svg_line], [sym_svg_f"& _ 
                "ill], symbol.sort_weight FROM [symbol]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  SELECT     symbol.sym_code, symbol.sym_id, symbol.sym_png, symbol.sy"& _ 
                "m_illus, symbolgroup.sg_cat_num, symbolgroup.sg_grp_num,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  basesymbol."& _ 
                "bs_bas_num, basesymbol.bs_var_num, symbol.sym_fill, symbol.sym_rot, symbol.sym_w"& _ 
                ", symbol.sym_h, basesymbol.bs_sym_code,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  basesymbol.bs_name, basesymb"& _ 
                "ol.bs_vars, basesymbol.bs_fills, basesymbol.bs_rots, symbol.sort_weight"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  FROM         basesymbol INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  symbolgroup ON basesymbol.bs_"& _ 
                "sg_code = symbolgroup.sg_code INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  symbol ON basesymbol.bs_sym"& _ 
                "_code = symbol.sym_code"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  WHERE     (symbolgroup.sg_cat_num = 1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  "
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT symbol.sym_code, symbol.sym_id, symbol.sym_png, symbol.sym_illus, symbolgr"& _ 
                "oup.sg_cat_num, symbolgroup.sg_grp_num, basesymbol.bs_bas_num, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"               "& _ 
                "  basesymbol.bs_var_num, symbol.sym_fill, symbol.sym_rot, symbol.sym_w, symbol.s"& _ 
                "ym_h, basesymbol.bs_sym_code, basesymbol.bs_name, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                 basesymbol."& _ 
                "bs_vars, basesymbol.bs_fills, basesymbol.bs_rots, symbol.sort_weight"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM    ba"& _ 
                "sesymbol INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                 symbolgroup ON basesymbol.bs_sg_code = sym"& _ 
                "bolgroup.sg_code INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                 symbol ON basesymbol.bs_sym_code ="& _ 
                " symbol.sym_code"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  SELECT     symbol.sym_code, symbol.sym_id, symbol.sym_png, symbol.sy"& _ 
                "m_illus, symbolgroup.sg_cat_num, symbolgroup.sg_grp_num,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  basesymbol."& _ 
                "bs_bas_num, basesymbol.bs_var_num, symbol.sym_fill, symbol.sym_rot, symbol.sym_w"& _ 
                ", symbol.sym_h, basesymbol.bs_sym_code,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  basesymbol.bs_name, basesymb"& _ 
                "ol.bs_vars, basesymbol.bs_fills, basesymbol.bs_rots, symbol.sort_weight"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  FROM         symbol INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  basesymbol ON symbol.sym_bs_code "& _ 
                "= basesymbol.bs_code INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  symbolgroup ON basesymbol.bs_sg_code"& _ 
                " = symbolgroup.sg_code"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  WHERE     (basesymbol.bs_name LIKE @basename)"& _ 
                " AND (symbol.sym_fill = 1) AND (symbol.sym_rot = 1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  "
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@basename"
            param.DbType = Global.System.Data.DbType.[String]
            param.Size = 2147483647
            param.SourceColumn = "bs_name"
            Me._commandCollection(3).Parameters.Add(param)
            Me._commandCollection(4) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  SELECT     symbol.sym_code, symbol.sym_id, symbol.sym_png, symbol.sy"& _ 
                "m_illus, symbolgroup.sg_cat_num, symbolgroup.sg_grp_num,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  basesymbol."& _ 
                "bs_bas_num, basesymbol.bs_var_num, symbol.sym_fill, symbol.sym_rot, symbol.sym_w"& _ 
                ", symbol.sym_h, basesymbol.bs_sym_code,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  basesymbol.bs_name, basesymb"& _ 
                "ol.bs_vars, basesymbol.bs_fills, basesymbol.bs_rots, symbol.sort_weight"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  FROM         symbol INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  basesymbol ON symbol.sym_bs_code "& _ 
                "= basesymbol.bs_code INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  symbolgroup ON basesymbol.bs_sg_code"& _ 
                " = symbolgroup.sg_code"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  WHERE     (symbol.sym_code = @code)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)& _ 
                "  "
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.SourceColumn = "sym_code"
            Me._commandCollection(4).Parameters.Add(param)
            Me._commandCollection(5) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(5).Connection = Me.Connection
            Me._commandCollection(5).CommandText = ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  SELECT    symbol.sym_code, symbol.sym_id, symbol.sym_png, symbol.sym"& _ 
                "_illus, symbolgroup.sg_cat_num, symbolgroup.sg_grp_num,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  basesymbol.b"& _ 
                "s_bas_num, basesymbol.bs_var_num, symbol.sym_fill, symbol.sym_rot, symbol.sym_w,"& _ 
                " symbol.sym_h, basesymbol.bs_sym_code,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  basesymbol.bs_name, basesymbo"& _ 
                "l.bs_vars, basesymbol.bs_fills, basesymbol.bs_rots, symbol.sort_weight"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(9)&"  FROM         symbol INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  basesymbol ON symbol.sym_bs_code ="& _ 
                " basesymbol.bs_code INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  symbolgroup ON basesymbol.bs_sg_code "& _ 
                "= symbolgroup.sg_code"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  WHERE     (symbol.sym_id = @id)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  "
            Me._commandCollection(5).CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@id"
            param.DbType = Global.System.Data.DbType.[String]
            param.Size = 2147483647
            param.SourceColumn = "sym_id"
            Me._commandCollection(5).Parameters.Add(param)
            Me._commandCollection(6) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(6).Connection = Me.Connection
            Me._commandCollection(6).CommandText = ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  SELECT    symbol.sym_code, symbol.sym_id, symbol.sym_png, symbol.sym"& _ 
                "_illus, symbolgroup.sg_cat_num, symbolgroup.sg_grp_num,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  basesymbol.b"& _ 
                "s_bas_num, basesymbol.bs_var_num, symbol.sym_fill, symbol.sym_rot, symbol.sym_w,"& _ 
                " symbol.sym_h, basesymbol.bs_sym_code,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  basesymbol.bs_name, basesymbo"& _ 
                "l.bs_vars, basesymbol.bs_fills, basesymbol.bs_rots, symbol.sort_weight"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(9)&"  FROM         symbol INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  basesymbol ON symbol.sym_bs_code ="& _ 
                " basesymbol.bs_code INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  symbolgroup ON basesymbol.bs_sg_code "& _ 
                "= symbolgroup.sg_code"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  WHERE     (symbol.sym_code IN (1, 2, 3, 4))"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  "
            Me._commandCollection(6).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(7) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(7).Connection = Me.Connection
            Me._commandCollection(7).CommandText = ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  SELECT     basesymbol.bs_name"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  FROM         symbol INNER "& _ 
                "JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  basesymbol ON symbol.sym_bs_code = basesymbol.bs_code"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(9)&"  WHERE     (symbol.sym_code = @code)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  "
            Me._commandCollection(7).CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.SourceColumn = "sym_code"
            Me._commandCollection(7).Parameters.Add(param)
            Me._commandCollection(8) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(8).Connection = Me.Connection
            Me._commandCollection(8).CommandText = ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  SELECT     symbol.sym_png"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  FROM         symbol INNER JOIN"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  basesymbol ON symbol.sym_bs_code = basesymbol.bs_code INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  symbolgroup ON basesymbol.bs_sg_code = symbolgroup.sg_code"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&" "& _ 
                " WHERE     (symbol.sym_code = @code)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  "
            Me._commandCollection(8).CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.SourceColumn = "sym_code"
            Me._commandCollection(8).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ISWA2010DataSet.symbolDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ISWA2010DataSet.symbolDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ISWA2010DataSet.symbolDataTable = New ISWA2010DataSet.symbolDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBaseHands(ByVal dataTable As ISWA2010DataSet.symbolDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBaseHands() As ISWA2010DataSet.symbolDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Dim dataTable As ISWA2010DataSet.symbolDataTable = New ISWA2010DataSet.symbolDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBaseSymbols(ByVal dataTable As ISWA2010DataSet.symbolDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBaseSymbols() As ISWA2010DataSet.symbolDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Dim dataTable As ISWA2010DataSet.symbolDataTable = New ISWA2010DataSet.symbolDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByBasename(ByVal dataTable As ISWA2010DataSet.symbolDataTable, ByVal basename As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (basename Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(basename,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByBasename(ByVal basename As String) As ISWA2010DataSet.symbolDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (basename Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(basename,String)
            End If
            Dim dataTable As ISWA2010DataSet.symbolDataTable = New ISWA2010DataSet.symbolDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As ISWA2010DataSet.symbolDataTable, ByVal code As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(code,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal code As Integer) As ISWA2010DataSet.symbolDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(code,Integer)
            Dim dataTable As ISWA2010DataSet.symbolDataTable = New ISWA2010DataSet.symbolDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByID(ByVal dataTable As ISWA2010DataSet.symbolDataTable, ByVal id As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            If (id Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(id,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByID(ByVal id As String) As ISWA2010DataSet.symbolDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            If (id Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(id,String)
            End If
            Dim dataTable As ISWA2010DataSet.symbolDataTable = New ISWA2010DataSet.symbolDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillFavs(ByVal dataTable As ISWA2010DataSet.symbolDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(6)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataFavs() As ISWA2010DataSet.symbolDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(6)
            Dim dataTable As ISWA2010DataSet.symbolDataTable = New ISWA2010DataSet.symbolDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ISWA2010DataSet.symbolDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ISWA2010DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "symbol")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_sym_code As Integer, ByVal Original_sym_sss As String, ByVal Original_sym_fill As Global.System.Nullable(Of Integer), ByVal Original_sym_rot As Global.System.Nullable(Of Integer), ByVal Original_sym_w As Global.System.Nullable(Of Integer), ByVal Original_sym_h As Global.System.Nullable(Of Integer), ByVal Original_sym_bs_code As Global.System.Nullable(Of Integer), ByVal Original_sym_sg_code As Global.System.Nullable(Of Integer), ByVal Original_sym_png() As Byte, ByVal Original_sym_illus() As Byte, ByVal Original_sym_id As String, ByVal Original_sym_svg_line As String, ByVal Original_sym_svg_fill As String, ByVal Original_sort_weight As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_sym_code,Integer)
            If (Original_sym_sss Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_sym_sss,String)
            End If
            If (Original_sym_fill.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_sym_fill.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_sym_rot.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_sym_rot.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_sym_w.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_sym_w.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_sym_h.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_sym_h.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_sym_bs_code.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_sym_bs_code.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_sym_sg_code.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_sym_sg_code.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_sym_png Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_sym_png,Byte())
            End If
            If (Original_sym_illus Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_sym_illus,Byte())
            End If
            If (Original_sym_id Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_sym_id,String)
            End If
            If (Original_sym_svg_line Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_sym_svg_line,String)
            End If
            If (Original_sym_svg_fill Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_sym_svg_fill,String)
            End If
            If (Original_sort_weight Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_sort_weight,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal sym_code As Integer, ByVal sym_sss As String, ByVal sym_fill As Global.System.Nullable(Of Integer), ByVal sym_rot As Global.System.Nullable(Of Integer), ByVal sym_w As Global.System.Nullable(Of Integer), ByVal sym_h As Global.System.Nullable(Of Integer), ByVal sym_bs_code As Global.System.Nullable(Of Integer), ByVal sym_sg_code As Global.System.Nullable(Of Integer), ByVal sym_png() As Byte, ByVal sym_illus() As Byte, ByVal sym_id As String, ByVal sym_svg_line As String, ByVal sym_svg_fill As String, ByVal sort_weight As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(sym_code,Integer)
            If (sym_sss Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(sym_sss,String)
            End If
            If (sym_fill.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(sym_fill.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (sym_rot.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(sym_rot.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (sym_w.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(sym_w.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (sym_h.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(sym_h.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (sym_bs_code.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(sym_bs_code.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (sym_sg_code.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(sym_sg_code.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (sym_png Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(sym_png,Byte())
            End If
            If (sym_illus Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(sym_illus,Byte())
            End If
            If (sym_id Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(sym_id,String)
            End If
            If (sym_svg_line Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(sym_svg_line,String)
            End If
            If (sym_svg_fill Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(sym_svg_fill,String)
            End If
            If (sort_weight Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(sort_weight,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal sym_code As Integer,  _
                    ByVal sym_sss As String,  _
                    ByVal sym_fill As Global.System.Nullable(Of Integer),  _
                    ByVal sym_rot As Global.System.Nullable(Of Integer),  _
                    ByVal sym_w As Global.System.Nullable(Of Integer),  _
                    ByVal sym_h As Global.System.Nullable(Of Integer),  _
                    ByVal sym_bs_code As Global.System.Nullable(Of Integer),  _
                    ByVal sym_sg_code As Global.System.Nullable(Of Integer),  _
                    ByVal sym_png() As Byte,  _
                    ByVal sym_illus() As Byte,  _
                    ByVal sym_id As String,  _
                    ByVal sym_svg_line As String,  _
                    ByVal sym_svg_fill As String,  _
                    ByVal sort_weight As String,  _
                    ByVal Original_sym_code As Integer,  _
                    ByVal Original_sym_sss As String,  _
                    ByVal Original_sym_fill As Global.System.Nullable(Of Integer),  _
                    ByVal Original_sym_rot As Global.System.Nullable(Of Integer),  _
                    ByVal Original_sym_w As Global.System.Nullable(Of Integer),  _
                    ByVal Original_sym_h As Global.System.Nullable(Of Integer),  _
                    ByVal Original_sym_bs_code As Global.System.Nullable(Of Integer),  _
                    ByVal Original_sym_sg_code As Global.System.Nullable(Of Integer),  _
                    ByVal Original_sym_png() As Byte,  _
                    ByVal Original_sym_illus() As Byte,  _
                    ByVal Original_sym_id As String,  _
                    ByVal Original_sym_svg_line As String,  _
                    ByVal Original_sym_svg_fill As String,  _
                    ByVal Original_sort_weight As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(sym_code,Integer)
            If (sym_sss Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(sym_sss,String)
            End If
            If (sym_fill.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(sym_fill.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (sym_rot.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(sym_rot.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (sym_w.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(sym_w.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (sym_h.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(sym_h.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (sym_bs_code.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(sym_bs_code.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (sym_sg_code.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(sym_sg_code.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (sym_png Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(sym_png,Byte())
            End If
            If (sym_illus Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(sym_illus,Byte())
            End If
            If (sym_id Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(sym_id,String)
            End If
            If (sym_svg_line Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(sym_svg_line,String)
            End If
            If (sym_svg_fill Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(sym_svg_fill,String)
            End If
            If (sort_weight Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(sort_weight,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_sym_code,Integer)
            If (Original_sym_sss Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_sym_sss,String)
            End If
            If (Original_sym_fill.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_sym_fill.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_sym_rot.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_sym_rot.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_sym_w.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_sym_w.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_sym_h.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_sym_h.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_sym_bs_code.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_sym_bs_code.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_sym_sg_code.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_sym_sg_code.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Original_sym_png Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_sym_png,Byte())
            End If
            If (Original_sym_illus Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_sym_illus,Byte())
            End If
            If (Original_sym_id Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_sym_id,String)
            End If
            If (Original_sym_svg_line Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_sym_svg_line,String)
            End If
            If (Original_sym_svg_fill Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_sym_svg_fill,String)
            End If
            If (Original_sort_weight Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_sort_weight,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal sym_sss As String,  _
                    ByVal sym_fill As Global.System.Nullable(Of Integer),  _
                    ByVal sym_rot As Global.System.Nullable(Of Integer),  _
                    ByVal sym_w As Global.System.Nullable(Of Integer),  _
                    ByVal sym_h As Global.System.Nullable(Of Integer),  _
                    ByVal sym_bs_code As Global.System.Nullable(Of Integer),  _
                    ByVal sym_sg_code As Global.System.Nullable(Of Integer),  _
                    ByVal sym_png() As Byte,  _
                    ByVal sym_illus() As Byte,  _
                    ByVal sym_id As String,  _
                    ByVal sym_svg_line As String,  _
                    ByVal sym_svg_fill As String,  _
                    ByVal sort_weight As String,  _
                    ByVal Original_sym_code As Integer,  _
                    ByVal Original_sym_sss As String,  _
                    ByVal Original_sym_fill As Global.System.Nullable(Of Integer),  _
                    ByVal Original_sym_rot As Global.System.Nullable(Of Integer),  _
                    ByVal Original_sym_w As Global.System.Nullable(Of Integer),  _
                    ByVal Original_sym_h As Global.System.Nullable(Of Integer),  _
                    ByVal Original_sym_bs_code As Global.System.Nullable(Of Integer),  _
                    ByVal Original_sym_sg_code As Global.System.Nullable(Of Integer),  _
                    ByVal Original_sym_png() As Byte,  _
                    ByVal Original_sym_illus() As Byte,  _
                    ByVal Original_sym_id As String,  _
                    ByVal Original_sym_svg_line As String,  _
                    ByVal Original_sym_svg_fill As String,  _
                    ByVal Original_sort_weight As String) As Integer
            Return Me.Update(Original_sym_code, sym_sss, sym_fill, sym_rot, sym_w, sym_h, sym_bs_code, sym_sg_code, sym_png, sym_illus, sym_id, sym_svg_line, sym_svg_fill, sort_weight, Original_sym_code, Original_sym_sss, Original_sym_fill, Original_sym_rot, Original_sym_w, Original_sym_h, Original_sym_bs_code, Original_sym_sg_code, Original_sym_png, Original_sym_illus, Original_sym_id, Original_sym_svg_line, Original_sym_svg_fill, Original_sort_weight)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function QueryBasenameByCode(ByVal code As Integer) As Object
            Dim command As Global.System.Data.SQLite.SQLiteCommand = Me.CommandCollection(7)
            command.Parameters(0).Value = CType(code,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,Object)
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function QueryPngByCode(ByVal code As Integer) As Byte()
            Dim command As Global.System.Data.SQLite.SQLiteCommand = Me.CommandCollection(8)
            command.Parameters(0).Value = CType(code,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,Byte())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class symbolgroupTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "symbolgroup"
            tableMapping.ColumnMappings.Add("sg_code", "sg_code")
            tableMapping.ColumnMappings.Add("sg_sym_code", "sg_sym_code")
            tableMapping.ColumnMappings.Add("sg_num", "sg_num")
            tableMapping.ColumnMappings.Add("sg_cat_num", "sg_cat_num")
            tableMapping.ColumnMappings.Add("sg_grp_num", "sg_grp_num")
            tableMapping.ColumnMappings.Add("sg_bases", "sg_bases")
            tableMapping.ColumnMappings.Add("sg_color", "sg_color")
            tableMapping.ColumnMappings.Add("sg_token", "sg_token")
            tableMapping.ColumnMappings.Add("sg_name", "sg_name")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [symbolgroup] WHERE (([sg_code] = @Original_sg_code) AND ((@IsNull_sg"& _ 
                "_sym_code = 1 AND [sg_sym_code] IS NULL) OR ([sg_sym_code] = @Original_sg_sym_co"& _ 
                "de)) AND ((@IsNull_sg_num = 1 AND [sg_num] IS NULL) OR ([sg_num] = @Original_sg_"& _ 
                "num)) AND ((@IsNull_sg_cat_num = 1 AND [sg_cat_num] IS NULL) OR ([sg_cat_num] = "& _ 
                "@Original_sg_cat_num)) AND ((@IsNull_sg_grp_num = 1 AND [sg_grp_num] IS NULL) OR"& _ 
                " ([sg_grp_num] = @Original_sg_grp_num)) AND ((@IsNull_sg_bases = 1 AND [sg_bases"& _ 
                "] IS NULL) OR ([sg_bases] = @Original_sg_bases)) AND ((@IsNull_sg_color = 1 AND "& _ 
                "[sg_color] IS NULL) OR ([sg_color] = @Original_sg_color)) AND ((@IsNull_sg_token"& _ 
                " = 1 AND [sg_token] IS NULL) OR ([sg_token] = @Original_sg_token)) AND ((@IsNull"& _ 
                "_sg_name = 1 AND [sg_name] IS NULL) OR ([sg_name] = @Original_sg_name)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_sg_code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sg_code"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_sg_sym_code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sg_sym_code"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_sg_sym_code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sg_sym_code"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_sg_num"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sg_num"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_sg_num"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sg_num"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_sg_cat_num"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sg_cat_num"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_sg_cat_num"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sg_cat_num"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_sg_grp_num"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sg_grp_num"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_sg_grp_num"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sg_grp_num"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_sg_bases"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sg_bases"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_sg_bases"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sg_bases"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_sg_color"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sg_color"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_sg_color"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "sg_color"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_sg_token"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sg_token"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_sg_token"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "sg_token"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_sg_name"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sg_name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_sg_name"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "sg_name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [symbolgroup] ([sg_code], [sg_sym_code], [sg_num], [sg_cat_num], [sg_"& _ 
                "grp_num], [sg_bases], [sg_color], [sg_token], [sg_name]) VALUES (@sg_code, @sg_s"& _ 
                "ym_code, @sg_num, @sg_cat_num, @sg_grp_num, @sg_bases, @sg_color, @sg_token, @sg"& _ 
                "_name)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@sg_code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sg_code"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@sg_sym_code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sg_sym_code"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@sg_num"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sg_num"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@sg_cat_num"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sg_cat_num"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@sg_grp_num"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sg_grp_num"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@sg_bases"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sg_bases"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@sg_color"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "sg_color"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@sg_token"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "sg_token"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@sg_name"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "sg_name"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [symbolgroup] SET [sg_code] = @sg_code, [sg_sym_code] = @sg_sym_code, [sg_"& _ 
                "num] = @sg_num, [sg_cat_num] = @sg_cat_num, [sg_grp_num] = @sg_grp_num, [sg_base"& _ 
                "s] = @sg_bases, [sg_color] = @sg_color, [sg_token] = @sg_token, [sg_name] = @sg_"& _ 
                "name WHERE (([sg_code] = @Original_sg_code) AND ((@IsNull_sg_sym_code = 1 AND [s"& _ 
                "g_sym_code] IS NULL) OR ([sg_sym_code] = @Original_sg_sym_code)) AND ((@IsNull_s"& _ 
                "g_num = 1 AND [sg_num] IS NULL) OR ([sg_num] = @Original_sg_num)) AND ((@IsNull_"& _ 
                "sg_cat_num = 1 AND [sg_cat_num] IS NULL) OR ([sg_cat_num] = @Original_sg_cat_num"& _ 
                ")) AND ((@IsNull_sg_grp_num = 1 AND [sg_grp_num] IS NULL) OR ([sg_grp_num] = @Or"& _ 
                "iginal_sg_grp_num)) AND ((@IsNull_sg_bases = 1 AND [sg_bases] IS NULL) OR ([sg_b"& _ 
                "ases] = @Original_sg_bases)) AND ((@IsNull_sg_color = 1 AND [sg_color] IS NULL) "& _ 
                "OR ([sg_color] = @Original_sg_color)) AND ((@IsNull_sg_token = 1 AND [sg_token] "& _ 
                "IS NULL) OR ([sg_token] = @Original_sg_token)) AND ((@IsNull_sg_name = 1 AND [sg"& _ 
                "_name] IS NULL) OR ([sg_name] = @Original_sg_name)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@sg_code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sg_code"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@sg_sym_code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sg_sym_code"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@sg_num"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sg_num"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@sg_cat_num"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sg_cat_num"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@sg_grp_num"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sg_grp_num"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@sg_bases"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sg_bases"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@sg_color"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "sg_color"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@sg_token"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "sg_token"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@sg_name"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "sg_name"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_sg_code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sg_code"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_sg_sym_code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sg_sym_code"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_sg_sym_code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sg_sym_code"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_sg_num"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sg_num"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_sg_num"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sg_num"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_sg_cat_num"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sg_cat_num"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_sg_cat_num"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sg_cat_num"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_sg_grp_num"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sg_grp_num"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_sg_grp_num"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sg_grp_num"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_sg_bases"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sg_bases"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_sg_bases"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sg_bases"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_sg_color"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sg_color"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_sg_color"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "sg_color"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_sg_token"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sg_token"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_sg_token"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "sg_token"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_sg_name"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "sg_name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_sg_name"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "sg_name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.SignWriterStudio.SymbolCache.My.MySettings.Default.ISWA2010ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [sg_code], [sg_sym_code], [sg_num], [sg_cat_num], [sg_grp_num], [sg_bases]"& _ 
                ", [sg_color], [sg_token], [sg_name] FROM [symbolgroup]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ISWA2010DataSet.symbolgroupDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ISWA2010DataSet.symbolgroupDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ISWA2010DataSet.symbolgroupDataTable = New ISWA2010DataSet.symbolgroupDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ISWA2010DataSet.symbolgroupDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ISWA2010DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "symbolgroup")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_sg_code As Integer, ByVal Original_sg_sym_code As Global.System.Nullable(Of Integer), ByVal Original_sg_num As Global.System.Nullable(Of Integer), ByVal Original_sg_cat_num As Global.System.Nullable(Of Integer), ByVal Original_sg_grp_num As Global.System.Nullable(Of Integer), ByVal Original_sg_bases As Global.System.Nullable(Of Integer), ByVal Original_sg_color As String, ByVal Original_sg_token As String, ByVal Original_sg_name As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_sg_code,Integer)
            If (Original_sg_sym_code.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_sg_sym_code.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_sg_num.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_sg_num.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_sg_cat_num.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_sg_cat_num.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_sg_grp_num.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_sg_grp_num.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_sg_bases.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_sg_bases.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_sg_color Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_sg_color,String)
            End If
            If (Original_sg_token Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_sg_token,String)
            End If
            If (Original_sg_name Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_sg_name,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal sg_code As Integer, ByVal sg_sym_code As Global.System.Nullable(Of Integer), ByVal sg_num As Global.System.Nullable(Of Integer), ByVal sg_cat_num As Global.System.Nullable(Of Integer), ByVal sg_grp_num As Global.System.Nullable(Of Integer), ByVal sg_bases As Global.System.Nullable(Of Integer), ByVal sg_color As String, ByVal sg_token As String, ByVal sg_name As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(sg_code,Integer)
            If (sg_sym_code.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(sg_sym_code.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (sg_num.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(sg_num.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (sg_cat_num.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(sg_cat_num.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (sg_grp_num.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(sg_grp_num.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (sg_bases.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(sg_bases.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (sg_color Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(sg_color,String)
            End If
            If (sg_token Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(sg_token,String)
            End If
            If (sg_name Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(sg_name,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal sg_code As Integer,  _
                    ByVal sg_sym_code As Global.System.Nullable(Of Integer),  _
                    ByVal sg_num As Global.System.Nullable(Of Integer),  _
                    ByVal sg_cat_num As Global.System.Nullable(Of Integer),  _
                    ByVal sg_grp_num As Global.System.Nullable(Of Integer),  _
                    ByVal sg_bases As Global.System.Nullable(Of Integer),  _
                    ByVal sg_color As String,  _
                    ByVal sg_token As String,  _
                    ByVal sg_name As String,  _
                    ByVal Original_sg_code As Integer,  _
                    ByVal Original_sg_sym_code As Global.System.Nullable(Of Integer),  _
                    ByVal Original_sg_num As Global.System.Nullable(Of Integer),  _
                    ByVal Original_sg_cat_num As Global.System.Nullable(Of Integer),  _
                    ByVal Original_sg_grp_num As Global.System.Nullable(Of Integer),  _
                    ByVal Original_sg_bases As Global.System.Nullable(Of Integer),  _
                    ByVal Original_sg_color As String,  _
                    ByVal Original_sg_token As String,  _
                    ByVal Original_sg_name As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(sg_code,Integer)
            If (sg_sym_code.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(sg_sym_code.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (sg_num.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(sg_num.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (sg_cat_num.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(sg_cat_num.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (sg_grp_num.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(sg_grp_num.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (sg_bases.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(sg_bases.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (sg_color Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(sg_color,String)
            End If
            If (sg_token Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(sg_token,String)
            End If
            If (sg_name Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(sg_name,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_sg_code,Integer)
            If (Original_sg_sym_code.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_sg_sym_code.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Original_sg_num.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_sg_num.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Original_sg_cat_num.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_sg_cat_num.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Original_sg_grp_num.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_sg_grp_num.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Original_sg_bases.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_sg_bases.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Original_sg_color Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_sg_color,String)
            End If
            If (Original_sg_token Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_sg_token,String)
            End If
            If (Original_sg_name Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_sg_name,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal sg_sym_code As Global.System.Nullable(Of Integer),  _
                    ByVal sg_num As Global.System.Nullable(Of Integer),  _
                    ByVal sg_cat_num As Global.System.Nullable(Of Integer),  _
                    ByVal sg_grp_num As Global.System.Nullable(Of Integer),  _
                    ByVal sg_bases As Global.System.Nullable(Of Integer),  _
                    ByVal sg_color As String,  _
                    ByVal sg_token As String,  _
                    ByVal sg_name As String,  _
                    ByVal Original_sg_code As Integer,  _
                    ByVal Original_sg_sym_code As Global.System.Nullable(Of Integer),  _
                    ByVal Original_sg_num As Global.System.Nullable(Of Integer),  _
                    ByVal Original_sg_cat_num As Global.System.Nullable(Of Integer),  _
                    ByVal Original_sg_grp_num As Global.System.Nullable(Of Integer),  _
                    ByVal Original_sg_bases As Global.System.Nullable(Of Integer),  _
                    ByVal Original_sg_color As String,  _
                    ByVal Original_sg_token As String,  _
                    ByVal Original_sg_name As String) As Integer
            Return Me.Update(Original_sg_code, sg_sym_code, sg_num, sg_cat_num, sg_grp_num, sg_bases, sg_color, sg_token, sg_name, Original_sg_code, Original_sg_sym_code, Original_sg_num, Original_sg_cat_num, Original_sg_grp_num, Original_sg_bases, Original_sg_color, Original_sg_token, Original_sg_name)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class thumbpositionTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "thumbposition"
            tableMapping.ColumnMappings.Add("IDThumbPosition", "IDThumbPosition")
            tableMapping.ColumnMappings.Add("ThumbPositionName", "ThumbPositionName")
            tableMapping.ColumnMappings.Add("IDUIItem", "IDUIItem")
            tableMapping.ColumnMappings.Add("Order", "Order")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [thumbposition] WHERE (([IDThumbPosition] = @Original_IDThumbPosition"& _ 
                ") AND ((@IsNull_ThumbPositionName = 1 AND [ThumbPositionName] IS NULL) OR ([Thum"& _ 
                "bPositionName] = @Original_ThumbPositionName)) AND ((@IsNull_IDUIItem = 1 AND [I"& _ 
                "DUIItem] IS NULL) OR ([IDUIItem] = @Original_IDUIItem)) AND ((@IsNull_Order = 1 "& _ 
                "AND [Order] IS NULL) OR ([Order] = @Original_Order)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDThumbPosition"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDThumbPosition"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_ThumbPositionName"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "ThumbPositionName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_ThumbPositionName"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "ThumbPositionName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_IDUIItem"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDUIItem"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDUIItem"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDUIItem"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_Order"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Order"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_Order"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Order"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [thumbposition] ([IDThumbPosition], [ThumbPositionName], [IDUIItem], "& _ 
                "[Order]) VALUES (@IDThumbPosition, @ThumbPositionName, @IDUIItem, @Order)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDThumbPosition"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDThumbPosition"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ThumbPositionName"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "ThumbPositionName"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDUIItem"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDUIItem"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Order"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Order"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [thumbposition] SET [IDThumbPosition] = @IDThumbPosition, [ThumbPositionNa"& _ 
                "me] = @ThumbPositionName, [IDUIItem] = @IDUIItem, [Order] = @Order WHERE (([IDTh"& _ 
                "umbPosition] = @Original_IDThumbPosition) AND ((@IsNull_ThumbPositionName = 1 AN"& _ 
                "D [ThumbPositionName] IS NULL) OR ([ThumbPositionName] = @Original_ThumbPosition"& _ 
                "Name)) AND ((@IsNull_IDUIItem = 1 AND [IDUIItem] IS NULL) OR ([IDUIItem] = @Orig"& _ 
                "inal_IDUIItem)) AND ((@IsNull_Order = 1 AND [Order] IS NULL) OR ([Order] = @Orig"& _ 
                "inal_Order)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDThumbPosition"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDThumbPosition"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@ThumbPositionName"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "ThumbPositionName"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDUIItem"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDUIItem"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Order"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Order"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDThumbPosition"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDThumbPosition"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_ThumbPositionName"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "ThumbPositionName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_ThumbPositionName"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "ThumbPositionName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_IDUIItem"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDUIItem"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDUIItem"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDUIItem"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_Order"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Order"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_Order"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Order"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.SignWriterStudio.SymbolCache.My.MySettings.Default.ISWA2010ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        IDThumbPosition, ThumbPositionName, IDUIItem, [Order]"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM        "& _ 
                "    thumbposition"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY [Order]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ISWA2010DataSet.thumbpositionDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ISWA2010DataSet.thumbpositionDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ISWA2010DataSet.thumbpositionDataTable = New ISWA2010DataSet.thumbpositionDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ISWA2010DataSet.thumbpositionDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ISWA2010DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "thumbposition")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_IDThumbPosition As Integer, ByVal Original_ThumbPositionName As String, ByVal Original_IDUIItem As Global.System.Nullable(Of Integer), ByVal Original_Order As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IDThumbPosition,Integer)
            If (Original_ThumbPositionName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ThumbPositionName,String)
            End If
            If (Original_IDUIItem.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_IDUIItem.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_Order.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Order.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal IDThumbPosition As Integer, ByVal ThumbPositionName As String, ByVal IDUIItem As Global.System.Nullable(Of Integer), ByVal Order As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(IDThumbPosition,Integer)
            If (ThumbPositionName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ThumbPositionName,String)
            End If
            If (IDUIItem.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(IDUIItem.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Order.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Order.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal IDThumbPosition As Integer, ByVal ThumbPositionName As String, ByVal IDUIItem As Global.System.Nullable(Of Integer), ByVal Order As Global.System.Nullable(Of Integer), ByVal Original_IDThumbPosition As Integer, ByVal Original_ThumbPositionName As String, ByVal Original_IDUIItem As Global.System.Nullable(Of Integer), ByVal Original_Order As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(IDThumbPosition,Integer)
            If (ThumbPositionName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ThumbPositionName,String)
            End If
            If (IDUIItem.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(IDUIItem.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Order.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Order.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_IDThumbPosition,Integer)
            If (Original_ThumbPositionName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_ThumbPositionName,String)
            End If
            If (Original_IDUIItem.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_IDUIItem.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_Order.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_Order.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ThumbPositionName As String, ByVal IDUIItem As Global.System.Nullable(Of Integer), ByVal Order As Global.System.Nullable(Of Integer), ByVal Original_IDThumbPosition As Integer, ByVal Original_ThumbPositionName As String, ByVal Original_IDUIItem As Global.System.Nullable(Of Integer), ByVal Original_Order As Global.System.Nullable(Of Integer)) As Integer
            Return Me.Update(Original_IDThumbPosition, ThumbPositionName, IDUIItem, Order, Original_IDThumbPosition, Original_ThumbPositionName, Original_IDUIItem, Original_Order)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class versionTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "version"
            tableMapping.ColumnMappings.Add("IDVersion", "IDVersion")
            tableMapping.ColumnMappings.Add("Major", "Major")
            tableMapping.ColumnMappings.Add("Minor", "Minor")
            tableMapping.ColumnMappings.Add("DatabaseName", "DatabaseName")
            tableMapping.ColumnMappings.Add("DatabaseType", "DatabaseType")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [version] WHERE (([IDVersion] = @Original_IDVersion) AND ((@IsNull_Ma"& _ 
                "jor = 1 AND [Major] IS NULL) OR ([Major] = @Original_Major)) AND ((@IsNull_Minor"& _ 
                " = 1 AND [Minor] IS NULL) OR ([Minor] = @Original_Minor)) AND ((@IsNull_Database"& _ 
                "Name = 1 AND [DatabaseName] IS NULL) OR ([DatabaseName] = @Original_DatabaseName"& _ 
                ")) AND ((@IsNull_DatabaseType = 1 AND [DatabaseType] IS NULL) OR ([DatabaseType]"& _ 
                " = @Original_DatabaseType)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDVersion"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDVersion"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_Major"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Major"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_Major"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Major"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_Minor"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Minor"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_Minor"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Minor"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_DatabaseName"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "DatabaseName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_DatabaseName"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "DatabaseName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_DatabaseType"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "DatabaseType"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_DatabaseType"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "DatabaseType"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [version] ([IDVersion], [Major], [Minor], [DatabaseName], [DatabaseTy"& _ 
                "pe]) VALUES (@IDVersion, @Major, @Minor, @DatabaseName, @DatabaseType)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDVersion"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDVersion"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Major"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Major"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Minor"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Minor"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@DatabaseName"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "DatabaseName"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@DatabaseType"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "DatabaseType"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.System.Data.SQLite.SQLiteCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [version] SET [IDVersion] = @IDVersion, [Major] = @Major, [Minor] = @Minor"& _ 
                ", [DatabaseName] = @DatabaseName, [DatabaseType] = @DatabaseType WHERE (([IDVers"& _ 
                "ion] = @Original_IDVersion) AND ((@IsNull_Major = 1 AND [Major] IS NULL) OR ([Ma"& _ 
                "jor] = @Original_Major)) AND ((@IsNull_Minor = 1 AND [Minor] IS NULL) OR ([Minor"& _ 
                "] = @Original_Minor)) AND ((@IsNull_DatabaseName = 1 AND [DatabaseName] IS NULL)"& _ 
                " OR ([DatabaseName] = @Original_DatabaseName)) AND ((@IsNull_DatabaseType = 1 AN"& _ 
                "D [DatabaseType] IS NULL) OR ([DatabaseType] = @Original_DatabaseType)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IDVersion"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDVersion"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Major"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Major"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Minor"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Minor"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@DatabaseName"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "DatabaseName"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@DatabaseType"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "DatabaseType"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_IDVersion"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "IDVersion"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_Major"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Major"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_Major"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Major"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_Minor"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Minor"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_Minor"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "Minor"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_DatabaseName"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "DatabaseName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_DatabaseName"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "DatabaseName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@IsNull_DatabaseType"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.SourceColumn = "DatabaseType"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@Original_DatabaseType"
            param.DbType = Global.System.Data.DbType.[String]
            param.SourceColumn = "DatabaseType"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.SignWriterStudio.SymbolCache.My.MySettings.Default.ISWA2010ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [IDVersion], [Major], [Minor], [DatabaseName], [DatabaseType] FROM [versio"& _ 
                "n]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ISWA2010DataSet.versionDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ISWA2010DataSet.versionDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ISWA2010DataSet.versionDataTable = New ISWA2010DataSet.versionDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ISWA2010DataSet.versionDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ISWA2010DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "version")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_IDVersion As Integer, ByVal Original_Major As Global.System.Nullable(Of Integer), ByVal Original_Minor As Global.System.Nullable(Of Integer), ByVal Original_DatabaseName As String, ByVal Original_DatabaseType As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IDVersion,Integer)
            If (Original_Major.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Major.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_Minor.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Minor.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_DatabaseName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_DatabaseName,String)
            End If
            If (Original_DatabaseType Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_DatabaseType,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal IDVersion As Integer, ByVal Major As Global.System.Nullable(Of Integer), ByVal Minor As Global.System.Nullable(Of Integer), ByVal DatabaseName As String, ByVal DatabaseType As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(IDVersion,Integer)
            If (Major.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Major.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Minor.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Minor.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (DatabaseName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(DatabaseName,String)
            End If
            If (DatabaseType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(DatabaseType,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal IDVersion As Integer, ByVal Major As Global.System.Nullable(Of Integer), ByVal Minor As Global.System.Nullable(Of Integer), ByVal DatabaseName As String, ByVal DatabaseType As String, ByVal Original_IDVersion As Integer, ByVal Original_Major As Global.System.Nullable(Of Integer), ByVal Original_Minor As Global.System.Nullable(Of Integer), ByVal Original_DatabaseName As String, ByVal Original_DatabaseType As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(IDVersion,Integer)
            If (Major.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Major.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Minor.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Minor.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (DatabaseName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(DatabaseName,String)
            End If
            If (DatabaseType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(DatabaseType,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_IDVersion,Integer)
            If (Original_Major.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_Major.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Original_Minor.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_Minor.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Original_DatabaseName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_DatabaseName,String)
            End If
            If (Original_DatabaseType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_DatabaseType,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Major As Global.System.Nullable(Of Integer), ByVal Minor As Global.System.Nullable(Of Integer), ByVal DatabaseName As String, ByVal DatabaseType As String, ByVal Original_IDVersion As Integer, ByVal Original_Major As Global.System.Nullable(Of Integer), ByVal Original_Minor As Global.System.Nullable(Of Integer), ByVal Original_DatabaseName As String, ByVal Original_DatabaseType As String) As Integer
            Return Me.Update(Original_IDVersion, Major, Minor, DatabaseName, DatabaseType, Original_IDVersion, Original_Major, Original_Minor, Original_DatabaseName, Original_DatabaseType)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class cacheTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SQLite.SQLiteDataAdapter
        
        Private _connection As Global.System.Data.SQLite.SQLiteConnection
        
        Private _transaction As Global.System.Data.SQLite.SQLiteTransaction
        
        Private _commandCollection() As Global.System.Data.SQLite.SQLiteCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SQLite.SQLiteDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SQLite.SQLiteConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SQLite.SQLiteCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SQLite.SQLiteTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SQLite.SQLiteCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SQLite.SQLiteDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "cache"
            tableMapping.ColumnMappings.Add("sym_code", "sym_code")
            tableMapping.ColumnMappings.Add("sym_fill", "sym_fill")
            tableMapping.ColumnMappings.Add("sym_rot", "sym_rot")
            tableMapping.ColumnMappings.Add("sym_w", "sym_w")
            tableMapping.ColumnMappings.Add("sym_h", "sym_h")
            tableMapping.ColumnMappings.Add("sym_png", "sym_png")
            tableMapping.ColumnMappings.Add("sym_illus", "sym_illus")
            tableMapping.ColumnMappings.Add("sym_id", "sym_id")
            tableMapping.ColumnMappings.Add("sg_cat_num", "sg_cat_num")
            tableMapping.ColumnMappings.Add("sg_grp_num", "sg_grp_num")
            tableMapping.ColumnMappings.Add("bs_bas_num", "bs_bas_num")
            tableMapping.ColumnMappings.Add("bs_var_num", "bs_var_num")
            tableMapping.ColumnMappings.Add("bs_sym_code", "bs_sym_code")
            tableMapping.ColumnMappings.Add("bs_name", "bs_name")
            tableMapping.ColumnMappings.Add("bs_vars", "bs_vars")
            tableMapping.ColumnMappings.Add("bs_fills", "bs_fills")
            tableMapping.ColumnMappings.Add("bs_rots", "bs_rots")
            tableMapping.ColumnMappings.Add("sg_color", "sg_color")
            tableMapping.ColumnMappings.Add("sym_bs_code", "sym_bs_code")
            tableMapping.ColumnMappings.Add("sort_weight", "sort_weight")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SQLite.SQLiteConnection()
            Me._connection.ConnectionString = Global.SignWriterStudio.SymbolCache.My.MySettings.Default.ISWA2010ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SQLite.SQLiteCommand(11) {}
            Me._commandCollection(0) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        symbol.sym_code, symbol.sym_id, symbol.sym_png, symbol.sym_illus, s"& _ 
                "ymbolgroup.sg_cat_num, symbolgroup.sg_grp_num, basesymbol.bs_bas_num, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        "& _ 
                "                 basesymbol.bs_var_num, symbol.sym_fill, symbol.sym_rot, symbol."& _ 
                "sym_w, symbol.sym_h, basesymbol.bs_sym_code, basesymbol.bs_name, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"             "& _ 
                "            basesymbol.bs_vars, basesymbol.bs_fills, basesymbol.bs_rots, symbolg"& _ 
                "roup.sg_color, symbol.sym_bs_code, symbol.sort_weight"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            basesymbo"& _ 
                "l INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         symbolgroup ON basesymbol.bs_sg_code = sy"& _ 
                "mbolgroup.sg_code INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         symbol ON basesymbol.bs_s"& _ 
                "ym_code = symbol.sym_code"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        symbol.sym_code, symbol.sym_id, symbol.sym_png, symbol.sym_illus, s"& _ 
                "ymbolgroup.sg_cat_num, symbolgroup.sg_grp_num, basesymbol.bs_bas_num, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        "& _ 
                "                 basesymbol.bs_var_num, symbol.sym_fill, symbol.sym_rot, symbol."& _ 
                "sym_w, symbol.sym_h, basesymbol.bs_sym_code, basesymbol.bs_name, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"             "& _ 
                "            basesymbol.bs_vars, basesymbol.bs_fills, basesymbol.bs_rots, symbolg"& _ 
                "roup.sg_color, symbol.sym_bs_code, symbol.sort_weight"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            basesymbo"& _ 
                "l INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         symbolgroup ON basesymbol.bs_sg_code = sy"& _ 
                "mbolgroup.sg_code INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         symbol ON basesymbol.bs_s"& _ 
                "ym_code = symbol.sym_code"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (symbolgroup.sg_cat_num = 1)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT        symbol.sym_code, symbol.sym_id, symbol.sym_png, symbol.sym_illus, s"& _ 
                "ymbolgroup.sg_cat_num, symbolgroup.sg_grp_num, basesymbol.bs_bas_num, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        "& _ 
                "                 basesymbol.bs_var_num, symbol.sym_fill, symbol.sym_rot, symbol."& _ 
                "sym_w, symbol.sym_h, basesymbol.bs_sym_code, basesymbol.bs_name, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"             "& _ 
                "            basesymbol.bs_vars, basesymbol.bs_fills, basesymbol.bs_rots, symbolg"& _ 
                "roup.sg_color, symbol.sym_bs_code, symbol.sort_weight"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            basesymbo"& _ 
                "l INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         symbolgroup ON basesymbol.bs_sg_code = sy"& _ 
                "mbolgroup.sg_code INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         symbol ON basesymbol.bs_s"& _ 
                "ym_code = symbol.sym_code"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT        symbol.sym_code, symbol.sym_id, symbol.sym_png, symbol.sym_illus, s"& _ 
                "ymbolgroup.sg_cat_num, symbolgroup.sg_grp_num, basesymbol.bs_bas_num, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        "& _ 
                "                 basesymbol.bs_var_num, symbol.sym_fill, symbol.sym_rot, symbol."& _ 
                "sym_w, symbol.sym_h, basesymbol.bs_sym_code, basesymbol.bs_name, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"             "& _ 
                "            basesymbol.bs_vars, basesymbol.bs_fills, basesymbol.bs_rots, symbolg"& _ 
                "roup.sg_color, symbol.sym_bs_code, symbol.sort_weight"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            basesymbo"& _ 
                "l INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         symbolgroup ON basesymbol.bs_sg_code = sy"& _ 
                "mbolgroup.sg_code INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         symbol ON basesymbol.bs_s"& _ 
                "ym_code = symbol.sym_code"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (symbol.sym_bs_code = @basegroup) AND (s"& _ 
                "ymbol.sym_fill = @fill) AND (symbol.sym_rot = @rotation)"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.System.Data.SQLite.SQLiteParameter = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@basegroup"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.SourceColumn = "sym_bs_code"
            Me._commandCollection(3).Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@fill"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.SourceColumn = "sym_fill"
            Me._commandCollection(3).Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@rotation"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.SourceColumn = "sym_rot"
            Me._commandCollection(3).Parameters.Add(param)
            Me._commandCollection(4) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT        symbol.sym_code, symbol.sym_id, symbol.sym_png, symbol.sym_illus, s"& _ 
                "ymbolgroup.sg_cat_num, symbolgroup.sg_grp_num, basesymbol.bs_bas_num, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        "& _ 
                "                 basesymbol.bs_var_num, symbol.sym_fill, symbol.sym_rot, symbol."& _ 
                "sym_w, symbol.sym_h, basesymbol.bs_sym_code, basesymbol.bs_name, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"             "& _ 
                "            basesymbol.bs_vars, basesymbol.bs_fills, basesymbol.bs_rots, symbolg"& _ 
                "roup.sg_color, symbol.sym_bs_code, symbol.sort_weight"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            symbol IN"& _ 
                "NER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         basesymbol ON symbol.sym_bs_code = basesymbol"& _ 
                ".bs_code INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         symbolgroup ON basesymbol.bs_sg_co"& _ 
                "de = symbolgroup.sg_code"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (basesymbol.bs_name LIKE @basename) AND ("& _ 
                "symbol.sym_fill = 1) AND (symbol.sym_rot = 1)"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@basename"
            param.DbType = Global.System.Data.DbType.[String]
            param.Size = 2147483647
            param.SourceColumn = "bs_name"
            Me._commandCollection(4).Parameters.Add(param)
            Me._commandCollection(5) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(5).Connection = Me.Connection
            Me._commandCollection(5).CommandText = "SELECT        symbol.sym_code, symbol.sym_id, symbol.sym_png, symbol.sym_illus, s"& _ 
                "ymbolgroup.sg_cat_num, symbolgroup.sg_grp_num, basesymbol.bs_bas_num, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        "& _ 
                "                 basesymbol.bs_var_num, symbol.sym_fill, symbol.sym_rot, symbol."& _ 
                "sym_w, symbol.sym_h, basesymbol.bs_sym_code, basesymbol.bs_name, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"             "& _ 
                "            basesymbol.bs_vars, basesymbol.bs_fills, basesymbol.bs_rots, symbolg"& _ 
                "roup.sg_color, symbol.sym_bs_code, symbol.sort_weight"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            symbol "& _ 
                "INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         basesymbol ON symbol.sym_bs_code = basesymb"& _ 
                "ol.bs_code INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         symbolgroup ON basesymbol.bs_sg_"& _ 
                "code = symbolgroup.sg_code"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (symbol.sym_code = @code)"
            Me._commandCollection(5).CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.SourceColumn = "sym_code"
            Me._commandCollection(5).Parameters.Add(param)
            Me._commandCollection(6) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(6).Connection = Me.Connection
            Me._commandCollection(6).CommandText = "SELECT        symbol.sym_code, symbol.sym_id, symbol.sym_png, symbol.sym_illus, s"& _ 
                "ymbolgroup.sg_cat_num, symbolgroup.sg_grp_num, basesymbol.bs_bas_num, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        "& _ 
                "                 basesymbol.bs_var_num, symbol.sym_fill, symbol.sym_rot, symbol."& _ 
                "sym_w, symbol.sym_h, basesymbol.bs_sym_code, basesymbol.bs_name, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"             "& _ 
                "            basesymbol.bs_vars, basesymbol.bs_fills, basesymbol.bs_rots, symbolg"& _ 
                "roup.sg_color, symbol.sym_bs_code, symbol.sort_weight"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            symbol "& _ 
                "LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         basesymbol ON symbol.sym_bs_code = bas"& _ 
                "esymbol.bs_code LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         symbolgroup ON basesym"& _ 
                "bol.bs_sg_code = symbolgroup.sg_code"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (symbolgroup.sg_cat_num = @ca"& _ 
                "tegory) AND (symbolgroup.sg_grp_num = @group) AND (basesymbol.bs_bas_num = @base"& _ 
                ") AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         (basesymbol.bs_var_num = @variation)"
            Me._commandCollection(6).CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@category"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.SourceColumn = "sg_cat_num"
            Me._commandCollection(6).Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@group"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.SourceColumn = "sg_grp_num"
            Me._commandCollection(6).Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@base"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.SourceColumn = "bs_bas_num"
            Me._commandCollection(6).Parameters.Add(param)
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@variation"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.SourceColumn = "bs_var_num"
            Me._commandCollection(6).Parameters.Add(param)
            Me._commandCollection(7) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(7).Connection = Me.Connection
            Me._commandCollection(7).CommandText = ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  SELECT    symbol.sym_code, symbol.sym_id, symbol.sym_png, symbol.sym"& _ 
                "_illus, symbolgroup.sg_cat_num, symbolgroup.sg_grp_num,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  basesymbol.b"& _ 
                "s_bas_num, basesymbol.bs_var_num, symbol.sym_fill, symbol.sym_rot, symbol.sym_w,"& _ 
                " symbol.sym_h, basesymbol.bs_sym_code,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  basesymbol.bs_name, basesymbo"& _ 
                "l.bs_vars, basesymbol.bs_fills, basesymbol.bs_rots, symbolgroup.sg_color, symbol"& _ 
                ".sym_bs_code, symbol.sort_weight"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  FROM         symbol INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  basesymbol ON symbol.sym_bs_code = basesymbol.bs_code INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  symbolgroup ON basesymbol.bs_sg_code = symbolgroup.sg_code"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  "& _ 
                "WHERE     (symbol.sym_id = @id)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  "
            Me._commandCollection(7).CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@id"
            param.DbType = Global.System.Data.DbType.[String]
            param.Size = 2147483647
            param.SourceColumn = "sym_id"
            Me._commandCollection(7).Parameters.Add(param)
            Me._commandCollection(8) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(8).Connection = Me.Connection
            Me._commandCollection(8).CommandText = "SELECT        symbol.sym_code, symbol.sym_id, symbol.sym_png, symbol.sym_illus, s"& _ 
                "ymbolgroup.sg_cat_num, symbolgroup.sg_grp_num, basesymbol.bs_bas_num, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        "& _ 
                "                 basesymbol.bs_var_num, symbol.sym_fill, symbol.sym_rot, symbol."& _ 
                "sym_w, symbol.sym_h, basesymbol.bs_sym_code, basesymbol.bs_name, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"             "& _ 
                "            basesymbol.bs_vars, basesymbol.bs_fills, basesymbol.bs_rots, symbolg"& _ 
                "roup.sg_color, symbol.sym_bs_code, symbol.sort_weight"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            symbol "& _ 
                "INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         basesymbol ON symbol.sym_bs_code = basesymb"& _ 
                "ol.bs_code INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         symbolgroup ON basesymbol.bs_sg_"& _ 
                "code = symbolgroup.sg_code"
            Me._commandCollection(8).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(9) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(9).Connection = Me.Connection
            Me._commandCollection(9).CommandText = ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  SELECT    symbol.sym_code, symbol.sym_id, symbol.sym_png, symbol.sym"& _ 
                "_illus, symbolgroup.sg_cat_num, symbolgroup.sg_grp_num,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  basesymbol.b"& _ 
                "s_bas_num, basesymbol.bs_var_num, symbol.sym_fill, symbol.sym_rot, symbol.sym_w,"& _ 
                " symbol.sym_h, basesymbol.bs_sym_code,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  basesymbol.bs_name, basesymbo"& _ 
                "l.bs_vars, basesymbol.bs_fills, basesymbol.bs_rots, symbolgroup.sg_color, symbol"& _ 
                ".sym_bs_code, symbol.sort_weight"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  FROM         symbol INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  basesymbol ON symbol.sym_bs_code = basesymbol.bs_code INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  symbolgroup ON basesymbol.bs_sg_code = symbolgroup.sg_code"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  "& _ 
                "WHERE     (symbol.sym_code IN (1, 2, 3, 4))"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  "
            Me._commandCollection(9).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(10) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(10).Connection = Me.Connection
            Me._commandCollection(10).CommandText = ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  SELECT     basesymbol.bs_name"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  FROM         symbol INNER "& _ 
                "JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  basesymbol ON symbol.sym_bs_code = basesymbol.bs_code"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(9)&"  WHERE     (symbol.sym_code = @code)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  "
            Me._commandCollection(10).CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.SourceColumn = "sym_code"
            Me._commandCollection(10).Parameters.Add(param)
            Me._commandCollection(11) = New Global.System.Data.SQLite.SQLiteCommand()
            Me._commandCollection(11).Connection = Me.Connection
            Me._commandCollection(11).CommandText = ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  SELECT     symbol.sym_png"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  FROM         symbol INNER JOIN"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  basesymbol ON symbol.sym_bs_code = basesymbol.bs_code INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  symbolgroup ON basesymbol.bs_sg_code = symbolgroup.sg_code"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&" "& _ 
                " WHERE     (symbol.sym_code = @code)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&Global.Microsoft.VisualBasic.ChrW(9)&"  "
            Me._commandCollection(11).CommandType = Global.System.Data.CommandType.Text
            param = New Global.System.Data.SQLite.SQLiteParameter()
            param.ParameterName = "@code"
            param.DbType = Global.System.Data.DbType.Int32
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.SourceColumn = "sym_code"
            Me._commandCollection(11).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ISWA2010DataSet.cacheDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ISWA2010DataSet.cacheDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ISWA2010DataSet.cacheDataTable = New ISWA2010DataSet.cacheDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBaseHands(ByVal dataTable As ISWA2010DataSet.cacheDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBaseHands() As ISWA2010DataSet.cacheDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Dim dataTable As ISWA2010DataSet.cacheDataTable = New ISWA2010DataSet.cacheDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBaseSymbols(ByVal dataTable As ISWA2010DataSet.cacheDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBaseSymbols() As ISWA2010DataSet.cacheDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Dim dataTable As ISWA2010DataSet.cacheDataTable = New ISWA2010DataSet.cacheDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByBaseGroupFillRotation(ByVal dataTable As ISWA2010DataSet.cacheDataTable, ByVal basegroup As Global.System.Nullable(Of Integer), ByVal fill As Global.System.Nullable(Of Integer), ByVal rotation As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (basegroup.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(basegroup.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (fill.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(fill.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (rotation.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(rotation.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByBaseGroupFillRotation(ByVal basegroup As Global.System.Nullable(Of Integer), ByVal fill As Global.System.Nullable(Of Integer), ByVal rotation As Global.System.Nullable(Of Integer)) As ISWA2010DataSet.cacheDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (basegroup.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(basegroup.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (fill.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(fill.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (rotation.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(rotation.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As ISWA2010DataSet.cacheDataTable = New ISWA2010DataSet.cacheDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByBasename(ByVal dataTable As ISWA2010DataSet.cacheDataTable, ByVal basename As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            If (basename Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(basename,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByBasename(ByVal basename As String) As ISWA2010DataSet.cacheDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            If (basename Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(basename,String)
            End If
            Dim dataTable As ISWA2010DataSet.cacheDataTable = New ISWA2010DataSet.cacheDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCode(ByVal dataTable As ISWA2010DataSet.cacheDataTable, ByVal code As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(code,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCode(ByVal code As Integer) As ISWA2010DataSet.cacheDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(code,Integer)
            Dim dataTable As ISWA2010DataSet.cacheDataTable = New ISWA2010DataSet.cacheDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCodeFull(ByVal dataTable As ISWA2010DataSet.cacheDataTable, ByVal category As Global.System.Nullable(Of Integer), ByVal group As Global.System.Nullable(Of Integer), ByVal base As Global.System.Nullable(Of Integer), ByVal variation As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(6)
            If (category.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(category.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (group.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(group.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (base.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(base.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (variation.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(variation.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByCodeFull(ByVal category As Global.System.Nullable(Of Integer), ByVal group As Global.System.Nullable(Of Integer), ByVal base As Global.System.Nullable(Of Integer), ByVal variation As Global.System.Nullable(Of Integer)) As ISWA2010DataSet.cacheDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(6)
            If (category.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(category.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (group.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(group.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (base.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(base.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (variation.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(variation.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As ISWA2010DataSet.cacheDataTable = New ISWA2010DataSet.cacheDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByID(ByVal dataTable As ISWA2010DataSet.cacheDataTable, ByVal id As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(7)
            If (id Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(id,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByID(ByVal id As String) As ISWA2010DataSet.cacheDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(7)
            If (id Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(id,String)
            End If
            Dim dataTable As ISWA2010DataSet.cacheDataTable = New ISWA2010DataSet.cacheDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByLoadAllSymbols(ByVal dataTable As ISWA2010DataSet.cacheDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(8)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByLoadAllSymbols() As ISWA2010DataSet.cacheDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(8)
            Dim dataTable As ISWA2010DataSet.cacheDataTable = New ISWA2010DataSet.cacheDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillFavs(ByVal dataTable As ISWA2010DataSet.cacheDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(9)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataFavs() As ISWA2010DataSet.cacheDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(9)
            Dim dataTable As ISWA2010DataSet.cacheDataTable = New ISWA2010DataSet.cacheDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function QueryBasenameByCode(ByVal code As Integer) As Object
            Dim command As Global.System.Data.SQLite.SQLiteCommand = Me.CommandCollection(10)
            command.Parameters(0).Value = CType(code,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,Object)
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function QueryPngByCode(ByVal code As Integer) As Byte()
            Dim command As Global.System.Data.SQLite.SQLiteCommand = Me.CommandCollection(11)
            command.Parameters(0).Value = CType(code,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,Byte())
            End If
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _actionfingerTableAdapter As actionfingerTableAdapter
        
        Private _basesymbolTableAdapter As basesymbolTableAdapter
        
        Private _basesymbol1TableAdapter As basesymbol1TableAdapter
        
        Private _categoryTableAdapter As categoryTableAdapter
        
        Private _classificationTableAdapter As classificationTableAdapter
        
        Private _groupTableAdapter As groupTableAdapter
        
        Private _multiplefingerTableAdapter As multiplefingerTableAdapter
        
        Private _rootshapeTableAdapter As rootshapeTableAdapter
        
        Private _rootshapegroupTableAdapter As rootshapegroupTableAdapter
        
        Private _rootshapequickTableAdapter As rootshapequickTableAdapter
        
        Private _symbolTableAdapter As symbolTableAdapter
        
        Private _symbolgroupTableAdapter As symbolgroupTableAdapter
        
        Private _thumbpositionTableAdapter As thumbpositionTableAdapter
        
        Private _versionTableAdapter As versionTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property actionfingerTableAdapter() As actionfingerTableAdapter
            Get
                Return Me._actionfingerTableAdapter
            End Get
            Set
                Me._actionfingerTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property basesymbolTableAdapter() As basesymbolTableAdapter
            Get
                Return Me._basesymbolTableAdapter
            End Get
            Set
                Me._basesymbolTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property basesymbol1TableAdapter() As basesymbol1TableAdapter
            Get
                Return Me._basesymbol1TableAdapter
            End Get
            Set
                Me._basesymbol1TableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property categoryTableAdapter() As categoryTableAdapter
            Get
                Return Me._categoryTableAdapter
            End Get
            Set
                Me._categoryTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property classificationTableAdapter() As classificationTableAdapter
            Get
                Return Me._classificationTableAdapter
            End Get
            Set
                Me._classificationTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property groupTableAdapter() As groupTableAdapter
            Get
                Return Me._groupTableAdapter
            End Get
            Set
                Me._groupTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property multiplefingerTableAdapter() As multiplefingerTableAdapter
            Get
                Return Me._multiplefingerTableAdapter
            End Get
            Set
                Me._multiplefingerTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property rootshapeTableAdapter() As rootshapeTableAdapter
            Get
                Return Me._rootshapeTableAdapter
            End Get
            Set
                Me._rootshapeTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property rootshapegroupTableAdapter() As rootshapegroupTableAdapter
            Get
                Return Me._rootshapegroupTableAdapter
            End Get
            Set
                Me._rootshapegroupTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property rootshapequickTableAdapter() As rootshapequickTableAdapter
            Get
                Return Me._rootshapequickTableAdapter
            End Get
            Set
                Me._rootshapequickTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property symbolTableAdapter() As symbolTableAdapter
            Get
                Return Me._symbolTableAdapter
            End Get
            Set
                Me._symbolTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property symbolgroupTableAdapter() As symbolgroupTableAdapter
            Get
                Return Me._symbolgroupTableAdapter
            End Get
            Set
                Me._symbolgroupTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property thumbpositionTableAdapter() As thumbpositionTableAdapter
            Get
                Return Me._thumbpositionTableAdapter
            End Get
            Set
                Me._thumbpositionTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property versionTableAdapter() As versionTableAdapter
            Get
                Return Me._versionTableAdapter
            End Get
            Set
                Me._versionTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._actionfingerTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._actionfingerTableAdapter.Connection) Is Nothing)) Then
                    Return Me._actionfingerTableAdapter.Connection
                End If
                If ((Not (Me._basesymbolTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._basesymbolTableAdapter.Connection) Is Nothing)) Then
                    Return Me._basesymbolTableAdapter.Connection
                End If
                If ((Not (Me._basesymbol1TableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._basesymbol1TableAdapter.Connection) Is Nothing)) Then
                    Return Me._basesymbol1TableAdapter.Connection
                End If
                If ((Not (Me._categoryTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._categoryTableAdapter.Connection) Is Nothing)) Then
                    Return Me._categoryTableAdapter.Connection
                End If
                If ((Not (Me._classificationTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._classificationTableAdapter.Connection) Is Nothing)) Then
                    Return Me._classificationTableAdapter.Connection
                End If
                If ((Not (Me._groupTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._groupTableAdapter.Connection) Is Nothing)) Then
                    Return Me._groupTableAdapter.Connection
                End If
                If ((Not (Me._multiplefingerTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._multiplefingerTableAdapter.Connection) Is Nothing)) Then
                    Return Me._multiplefingerTableAdapter.Connection
                End If
                If ((Not (Me._rootshapeTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._rootshapeTableAdapter.Connection) Is Nothing)) Then
                    Return Me._rootshapeTableAdapter.Connection
                End If
                If ((Not (Me._rootshapegroupTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._rootshapegroupTableAdapter.Connection) Is Nothing)) Then
                    Return Me._rootshapegroupTableAdapter.Connection
                End If
                If ((Not (Me._rootshapequickTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._rootshapequickTableAdapter.Connection) Is Nothing)) Then
                    Return Me._rootshapequickTableAdapter.Connection
                End If
                If ((Not (Me._symbolTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._symbolTableAdapter.Connection) Is Nothing)) Then
                    Return Me._symbolTableAdapter.Connection
                End If
                If ((Not (Me._symbolgroupTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._symbolgroupTableAdapter.Connection) Is Nothing)) Then
                    Return Me._symbolgroupTableAdapter.Connection
                End If
                If ((Not (Me._thumbpositionTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._thumbpositionTableAdapter.Connection) Is Nothing)) Then
                    Return Me._thumbpositionTableAdapter.Connection
                End If
                If ((Not (Me._versionTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._versionTableAdapter.Connection) Is Nothing)) Then
                    Return Me._versionTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._actionfingerTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._basesymbolTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._basesymbol1TableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._categoryTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._classificationTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._groupTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._multiplefingerTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._rootshapeTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._rootshapegroupTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._rootshapequickTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._symbolTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._symbolgroupTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._thumbpositionTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._versionTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As ISWA2010DataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._basesymbolTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.basesymbol.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._basesymbolTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._categoryTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.category.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._categoryTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._symbolTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.symbol.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._symbolTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._symbolgroupTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.symbolgroup.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._symbolgroupTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._actionfingerTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.actionfinger.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._actionfingerTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._multiplefingerTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.multiplefinger.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._multiplefingerTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._rootshapeTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.rootshape.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._rootshapeTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._rootshapegroupTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.rootshapegroup.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._rootshapegroupTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._rootshapequickTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.rootshapequick.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._rootshapequickTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._thumbpositionTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.thumbposition.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._thumbpositionTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._basesymbol1TableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.basesymbol1.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._basesymbol1TableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._classificationTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.classification.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._classificationTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._groupTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.group.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._groupTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._versionTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.version.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._versionTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As ISWA2010DataSet, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._basesymbolTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.basesymbol.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._basesymbolTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._categoryTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.category.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._categoryTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._symbolTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.symbol.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._symbolTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._symbolgroupTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.symbolgroup.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._symbolgroupTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._actionfingerTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.actionfinger.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._actionfingerTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._multiplefingerTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.multiplefinger.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._multiplefingerTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._rootshapeTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.rootshape.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._rootshapeTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._rootshapegroupTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.rootshapegroup.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._rootshapegroupTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._rootshapequickTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.rootshapequick.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._rootshapequickTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._thumbpositionTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.thumbposition.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._thumbpositionTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._basesymbol1TableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.basesymbol1.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._basesymbol1TableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._classificationTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.classification.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._classificationTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._groupTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.group.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._groupTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._versionTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.version.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._versionTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As ISWA2010DataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._versionTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.version.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._versionTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._groupTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.group.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._groupTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._classificationTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.classification.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._classificationTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._basesymbol1TableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.basesymbol1.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._basesymbol1TableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._thumbpositionTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.thumbposition.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._thumbpositionTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._rootshapequickTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.rootshapequick.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._rootshapequickTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._rootshapegroupTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.rootshapegroup.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._rootshapegroupTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._rootshapeTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.rootshape.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._rootshapeTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._multiplefingerTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.multiplefinger.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._multiplefingerTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._actionfingerTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.actionfinger.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._actionfingerTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._symbolgroupTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.symbolgroup.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._symbolgroupTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._symbolTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.symbol.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._symbolTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._categoryTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.category.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._categoryTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._basesymbolTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.basesymbol.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._basesymbolTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As ISWA2010DataSet) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._actionfingerTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._actionfingerTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._basesymbolTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._basesymbolTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._basesymbol1TableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._basesymbol1TableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._categoryTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._categoryTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._classificationTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._classificationTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._groupTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._groupTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._multiplefingerTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._multiplefingerTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._rootshapeTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._rootshapeTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._rootshapegroupTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._rootshapegroupTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._rootshapequickTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._rootshapequickTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._symbolTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._symbolTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._symbolgroupTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._symbolgroupTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._thumbpositionTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._thumbpositionTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._versionTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._versionTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._actionfingerTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._actionfingerTableAdapter, Me._actionfingerTableAdapter.Connection)
                    Me._actionfingerTableAdapter.Connection = CType(workConnection,Global.System.Data.SQLite.SQLiteConnection)
                    Me._actionfingerTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SQLite.SQLiteTransaction)
                    If Me._actionfingerTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._actionfingerTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._actionfingerTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._basesymbolTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._basesymbolTableAdapter, Me._basesymbolTableAdapter.Connection)
                    Me._basesymbolTableAdapter.Connection = CType(workConnection,Global.System.Data.SQLite.SQLiteConnection)
                    Me._basesymbolTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SQLite.SQLiteTransaction)
                    If Me._basesymbolTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._basesymbolTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._basesymbolTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._basesymbol1TableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._basesymbol1TableAdapter, Me._basesymbol1TableAdapter.Connection)
                    Me._basesymbol1TableAdapter.Connection = CType(workConnection,Global.System.Data.SQLite.SQLiteConnection)
                    Me._basesymbol1TableAdapter.Transaction = CType(workTransaction,Global.System.Data.SQLite.SQLiteTransaction)
                    If Me._basesymbol1TableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._basesymbol1TableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._basesymbol1TableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._categoryTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._categoryTableAdapter, Me._categoryTableAdapter.Connection)
                    Me._categoryTableAdapter.Connection = CType(workConnection,Global.System.Data.SQLite.SQLiteConnection)
                    Me._categoryTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SQLite.SQLiteTransaction)
                    If Me._categoryTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._categoryTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._categoryTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._classificationTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._classificationTableAdapter, Me._classificationTableAdapter.Connection)
                    Me._classificationTableAdapter.Connection = CType(workConnection,Global.System.Data.SQLite.SQLiteConnection)
                    Me._classificationTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SQLite.SQLiteTransaction)
                    If Me._classificationTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._classificationTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._classificationTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._groupTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._groupTableAdapter, Me._groupTableAdapter.Connection)
                    Me._groupTableAdapter.Connection = CType(workConnection,Global.System.Data.SQLite.SQLiteConnection)
                    Me._groupTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SQLite.SQLiteTransaction)
                    If Me._groupTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._groupTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._groupTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._multiplefingerTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._multiplefingerTableAdapter, Me._multiplefingerTableAdapter.Connection)
                    Me._multiplefingerTableAdapter.Connection = CType(workConnection,Global.System.Data.SQLite.SQLiteConnection)
                    Me._multiplefingerTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SQLite.SQLiteTransaction)
                    If Me._multiplefingerTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._multiplefingerTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._multiplefingerTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._rootshapeTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._rootshapeTableAdapter, Me._rootshapeTableAdapter.Connection)
                    Me._rootshapeTableAdapter.Connection = CType(workConnection,Global.System.Data.SQLite.SQLiteConnection)
                    Me._rootshapeTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SQLite.SQLiteTransaction)
                    If Me._rootshapeTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._rootshapeTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._rootshapeTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._rootshapegroupTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._rootshapegroupTableAdapter, Me._rootshapegroupTableAdapter.Connection)
                    Me._rootshapegroupTableAdapter.Connection = CType(workConnection,Global.System.Data.SQLite.SQLiteConnection)
                    Me._rootshapegroupTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SQLite.SQLiteTransaction)
                    If Me._rootshapegroupTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._rootshapegroupTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._rootshapegroupTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._rootshapequickTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._rootshapequickTableAdapter, Me._rootshapequickTableAdapter.Connection)
                    Me._rootshapequickTableAdapter.Connection = CType(workConnection,Global.System.Data.SQLite.SQLiteConnection)
                    Me._rootshapequickTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SQLite.SQLiteTransaction)
                    If Me._rootshapequickTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._rootshapequickTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._rootshapequickTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._symbolTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._symbolTableAdapter, Me._symbolTableAdapter.Connection)
                    Me._symbolTableAdapter.Connection = CType(workConnection,Global.System.Data.SQLite.SQLiteConnection)
                    Me._symbolTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SQLite.SQLiteTransaction)
                    If Me._symbolTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._symbolTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._symbolTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._symbolgroupTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._symbolgroupTableAdapter, Me._symbolgroupTableAdapter.Connection)
                    Me._symbolgroupTableAdapter.Connection = CType(workConnection,Global.System.Data.SQLite.SQLiteConnection)
                    Me._symbolgroupTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SQLite.SQLiteTransaction)
                    If Me._symbolgroupTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._symbolgroupTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._symbolgroupTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._thumbpositionTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._thumbpositionTableAdapter, Me._thumbpositionTableAdapter.Connection)
                    Me._thumbpositionTableAdapter.Connection = CType(workConnection,Global.System.Data.SQLite.SQLiteConnection)
                    Me._thumbpositionTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SQLite.SQLiteTransaction)
                    If Me._thumbpositionTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._thumbpositionTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._thumbpositionTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._versionTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._versionTableAdapter, Me._versionTableAdapter.Connection)
                    Me._versionTableAdapter.Connection = CType(workConnection,Global.System.Data.SQLite.SQLiteConnection)
                    Me._versionTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SQLite.SQLiteTransaction)
                    If Me._versionTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._versionTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._versionTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._actionfingerTableAdapter) Is Nothing) Then
                    Me._actionfingerTableAdapter.Connection = CType(revertConnections(Me._actionfingerTableAdapter),Global.System.Data.SQLite.SQLiteConnection)
                    Me._actionfingerTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._basesymbolTableAdapter) Is Nothing) Then
                    Me._basesymbolTableAdapter.Connection = CType(revertConnections(Me._basesymbolTableAdapter),Global.System.Data.SQLite.SQLiteConnection)
                    Me._basesymbolTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._basesymbol1TableAdapter) Is Nothing) Then
                    Me._basesymbol1TableAdapter.Connection = CType(revertConnections(Me._basesymbol1TableAdapter),Global.System.Data.SQLite.SQLiteConnection)
                    Me._basesymbol1TableAdapter.Transaction = Nothing
                End If
                If (Not (Me._categoryTableAdapter) Is Nothing) Then
                    Me._categoryTableAdapter.Connection = CType(revertConnections(Me._categoryTableAdapter),Global.System.Data.SQLite.SQLiteConnection)
                    Me._categoryTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._classificationTableAdapter) Is Nothing) Then
                    Me._classificationTableAdapter.Connection = CType(revertConnections(Me._classificationTableAdapter),Global.System.Data.SQLite.SQLiteConnection)
                    Me._classificationTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._groupTableAdapter) Is Nothing) Then
                    Me._groupTableAdapter.Connection = CType(revertConnections(Me._groupTableAdapter),Global.System.Data.SQLite.SQLiteConnection)
                    Me._groupTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._multiplefingerTableAdapter) Is Nothing) Then
                    Me._multiplefingerTableAdapter.Connection = CType(revertConnections(Me._multiplefingerTableAdapter),Global.System.Data.SQLite.SQLiteConnection)
                    Me._multiplefingerTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._rootshapeTableAdapter) Is Nothing) Then
                    Me._rootshapeTableAdapter.Connection = CType(revertConnections(Me._rootshapeTableAdapter),Global.System.Data.SQLite.SQLiteConnection)
                    Me._rootshapeTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._rootshapegroupTableAdapter) Is Nothing) Then
                    Me._rootshapegroupTableAdapter.Connection = CType(revertConnections(Me._rootshapegroupTableAdapter),Global.System.Data.SQLite.SQLiteConnection)
                    Me._rootshapegroupTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._rootshapequickTableAdapter) Is Nothing) Then
                    Me._rootshapequickTableAdapter.Connection = CType(revertConnections(Me._rootshapequickTableAdapter),Global.System.Data.SQLite.SQLiteConnection)
                    Me._rootshapequickTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._symbolTableAdapter) Is Nothing) Then
                    Me._symbolTableAdapter.Connection = CType(revertConnections(Me._symbolTableAdapter),Global.System.Data.SQLite.SQLiteConnection)
                    Me._symbolTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._symbolgroupTableAdapter) Is Nothing) Then
                    Me._symbolgroupTableAdapter.Connection = CType(revertConnections(Me._symbolgroupTableAdapter),Global.System.Data.SQLite.SQLiteConnection)
                    Me._symbolgroupTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._thumbpositionTableAdapter) Is Nothing) Then
                    Me._thumbpositionTableAdapter.Connection = CType(revertConnections(Me._thumbpositionTableAdapter),Global.System.Data.SQLite.SQLiteConnection)
                    Me._thumbpositionTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._versionTableAdapter) Is Nothing) Then
                    Me._versionTableAdapter.Connection = CType(revertConnections(Me._versionTableAdapter),Global.System.Data.SQLite.SQLiteConnection)
                    Me._versionTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
